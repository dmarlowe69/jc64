/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sw_emulator.swing;

import java.awt.event.ActionEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.text.Utilities;
import org.fife.rsta.ui.search.FindDialog;
import org.fife.rsta.ui.search.SearchEvent;
import org.fife.rsta.ui.search.SearchListener;
import org.fife.ui.rtextarea.SearchContext;
import org.fife.ui.rtextarea.SearchEngine;
import org.fife.ui.rtextarea.SearchResult;
import sw_emulator.software.Disassembly;
import sw_emulator.swing.main.Freeze;
import sw_emulator.swing.main.Project;

/**
 *
 * @author ice
 */
public class JFreezeFrame extends javax.swing.JFrame {
    
  /** Find dialog for source */
  FindDialog findDialogSource;
  
  /** Projecyt to use */
  Project project;
  
  /** Disassembler */
  Disassembly disassembly;
  
  /** Actual freeze */
  Freeze freeze;

    /**
     * Creates new form JFreezeFrame
     */
    public JFreezeFrame() {
        initComponents();
        
        Shared.framesList.add(this);
        Shared.framesList.add(findDialogSource);        
        findDialogSource.setSearchString(" ");
    }
    
    /**
     * Set up the frame 
     * 
     * @param project the project to use 
     * @param disassembly the disassembly engine
     */
    public void setup(Project project, Disassembly disassembly) {
      this.project=project;  
      this.disassembly=disassembly;    
      
      popolateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPaneFreeze = new javax.swing.JSplitPane();
        jPanelFreeze = new javax.swing.JPanel();
        jScrollPaneFreeze = new javax.swing.JScrollPane();
        jTableFreeze = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        rSyntaxTextAreaSource = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Freeze source");
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });

        jPanelFreeze.setLayout(new java.awt.BorderLayout());

        jTableFreeze.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Freezed source name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableFreeze.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableFreeze.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {
                if (jTableFreeze.getSelectedRow() > -1) {
                    apply(getFreeze((String)jTableFreeze.getValueAt(jTableFreeze.getSelectedRow(), 0)));
                }
            }
        });
        jScrollPaneFreeze.setViewportView(jTableFreeze);

        jPanelFreeze.add(jScrollPaneFreeze, java.awt.BorderLayout.CENTER);

        jButton1.setText("Freeze");
        jButton1.setToolTipText("Add a new freezed txt image");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        jButtonDelete.setText("Delete");
        jButtonDelete.setToolTipText("Delete the selected frrezed image");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonDelete);

        jPanelFreeze.add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jSplitPaneFreeze.setLeftComponent(jPanelFreeze);

        rSyntaxTextAreaSource.setColumns(20);
        rSyntaxTextAreaSource.setRows(5);
        rSyntaxTextAreaSource.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        rSyntaxTextAreaSource.setSyntaxEditingStyle("text/asm6502");
        findDialogSource=new FindDialog(this, new SearchListener() {
            @Override
            public void searchEvent(SearchEvent e) {
                SearchEvent.Type type = e.getType();
                SearchContext context = e.getSearchContext();
                SearchResult result;

                switch (type) {
                    default: // Prevent FindBugs warning later
                    case MARK_ALL:
                    result = SearchEngine.markAll(rSyntaxTextAreaSource, context);
                    break;
                    case FIND:
                    result = SearchEngine.find(rSyntaxTextAreaSource, context);
                    if (!result.wasFound()) {
                        UIManager.getLookAndFeel().provideErrorFeedback(rSyntaxTextAreaSource);
                    }
                    break;
                }

            }

            @Override
            public String getSelectedText() {
                return rSyntaxTextAreaSource.getSelectedText();
            }
        }
    );

    rSyntaxTextAreaSource.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_F, InputEvent.CTRL_MASK),
        new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        }
    );
    rSyntaxTextAreaSource.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            rSyntaxTextAreaSourceMouseReleased(evt);
        }
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            rSyntaxTextAreaSourceMouseClicked(evt);
        }
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            rSyntaxTextAreaSourceMouseEntered(evt);
        }
    });
    jScrollPane2.setViewportView(rSyntaxTextAreaSource);

    jSplitPaneFreeze.setRightComponent(jScrollPane2);

    getContentPane().add(jSplitPaneFreeze, java.awt.BorderLayout.CENTER);

    setBounds(0, 0, 1074, 805);
    }// </editor-fold>//GEN-END:initComponents

    private void rSyntaxTextAreaSourceMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rSyntaxTextAreaSourceMouseReleased

    }//GEN-LAST:event_rSyntaxTextAreaSourceMouseReleased

    private void rSyntaxTextAreaSourceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rSyntaxTextAreaSourceMouseClicked

    }//GEN-LAST:event_rSyntaxTextAreaSourceMouseClicked

    private void rSyntaxTextAreaSourceMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rSyntaxTextAreaSourceMouseEntered

    }//GEN-LAST:event_rSyntaxTextAreaSourceMouseEntered

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      addNew();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
      delete();
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
      if (freeze!=null) freeze.text=rSyntaxTextAreaSource.getText();
    }//GEN-LAST:event_formWindowLostFocus

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFreezeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFreezeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFreezeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFreezeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFreezeFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelFreeze;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneFreeze;
    private javax.swing.JSplitPane jSplitPaneFreeze;
    private javax.swing.JTable jTableFreeze;
    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea rSyntaxTextAreaSource;
    // End of variables declaration//GEN-END:variables

    
    /**
     * Populate table
     */
    private void popolateTable() {
      DefaultTableModel model = (DefaultTableModel)jTableFreeze.getModel();
      if (model.getRowCount()>0) {
        for (int i=model.getRowCount()-1; i>=0; i--)  {
          model.removeRow(i);
        }
      }
     
      if (project.freezes != null) {
        for (Freeze freeze: project.freezes) {
           model.addRow(new Object[]{freeze.name});
        }
      }  
      
      model.fireTableDataChanged();
    }
    
    /**
     * Add a new image
     */
    private void addNew() {
      String name=JOptionPane.showInputDialog("Gives the name of this new freeze");
      
      if (name==null || "".equals(name)) return;
            
      if (getFreeze(name)!=null) {
        JOptionPane.showMessageDialog(this, "This freeze name is already present. Skip action.", "Warning", JOptionPane.WARNING_MESSAGE);
        return;
      }
      
      Freeze freeze=new Freeze();
      freeze.name=name;
      freeze.text=disassembly.source;
      // be sure to have a value
      if (freeze.text==null) freeze.text="";
      
      int size=0;
      if (project.freezes!=null) size=project.freezes.length;
      
      // copy the value in the list
      Freeze[] freezes2=new Freeze[size+1];
      if (size>0) System.arraycopy(project.freezes, 0, freezes2, 0, size);
      freezes2[size]=freeze;
            
      project.freezes=freezes2;  
      
      DefaultTableModel model = (DefaultTableModel)jTableFreeze.getModel();
      model.addRow(new Object[]{freeze.name});
      jTableFreeze.setRowSelectionInterval(model.getRowCount()-1, model.getRowCount()-1);
      model.fireTableDataChanged();
    }
    
    /**
     * Delete the selected element
     */
    public void delete() {
      int row=jTableFreeze.getSelectedRow();
      
      if (row<0) return;
      
      String name=(String)jTableFreeze.getValueAt(row, 0);
      
      // copy the value in the list
      int size=jTableFreeze.getRowCount();
      Freeze[] freezes2=new Freeze[size-1];
      
      int j=0;
      for (int i=0; i<size; i++) {
        if (project.freezes[i].name.equals(name)) continue;
         
        freezes2[j]=project.freezes[i];
        j++;
      }
      project.freezes=freezes2;
      popolateTable();
    }
    
    /**
     * Get the freeze with tha name of null otherwise
     * 
     * @param name the name of the freeze to search for
     * @return the freeze object
     */
    private Freeze getFreeze(String name) {
      if (project.freezes==null) return null;
      for (Freeze freeze: project.freezes) {
        if (freeze.name.equals(name)) {
          return freeze;
        }  
      }  
      
      return null;
    }
    
    /**
     * Apply the new freeze
     * 
     * @param newFreeze the new freeze
     */
    private void apply(Freeze newFreeze) {
      if (freeze!=null) freeze.text=rSyntaxTextAreaSource.getText();
        
      rSyntaxTextAreaSource.setText(newFreeze.text);  
      freeze=newFreeze;      
    }
}
