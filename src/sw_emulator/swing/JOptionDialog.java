/**
 * @(#)JPanelOption.java 2019/12/01
 *
 * ICE Team free software group
 *
 * This file is part of C64 Java Software Emulator.
 * See README for copyright notice.
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 *  02111-1307  USA.
 */
package sw_emulator.swing;

import com.formdev.flatlaf.FlatLaf;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.plaf.metal.MetalTheme;
import javax.swing.UIManager;

import sw_emulator.software.cpu.M6510Dasm;
import sw_emulator.software.machine.C64Dasm;
import sw_emulator.swing.main.FileManager;
import sw_emulator.swing.main.Option;

/**
 * A dialog for option
 * 
 * @author ice
 */
public class JOptionDialog extends javax.swing.JDialog {
  /** Option to use */
  Option option=new Option();
    
  /** Actual selected look and feel */
  String actualLEF=option.getLafName();
  
  /** Actual metal theme to use */
  MetalTheme actualTheme=option.getMethalTheme();
  
  /** Actual flat laf theme */
  String actualLaf=option.getFlatLaf();
  
  /** Default list model for laf look & feel */
  DefaultListModel<String> listModel=new DefaultListModel();
  
  /** True if event can be processed */
  boolean goFlat=false;
    
    
    /**
     * Creates new form JOptionDialog
     */
    public JOptionDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        Shared.framesList.add(this);
        platformeEnable();
    }
    
  /**
   * Enable some chooses based onto platforme specific implementation
   */
  private void platformeEnable() {
    String name;  
      
    UIManager.LookAndFeelInfo[] info=UIManager.getInstalledLookAndFeels();
    // scan all the look and feels 
    for (int i=0; i<info.length; i++) {
      name=info[i].getClassName();  
      if (name.equals(Option.LAF_MAC)) jRadioButtonLookMac.setEnabled(true);
      if (name.equals(Option.LAF_METAL)) jRadioButtonLookMetal.setEnabled(true);
      if (name.equals(Option.LAF_MOTIF)) jRadioButtonLookJava.setEnabled(true);
      if (name.equals(Option.LAF_WINDOWS)) jRadioButtonLookWin.setEnabled(true);
      if (name.equals(Option.LAF_CWINDOWS)) jRadioButtonLookCWin.setEnabled(true);
      if (name.equals(Option.LAF_GTK)) jRadioButtonLookGtk.setEnabled(true);
      if (name.equals(Option.LAF_NIMBUS)) jRadioButtonLookNimbus.setEnabled(true);
    }
    
    // scan all flat laf
    for (FlatLaf laf: Option.LAF_SYNTH_FLAT) {
      listModel.addElement(laf.getName());
    }
  }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupOpcodeFormatting = new javax.swing.ButtonGroup();
        buttonGroupIllegalOpcodeStyle = new javax.swing.ButtonGroup();
        buttonGroupLanguage = new javax.swing.ButtonGroup();
        buttonGroupCodeData = new javax.swing.ButtonGroup();
        buttonGroupLook = new javax.swing.ButtonGroup();
        buttonGroupTheme = new javax.swing.ButtonGroup();
        buttonGroupDasmLabel = new javax.swing.ButtonGroup();
        buttonGroupDasmByte = new javax.swing.ButtonGroup();
        buttonGroupTmpxLabel = new javax.swing.ButtonGroup();
        buttonGroupTmpxByte = new javax.swing.ButtonGroup();
        buttonGroupCa65Label = new javax.swing.ButtonGroup();
        buttonGroupCa65Byte = new javax.swing.ButtonGroup();
        buttonGroupTmpxWord = new javax.swing.ButtonGroup();
        buttonGroupC65Word = new javax.swing.ButtonGroup();
        buttonGroupAcmeLabel = new javax.swing.ButtonGroup();
        buttonGroupAcmeByte = new javax.swing.ButtonGroup();
        buttonGroupDasmWord = new javax.swing.ButtonGroup();
        buttonGroupAcmeWord = new javax.swing.ButtonGroup();
        jPanelOption = new javax.swing.JPanel();
        jTabbedPaneOption = new javax.swing.JTabbedPane();
        jPanelPreview = new javax.swing.JPanel();
        jLabelIllegalOpcodeStyle = new javax.swing.JLabel();
        jRadioButtonStyle1 = new javax.swing.JRadioButton();
        jRadioButtonStyle2 = new javax.swing.JRadioButton();
        jRadioButtonStyle3 = new javax.swing.JRadioButton();
        jLabelLanguage = new javax.swing.JLabel();
        jRadioButtonLangEnglish = new javax.swing.JRadioButton();
        jRadioButtonLangItalian = new javax.swing.JRadioButton();
        jCheckBoxEraseDComm = new javax.swing.JCheckBox();
        jCheckBoxOpcodeFormattingPreview = new javax.swing.JCheckBox();
        jCheckBoxUndefinedCode = new javax.swing.JCheckBox();
        jSpinnerMaxLength = new javax.swing.JSpinner();
        jLabelMaxLength = new javax.swing.JLabel();
        jLabelAggregate = new javax.swing.JLabel();
        jSpinnerMaxAggregate = new javax.swing.JSpinner();
        jLabelPSIDinitsong = new javax.swing.JLabel();
        jTextFieldInitSongs = new javax.swing.JTextField();
        jLabelPSIDplaysound = new javax.swing.JLabel();
        jTextFieldPlaySound = new javax.swing.JTextField();
        jLabelSIDfreqLo = new javax.swing.JLabel();
        jTextFieldSidFreqLo = new javax.swing.JTextField();
        jLabelSIDfreqHi = new javax.swing.JLabel();
        jTextFieldSidFreqHi = new javax.swing.JTextField();
        jCheckBoxOpcodeFormattingSource = new javax.swing.JCheckBox();
        jCheckBoxErasePlus = new javax.swing.JCheckBox();
        jLabelInstrSep = new javax.swing.JLabel();
        jSpinnerInstrSpaces = new javax.swing.JSpinner();
        jSpinnerInstrTabs = new javax.swing.JSpinner();
        jLabelInstrSpace = new javax.swing.JLabel();
        jLabelInstrTabs = new javax.swing.JLabel();
        jLabelDataSep = new javax.swing.JLabel();
        jLabelDataSpace = new javax.swing.JLabel();
        jSpinnerDataSpaces = new javax.swing.JSpinner();
        jLabelDataTabs = new javax.swing.JLabel();
        jSpinnerDataTabs = new javax.swing.JSpinner();
        jCheckBoxLabel = new javax.swing.JCheckBox();
        jPanelComment = new javax.swing.JPanel();
        jLabelautocomment = new javax.swing.JLabel();
        jTabbedPaneComm = new javax.swing.JTabbedPane();
        jPanelC64Comm = new javax.swing.JPanel();
        jCheckBoxC64ZeroPage = new javax.swing.JCheckBox();
        jCheckBoxC64StackArea = new javax.swing.JCheckBox();
        jCheckBoxC64_200Area = new javax.swing.JCheckBox();
        jCheckBoxC64_300Area = new javax.swing.JCheckBox();
        jCheckBoxC64ScreenArea = new javax.swing.JCheckBox();
        jCheckBoxC64FreeArea = new javax.swing.JCheckBox();
        jCheckBoxC64BasicRom = new javax.swing.JCheckBox();
        jCheckBoxC64FreeRam = new javax.swing.JCheckBox();
        jCheckC64BoxVicII = new javax.swing.JCheckBox();
        jCheckC64BoxSid = new javax.swing.JCheckBox();
        jCheckBoxC64Color = new javax.swing.JCheckBox();
        jCheckBoxC64Cia1 = new javax.swing.JCheckBox();
        jCheckBoxC64Cia2 = new javax.swing.JCheckBox();
        jCheckBoxC64KernalRom = new javax.swing.JCheckBox();
        jPanelC1541Comm = new javax.swing.JPanel();
        jCheckBoxC1541ZeroPage = new javax.swing.JCheckBox();
        jCheckBoxC1541StackArea = new javax.swing.JCheckBox();
        jCheckBoxC1541_200Area = new javax.swing.JCheckBox();
        jCheckBoxC1541Via1 = new javax.swing.JCheckBox();
        jCheckBoxC1541Via2 = new javax.swing.JCheckBox();
        jCheckBoxC1541Kernal = new javax.swing.JCheckBox();
        jCheckBoxC1541Buffer0 = new javax.swing.JCheckBox();
        jCheckBoxC1541Buffer1 = new javax.swing.JCheckBox();
        jCheckBoxC1541Buffer2 = new javax.swing.JCheckBox();
        jCheckBoxC1541Buffer3 = new javax.swing.JCheckBox();
        jCheckBoxC1541Buffer4 = new javax.swing.JCheckBox();
        jPanelC128Comm = new javax.swing.JPanel();
        jPanelVic20Comm = new javax.swing.JPanel();
        jCheckBoxVic20StackArea = new javax.swing.JCheckBox();
        jCheckBoxVic20ZeroPage = new javax.swing.JCheckBox();
        jCheckBoxVic20_200Area = new javax.swing.JCheckBox();
        jCheckBoxVic20_300Area = new javax.swing.JCheckBox();
        jCheckBoxVic20_400Area = new javax.swing.JCheckBox();
        jCheckBoxVic20Vic = new javax.swing.JCheckBox();
        jCheckBoxVic20Via1 = new javax.swing.JCheckBox();
        jCheckBoxVic20Via2 = new javax.swing.JCheckBox();
        jCheckBoxVic20UserBasic = new javax.swing.JCheckBox();
        jCheckBoxVic20Screen = new javax.swing.JCheckBox();
        jCheckBoxVic20_8kExp1 = new javax.swing.JCheckBox();
        jCheckBoxVic20_8kExp2 = new javax.swing.JCheckBox();
        jCheckBoxVic20_8kExp3 = new javax.swing.JCheckBox();
        jCheckBoxVic20Character = new javax.swing.JCheckBox();
        jCheckBoxVic20Color = new javax.swing.JCheckBox();
        jCheckBoxVic20Block2 = new javax.swing.JCheckBox();
        jCheckBoxVic20Block3 = new javax.swing.JCheckBox();
        jCheckBoxVic20Block4 = new javax.swing.JCheckBox();
        jCheckBoxVic20BasicRom = new javax.swing.JCheckBox();
        jCheckBoxVic20KernalRom = new javax.swing.JCheckBox();
        jPanelPlus4Comm = new javax.swing.JPanel();
        jCheckBoxPlus4ZeroPage = new javax.swing.JCheckBox();
        jCheckBoxPlus4StackArea = new javax.swing.JCheckBox();
        jCheckBoxPlus4_200Area = new javax.swing.JCheckBox();
        jCheckBoxPlus4_300Area = new javax.swing.JCheckBox();
        jCheckBoxPlus4_400Area = new javax.swing.JCheckBox();
        jCheckBoxPlus4_500Area = new javax.swing.JCheckBox();
        jCheckBoxPlus4_600Area = new javax.swing.JCheckBox();
        jCheckBoxPlus4_700Area = new javax.swing.JCheckBox();
        jCheckBoxPlus4ColorArea = new javax.swing.JCheckBox();
        jCheckBoxPlus4VideoArea = new javax.swing.JCheckBox();
        jCheckBoxPlus4BasicRamP = new javax.swing.JCheckBox();
        jCheckBoxPlus4Luminance = new javax.swing.JCheckBox();
        jCheckBoxPlus4ColorBitmap = new javax.swing.JCheckBox();
        jCheckBoxPlus4GraphicData = new javax.swing.JCheckBox();
        jCheckBoxPlus4BasicRamN = new javax.swing.JCheckBox();
        jCheckBoxPlus4BasicRom = new javax.swing.JCheckBox();
        jCheckBoxPlus4BasicExt = new javax.swing.JCheckBox();
        jCheckBoxPlus4Caracter = new javax.swing.JCheckBox();
        jCheckBoxPlus4Acia = new javax.swing.JCheckBox();
        jCheckBoxPlus4_6529B_1 = new javax.swing.JCheckBox();
        jCheckBoxPlus4_6529B_2 = new javax.swing.JCheckBox();
        jCheckBoxPlus4Ted = new javax.swing.JCheckBox();
        jCheckBoxPlus4Kernal = new javax.swing.JCheckBox();
        jPanelDisassembler = new javax.swing.JPanel();
        jLabelautocomment1 = new javax.swing.JLabel();
        jComboBoxAssembler = new javax.swing.JComboBox<>();
        jTabbedPaneAssembler = new javax.swing.JTabbedPane();
        jPanelDasm = new javax.swing.JPanel();
        jCheckBoxDasmF3Comp = new javax.swing.JCheckBox();
        jLabelDasmByteDeclaration = new javax.swing.JLabel();
        jRadioButtonDasmDotByte = new javax.swing.JRadioButton();
        jRadioButtonDasmByte = new javax.swing.JRadioButton();
        jRadioButtonDasmDcByte = new javax.swing.JRadioButton();
        jLabelDasmLabelDeclaration = new javax.swing.JLabel();
        jRadioButtonDasmLabelName = new javax.swing.JRadioButton();
        jRadioButtonDasmLabelNameColon = new javax.swing.JRadioButton();
        jRadioButtonDasmDcBByte = new javax.swing.JRadioButton();
        jLabelDasmByteDeclaration1 = new javax.swing.JLabel();
        jRadioButtonDasmDotWord = new javax.swing.JRadioButton();
        jRadioButtonDasmWord = new javax.swing.JRadioButton();
        jRadioButtonDasmDcWWord = new javax.swing.JRadioButton();
        jScrollPaneDasmDotByte = new javax.swing.JScrollPane();
        jTextPaneDasmDotByte = new javax.swing.JTextPane();
        jScrollPaneDasmByte = new javax.swing.JScrollPane();
        jTextPaneDasmByte = new javax.swing.JTextPane();
        jScrollPaneDasmDcByte = new javax.swing.JScrollPane();
        jTextPaneDasmDcByte = new javax.swing.JTextPane();
        jScrollPaneDasmDCBByte = new javax.swing.JScrollPane();
        jTextPaneDasmDcBByte = new javax.swing.JTextPane();
        jScrollPaneDasmDotWord = new javax.swing.JScrollPane();
        jTextPaneDasmDotWord = new javax.swing.JTextPane();
        jScrollPaneDasmWord = new javax.swing.JScrollPane();
        jTextPaneDasmWord = new javax.swing.JTextPane();
        jScrollPaneDasmDcWord = new javax.swing.JScrollPane();
        jTextPaneDasmDcWord = new javax.swing.JTextPane();
        jScrollPaneDasmLabelName = new javax.swing.JScrollPane();
        jTextPaneDasmLabelName = new javax.swing.JTextPane();
        jScrollPaneDasmLabelNameColon = new javax.swing.JScrollPane();
        jTextPaneDasmLabelNameColon = new javax.swing.JTextPane();
        jPanelTMPx = new javax.swing.JPanel();
        jLabelTmpxLabelDeclaration = new javax.swing.JLabel();
        jRadioButtonTmpxLabelName = new javax.swing.JRadioButton();
        jScrollPaneTmpxByte = new javax.swing.JScrollPane();
        jTextPaneTmpxLabelName = new javax.swing.JTextPane();
        jLabelTmpxByteDeclaration = new javax.swing.JLabel();
        jRadioButtonTmpxDotByte = new javax.swing.JRadioButton();
        jScrollPaneTmpxWord = new javax.swing.JScrollPane();
        jTextPaneTmpxDotByte = new javax.swing.JTextPane();
        jLabelTmpxWordDeclaration = new javax.swing.JLabel();
        jRadioButtonTmpxDotWord = new javax.swing.JRadioButton();
        jScrollPaneTmpxDotWord = new javax.swing.JScrollPane();
        jTextPaneTmpxDotWord = new javax.swing.JTextPane();
        jPanelCa65 = new javax.swing.JPanel();
        jLabelCa65LabelDeclaration = new javax.swing.JLabel();
        jRadioButtonCa65LabelName = new javax.swing.JRadioButton();
        jScrollPaneCa65LabelName = new javax.swing.JScrollPane();
        jTextPaneCa65LabelName = new javax.swing.JTextPane();
        jLabelC65ByteDeclaration = new javax.swing.JLabel();
        jRadioButtonC65DotByte = new javax.swing.JRadioButton();
        jScrollPaneC65DotByte = new javax.swing.JScrollPane();
        jTextPaneCa65DotByte = new javax.swing.JTextPane();
        jRadioButtonC65Byte = new javax.swing.JRadioButton();
        jScrollPaneC65BytByte = new javax.swing.JScrollPane();
        jTextPaneC65BytByte = new javax.swing.JTextPane();
        jLabelC65WordDeclaration = new javax.swing.JLabel();
        jRadioButtonC65DotWord = new javax.swing.JRadioButton();
        jScrollPaneCa65DotWord = new javax.swing.JScrollPane();
        jTextPaneC65DotWord = new javax.swing.JTextPane();
        jScrollPaneC65Word = new javax.swing.JScrollPane();
        jTextPaneC65Word = new javax.swing.JTextPane();
        jRadioButtonC65Word = new javax.swing.JRadioButton();
        jPanelAcme = new javax.swing.JPanel();
        jLabelAcmeLabelDeclaration = new javax.swing.JLabel();
        jRadioButtonAcmeLabelName = new javax.swing.JRadioButton();
        jScrollPaneAcmeLabelName = new javax.swing.JScrollPane();
        jTextPaneAcmeLabelName = new javax.swing.JTextPane();
        jRadioButtonAcmeLabelNameColon = new javax.swing.JRadioButton();
        jScrollPaneAcmeLabelNameColon = new javax.swing.JScrollPane();
        jTextPaneAcmeLabelNameColon = new javax.swing.JTextPane();
        jLabelAcmeByteDeclaration = new javax.swing.JLabel();
        jRadioButtonAcmeMarkByte = new javax.swing.JRadioButton();
        jScrollPaneAcmeMarkByte = new javax.swing.JScrollPane();
        jTextPaneAcmeMarkByte = new javax.swing.JTextPane();
        jRadioButtonAcmeMark8Byte = new javax.swing.JRadioButton();
        jScrollPaneAcmeMark8Byte = new javax.swing.JScrollPane();
        jTextPaneAcmeMark8Byte = new javax.swing.JTextPane();
        jLabelAcmeWordByteDeclaration = new javax.swing.JLabel();
        jRadioButtonAcmeMarkWord = new javax.swing.JRadioButton();
        jScrollPaneAcmeMarkByte1 = new javax.swing.JScrollPane();
        jTextPaneAcmeMarkWork = new javax.swing.JTextPane();
        jRadioButtonAcmeMark16Work = new javax.swing.JRadioButton();
        jScrollPaneAcmeMark8Byte1 = new javax.swing.JScrollPane();
        jTextPaneAcmeMark16Work = new javax.swing.JTextPane();
        jPanelKickAssembler = new javax.swing.JPanel();
        jLabelKickLabelDeclaration = new javax.swing.JLabel();
        jRadioButtonKickLabelName = new javax.swing.JRadioButton();
        jScrollPaneKickLabelName = new javax.swing.JScrollPane();
        jTextPaneKickCa65LabelName = new javax.swing.JTextPane();
        jLabelKickByteDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotByte = new javax.swing.JRadioButton();
        jScrollPaneKickWord = new javax.swing.JScrollPane();
        jTextPaneKickDotByte = new javax.swing.JTextPane();
        jLabelKickWordDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotWord = new javax.swing.JRadioButton();
        jScrollPaneTmpxDotWord1 = new javax.swing.JScrollPane();
        jTextPaneKickDotWord = new javax.swing.JTextPane();
        jPanelLook = new javax.swing.JPanel();
        jRadioButtonLookJava = new javax.swing.JRadioButton();
        jRadioButtonLookMac = new javax.swing.JRadioButton();
        jRadioButtonLookMetal = new javax.swing.JRadioButton();
        jRadioButtonLookWin = new javax.swing.JRadioButton();
        jRadioButtonLookGtk = new javax.swing.JRadioButton();
        jRadioButtonLookNimbus = new javax.swing.JRadioButton();
        jLabelLook = new javax.swing.JLabel();
        jLabelTheme = new javax.swing.JLabel();
        jRadioButtonOcean = new javax.swing.JRadioButton();
        jRadioButtonSteel = new javax.swing.JRadioButton();
        jRadioButtonAqua = new javax.swing.JRadioButton();
        jRadioButtonCharcoal = new javax.swing.JRadioButton();
        jRadioButtonHighContrast = new javax.swing.JRadioButton();
        jRadioButtonEmerald = new javax.swing.JRadioButton();
        jRadioButtonRuby = new javax.swing.JRadioButton();
        jRadioButtonLookCWin = new javax.swing.JRadioButton();
        jLabelBracket = new javax.swing.JLabel();
        jRadioButtonLookSynth = new javax.swing.JRadioButton();
        jLabelArrow = new javax.swing.JLabel();
        jScrollPaneList = new javax.swing.JScrollPane();
        jListLaf = new javax.swing.JList<>();
        jLabelFlatLaf = new javax.swing.JLabel();
        jPanelDn = new javax.swing.JPanel();
        jButtonLoad = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanelOption.setLayout(new java.awt.BorderLayout());

        jTabbedPaneOption.setFocusable(false);
        jTabbedPaneOption.setName("Options"); // NOI18N

        jLabelIllegalOpcodeStyle.setText("Illegal opcode style:");

        buttonGroupIllegalOpcodeStyle.add(jRadioButtonStyle1);
        jRadioButtonStyle1.setSelected(true);
        jRadioButtonStyle1.setText("ANE, ISB, SHY, SHS");
        jRadioButtonStyle1.setToolTipText("Mode use by John west and Marko M\"akel\"a");
        jRadioButtonStyle1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonStyle1ItemStateChanged(evt);
            }
        });

        buttonGroupIllegalOpcodeStyle.add(jRadioButtonStyle2);
        jRadioButtonStyle2.setText("AXA, ISC, SYH, SSH");
        jRadioButtonStyle2.setToolTipText("Mode use by Juergen Buchmueller");
        jRadioButtonStyle2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonStyle2ItemStateChanged(evt);
            }
        });

        buttonGroupIllegalOpcodeStyle.add(jRadioButtonStyle3);
        jRadioButtonStyle3.setText("XAA, INS, SAY, TAS");
        jRadioButtonStyle3.setToolTipText("Mode use by Adam Vardy");
        jRadioButtonStyle3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonStyle3ItemStateChanged(evt);
            }
        });

        jLabelLanguage.setText("Language of comments:");

        buttonGroupLanguage.add(jRadioButtonLangEnglish);
        jRadioButtonLangEnglish.setSelected(true);
        jRadioButtonLangEnglish.setText("English");
        jRadioButtonLangEnglish.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLangEnglishItemStateChanged(evt);
            }
        });

        buttonGroupLanguage.add(jRadioButtonLangItalian);
        jRadioButtonLangItalian.setText("Italian");
        jRadioButtonLangItalian.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLangItalianItemStateChanged(evt);
            }
        });

        jCheckBoxEraseDComm.setSelected(true);
        jCheckBoxEraseDComm.setText("Erase DASM automatic comment when mark a memory location as Data");
        jCheckBoxEraseDComm.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxEraseDCommItemStateChanged(evt);
            }
        });

        jCheckBoxOpcodeFormattingPreview.setSelected(true);
        jCheckBoxOpcodeFormattingPreview.setText("Opcode formatting as Upper case (NOP, JMP, ...) insteas of Lower case (nop, jmp, ...) for preview");
        jCheckBoxOpcodeFormattingPreview.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxOpcodeFormattingPreviewItemStateChanged(evt);
            }
        });

        jCheckBoxUndefinedCode.setSelected(true);
        jCheckBoxUndefinedCode.setText("Undefined code/data used as code instead of data");
        jCheckBoxUndefinedCode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxUndefinedCodeItemStateChanged(evt);
            }
        });

        jSpinnerMaxLength.setModel(new javax.swing.SpinnerNumberModel(25, 5, 40, 1));
        jSpinnerMaxLength.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaxLengthStateChanged(evt);
            }
        });

        jLabelMaxLength.setText("Max lenght of label (some assembler has a limit):");

        jLabelAggregate.setText("Aggregate up to X values on a data row:");

        jSpinnerMaxAggregate.setModel(new javax.swing.SpinnerNumberModel(8, 2, 8, 1));
        jSpinnerMaxAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaxAggregateStateChanged(evt);
            }
        });

        jLabelPSIDinitsong.setText("PSID init songs label:");

        jTextFieldInitSongs.setText("initSongs");
        jTextFieldInitSongs.setToolTipText("Label to use for the PSID starting init routine");
        jTextFieldInitSongs.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldInitSongsFocusLost(evt);
            }
        });

        jLabelPSIDplaysound.setText("PSID play sound label:");

        jTextFieldPlaySound.setText("playSound");
        jTextFieldPlaySound.setToolTipText("Label to use for PSID play sound routine");
        jTextFieldPlaySound.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldPlaySoundFocusLost(evt);
            }
        });

        jLabelSIDfreqLo.setText("SID frequency table low label:");

        jTextFieldSidFreqLo.setText("frequencyLo");
        jTextFieldSidFreqLo.setToolTipText("Label to use for low address of frequency table");
        jTextFieldSidFreqLo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldSidFreqLoFocusLost(evt);
            }
        });

        jLabelSIDfreqHi.setText("SID frequency table high label:");

        jTextFieldSidFreqHi.setText("frequencyHi");
        jTextFieldSidFreqHi.setToolTipText("Label to use for high address of frequenct table");
        jTextFieldSidFreqHi.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldSidFreqHiFocusLost(evt);
            }
        });

        jCheckBoxOpcodeFormattingSource.setText("Opcode formatting as Upper case (NOP, JMP, ...) insteas of Lower case (nop, jmp, ...) for source");
        jCheckBoxOpcodeFormattingSource.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxOpcodeFormattingSourceItemStateChanged(evt);
            }
        });

        jCheckBoxErasePlus.setSelected(true);
        jCheckBoxErasePlus.setText("Erase relative + address when mark a memory location as Data");
        jCheckBoxErasePlus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxErasePlusItemStateChanged(evt);
            }
        });

        jLabelInstrSep.setText("Instruction separator in start of row of source:");

        jSpinnerInstrSpaces.setModel(new javax.swing.SpinnerNumberModel(6, 0, 20, 1));
        jSpinnerInstrSpaces.setToolTipText("At least 1 space or 1 tabs is necessary");
        jSpinnerInstrSpaces.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerInstrSpacesStateChanged(evt);
            }
        });

        jSpinnerInstrTabs.setModel(new javax.swing.SpinnerNumberModel(0, 0, 8, 1));
        jSpinnerInstrTabs.setToolTipText("At least 1 space or 1 tabs is necessary");
        jSpinnerInstrTabs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerInstrTabsStateChanged(evt);
            }
        });

        jLabelInstrSpace.setText("Spaces:");

        jLabelInstrTabs.setText("Tabs:");

        jLabelDataSep.setText("Data separator in start of row of source:");

        jLabelDataSpace.setText("Spaces:");

        jSpinnerDataSpaces.setModel(new javax.swing.SpinnerNumberModel(2, 0, 20, 1));
        jSpinnerDataSpaces.setToolTipText("At least 1 space or 1 tabs is necessary");
        jSpinnerDataSpaces.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerDataSpacesStateChanged(evt);
            }
        });

        jLabelDataTabs.setText("Tabs:");

        jSpinnerDataTabs.setModel(new javax.swing.SpinnerNumberModel(0, 0, 8, 1));
        jSpinnerDataTabs.setToolTipText("At least 1 space or 1 tabs is necessary");
        jSpinnerDataTabs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerDataTabsStateChanged(evt);
            }
        });

        jCheckBoxLabel.setText("Label is on a separated line from instruction");
        jCheckBoxLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxLabelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelPreviewLayout = new javax.swing.GroupLayout(jPanelPreview);
        jPanelPreview.setLayout(jPanelPreviewLayout);
        jPanelPreviewLayout.setHorizontalGroup(
            jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                        .addComponent(jLabelLanguage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(292, 292, 292))
                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelPreviewLayout.createSequentialGroup()
                                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelMaxLength, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                            .addComponent(jLabelDataSep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGap(24, 24, 24)
                                            .addComponent(jLabelDataSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jSpinnerDataSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(22, 22, 22)
                                            .addComponent(jLabelDataTabs)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jSpinnerDataTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelPreviewLayout.createSequentialGroup()
                                            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabelAggregate, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                                                .addComponent(jLabelPSIDinitsong, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                                                .addComponent(jLabelSIDfreqLo, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                                                .addComponent(jLabelPSIDplaysound, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                                                .addComponent(jLabelInstrSep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabelSIDfreqHi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGap(24, 24, 24)
                                            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jTextFieldPlaySound, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jTextFieldInitSongs, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jSpinnerMaxLength)
                                                    .addComponent(jSpinnerMaxAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(jTextFieldSidFreqLo, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jTextFieldSidFreqHi, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                                    .addComponent(jLabelInstrSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(jSpinnerInstrSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(22, 22, 22)
                                                    .addComponent(jLabelInstrTabs)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(jSpinnerInstrTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                .addGap(55, 55, 55))
                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelPreviewLayout.createSequentialGroup()
                                        .addComponent(jLabelIllegalOpcodeStyle, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                                .addComponent(jRadioButtonStyle1)
                                                .addGap(47, 47, 47)
                                                .addComponent(jRadioButtonStyle2, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jRadioButtonStyle3))
                                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                                .addComponent(jRadioButtonLangEnglish, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jRadioButtonLangItalian))))
                                    .addComponent(jCheckBoxOpcodeFormattingPreview, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCheckBoxOpcodeFormattingSource, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCheckBoxEraseDComm, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCheckBoxErasePlus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCheckBoxUndefinedCode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap(46, Short.MAX_VALUE))
                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                        .addComponent(jCheckBoxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanelPreviewLayout.setVerticalGroup(
            jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelIllegalOpcodeStyle)
                    .addComponent(jRadioButtonStyle1)
                    .addComponent(jRadioButtonStyle2)
                    .addComponent(jRadioButtonStyle3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelLanguage)
                    .addComponent(jRadioButtonLangEnglish)
                    .addComponent(jRadioButtonLangItalian))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxOpcodeFormattingPreview)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxOpcodeFormattingSource)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxEraseDComm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxErasePlus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxUndefinedCode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerMaxLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMaxLength))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAggregate)
                    .addComponent(jSpinnerMaxAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPSIDinitsong)
                    .addComponent(jTextFieldInitSongs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPSIDplaysound)
                    .addComponent(jTextFieldPlaySound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSIDfreqLo)
                    .addComponent(jTextFieldSidFreqLo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSIDfreqHi)
                    .addComponent(jTextFieldSidFreqHi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelInstrSep)
                    .addComponent(jSpinnerInstrSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerInstrTabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelInstrSpace)
                    .addComponent(jLabelInstrTabs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDataSep)
                    .addComponent(jSpinnerDataSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerDataTabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDataSpace)
                    .addComponent(jLabelDataTabs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxLabel)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        jTabbedPaneOption.addTab("Option", jPanelPreview);

        jLabelautocomment.setText("Automatic add comments to those known locations:");

        jCheckBoxC64ZeroPage.setSelected(true);
        jCheckBoxC64ZeroPage.setText("Zero page area ($00..$FF)");
        jCheckBoxC64ZeroPage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64ZeroPageItemStateChanged(evt);
            }
        });

        jCheckBoxC64StackArea.setSelected(true);
        jCheckBoxC64StackArea.setText("Stack area ($100..$1FF)");
        jCheckBoxC64StackArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64StackAreaItemStateChanged(evt);
            }
        });

        jCheckBoxC64_200Area.setSelected(true);
        jCheckBoxC64_200Area.setText("Support area for BASIC/KERNAL part 1 ($200..$2FF)");
        jCheckBoxC64_200Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64_200AreaItemStateChanged(evt);
            }
        });

        jCheckBoxC64_300Area.setSelected(true);
        jCheckBoxC64_300Area.setText("Support area for BASIC/KERNAL part 2 ($300..$3FF)");
        jCheckBoxC64_300Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64_300AreaItemStateChanged(evt);
            }
        });

        jCheckBoxC64ScreenArea.setSelected(true);
        jCheckBoxC64ScreenArea.setText("Screen area ($400..$7FF)");
        jCheckBoxC64ScreenArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64ScreenAreaItemStateChanged(evt);
            }
        });

        jCheckBoxC64FreeArea.setText("BASIC (free) area ($800..$9FFF)");
        jCheckBoxC64FreeArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64FreeAreaItemStateChanged(evt);
            }
        });

        jCheckBoxC64BasicRom.setSelected(true);
        jCheckBoxC64BasicRom.setText("BASIC ROM ($A000..$BFFF)");
        jCheckBoxC64BasicRom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64BasicRomItemStateChanged(evt);
            }
        });

        jCheckBoxC64FreeRam.setSelected(true);
        jCheckBoxC64FreeRam.setText("Free Ram ($C000..$CFFF)");
        jCheckBoxC64FreeRam.setEnabled(false);
        jCheckBoxC64FreeRam.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64FreeRamItemStateChanged(evt);
            }
        });

        jCheckC64BoxVicII.setSelected(true);
        jCheckC64BoxVicII.setText("VIC II chip ($D000..$D3FF)");
        jCheckC64BoxVicII.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckC64BoxVicIIItemStateChanged(evt);
            }
        });

        jCheckC64BoxSid.setSelected(true);
        jCheckC64BoxSid.setText("SID chip ($D400..$D7FF)");
        jCheckC64BoxSid.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckC64BoxSidItemStateChanged(evt);
            }
        });

        jCheckBoxC64Color.setSelected(true);
        jCheckBoxC64Color.setText("Color RAM ($D800..$DBFF)");
        jCheckBoxC64Color.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64ColorItemStateChanged(evt);
            }
        });

        jCheckBoxC64Cia1.setSelected(true);
        jCheckBoxC64Cia1.setText("CIA 1 ($DC00..$DCFF)");
        jCheckBoxC64Cia1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64Cia1ItemStateChanged(evt);
            }
        });

        jCheckBoxC64Cia2.setSelected(true);
        jCheckBoxC64Cia2.setText("CIA 2 ($DD00..$DDFF)");
        jCheckBoxC64Cia2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64Cia2ItemStateChanged(evt);
            }
        });

        jCheckBoxC64KernalRom.setSelected(true);
        jCheckBoxC64KernalRom.setText("KERNAL ROM ($E000..$FFFF)");
        jCheckBoxC64KernalRom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64KernalRomItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelC64CommLayout = new javax.swing.GroupLayout(jPanelC64Comm);
        jPanelC64Comm.setLayout(jPanelC64CommLayout);
        jPanelC64CommLayout.setHorizontalGroup(
            jPanelC64CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelC64CommLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelC64CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jCheckBoxC64ScreenArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64KernalRom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64Cia1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64Color, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckC64BoxSid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckC64BoxVicII, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64FreeRam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64FreeArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64_200Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64StackArea, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64ZeroPage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64_300Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64BasicRom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64Cia2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelC64CommLayout.setVerticalGroup(
            jPanelC64CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelC64CommLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jCheckBoxC64ZeroPage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64StackArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64_200Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64_300Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64ScreenArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64FreeArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64BasicRom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64FreeRam)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckC64BoxVicII)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckC64BoxSid)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64Color)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64Cia1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64Cia2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64KernalRom)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPaneComm.addTab("C64", jPanelC64Comm);

        jCheckBoxC1541ZeroPage.setSelected(true);
        jCheckBoxC1541ZeroPage.setText("Zero page area ($00..$FF)");
        jCheckBoxC1541ZeroPage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541ZeroPageItemStateChanged(evt);
            }
        });

        jCheckBoxC1541StackArea.setSelected(true);
        jCheckBoxC1541StackArea.setText("Stack area ($100..$1FF)");
        jCheckBoxC1541StackArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541StackAreaItemStateChanged(evt);
            }
        });

        jCheckBoxC1541_200Area.setSelected(true);
        jCheckBoxC1541_200Area.setText("Support area for KERNAL  ($200..$2FF)");
        jCheckBoxC1541_200Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541_200AreaItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Via1.setSelected(true);
        jCheckBoxC1541Via1.setText("VIA #1 ($1800..$180F)");
        jCheckBoxC1541Via1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Via1ItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Via2.setSelected(true);
        jCheckBoxC1541Via2.setText("VIA #2 ($1C00..$1C0F)");
        jCheckBoxC1541Via2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Via2ItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Kernal.setSelected(true);
        jCheckBoxC1541Kernal.setText("Kernal ($C000..$FFFF)");
        jCheckBoxC1541Kernal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541KernalItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Buffer0.setText("Buffer #0 ($300..$3FF)");
        jCheckBoxC1541Buffer0.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Buffer0ItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Buffer1.setText("Buffer #1 ($400..$4FF)");
        jCheckBoxC1541Buffer1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Buffer1ItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Buffer2.setText("Buffer #2 ($500..$5FF)");
        jCheckBoxC1541Buffer2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Buffer2ItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Buffer3.setText("Buffer #3 ($600..$6FF)");
        jCheckBoxC1541Buffer3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Buffer3ItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Buffer4.setText("Buffer #4 ($700..$7FF)");
        jCheckBoxC1541Buffer4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Buffer4ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelC1541CommLayout = new javax.swing.GroupLayout(jPanelC1541Comm);
        jPanelC1541Comm.setLayout(jPanelC1541CommLayout);
        jPanelC1541CommLayout.setHorizontalGroup(
            jPanelC1541CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelC1541CommLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelC1541CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCheckBoxC1541Buffer4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Buffer3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Buffer2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Buffer1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Buffer0, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Kernal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Via2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Via1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541_200Area, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541StackArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541ZeroPage, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE))
                .addGap(379, 379, 379))
        );
        jPanelC1541CommLayout.setVerticalGroup(
            jPanelC1541CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelC1541CommLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxC1541ZeroPage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541StackArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541_200Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Buffer0)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Buffer1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Buffer2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Buffer3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Buffer4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Via1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Via2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Kernal)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPaneComm.addTab("C1541", jPanelC1541Comm);

        javax.swing.GroupLayout jPanelC128CommLayout = new javax.swing.GroupLayout(jPanelC128Comm);
        jPanelC128Comm.setLayout(jPanelC128CommLayout);
        jPanelC128CommLayout.setHorizontalGroup(
            jPanelC128CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelC128CommLayout.setVerticalGroup(
            jPanelC128CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTabbedPaneComm.addTab("C128", jPanelC128Comm);

        jCheckBoxVic20StackArea.setSelected(true);
        jCheckBoxVic20StackArea.setText("Stack area ($100..$1FF)");
        jCheckBoxVic20StackArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20StackAreaItemStateChanged(evt);
            }
        });

        jCheckBoxVic20ZeroPage.setSelected(true);
        jCheckBoxVic20ZeroPage.setText("Zero page area ($00..$FF)");
        jCheckBoxVic20ZeroPage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20ZeroPageItemStateChanged(evt);
            }
        });

        jCheckBoxVic20_200Area.setSelected(true);
        jCheckBoxVic20_200Area.setText("Support area for BASIC/KERNAL part 1 ($200..$2FF)");
        jCheckBoxVic20_200Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20_200AreaItemStateChanged(evt);
            }
        });

        jCheckBoxVic20_300Area.setSelected(true);
        jCheckBoxVic20_300Area.setText("Support area for BASIC/KERNAL part 2 ($300..$3FF)");
        jCheckBoxVic20_300Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20_300AreaItemStateChanged(evt);
            }
        });

        jCheckBoxVic20_400Area.setSelected(true);
        jCheckBoxVic20_400Area.setText("Support area for BASIC/KERNAL part 3 ($400..$4FF)");
        jCheckBoxVic20_400Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20_400AreaItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Vic.setSelected(true);
        jCheckBoxVic20Vic.setText("VIC ($9000..$900F)");
        jCheckBoxVic20Vic.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20VicItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Via1.setSelected(true);
        jCheckBoxVic20Via1.setText("Via #1 ($9010..$901F)");
        jCheckBoxVic20Via1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20Via1ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Via2.setSelected(true);
        jCheckBoxVic20Via2.setText("Via #2 ($9020..$902F)");
        jCheckBoxVic20Via2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20Via2ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20UserBasic.setText("User BASIC area ($1000..$1DFF)");
        jCheckBoxVic20UserBasic.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20UserBasicItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Screen.setText("Screen memory ($1E00..$1FFF)");
        jCheckBoxVic20Screen.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20ScreenItemStateChanged(evt);
            }
        });

        jCheckBoxVic20_8kExp1.setText("8K expansion block 1 ($2000..$3FFF)");
        jCheckBoxVic20_8kExp1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20_8kExp1ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20_8kExp2.setText("8K expansion block 2 ($4000..$5FFF)");
        jCheckBoxVic20_8kExp2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20_8kExp2ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20_8kExp3.setText("8K expansion block 3 ($6000..$7FFF)");
        jCheckBoxVic20_8kExp3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20_8kExp3ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Character.setText("4K character ($8000..$8FFF)");
        jCheckBoxVic20Character.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20CharacterItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Color.setText("Color RAM ($9400..$97FF)");
        jCheckBoxVic20Color.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20ColorItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Block2.setText("I/O block 2 ($9800..$9BFF)");
        jCheckBoxVic20Block2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20Block2ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Block3.setText("I/O block 3 ($9C00..$9FFF)");
        jCheckBoxVic20Block3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20Block3ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Block4.setText("8K decoded ($A0000..$BFFF)");
        jCheckBoxVic20Block4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20Block4ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20BasicRom.setSelected(true);
        jCheckBoxVic20BasicRom.setText("BASIC ROM ($C0000..$DFFF)");
        jCheckBoxVic20BasicRom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20BasicRomItemStateChanged(evt);
            }
        });

        jCheckBoxVic20KernalRom.setSelected(true);
        jCheckBoxVic20KernalRom.setText("KERNAL ROM ($E0000..$FFFF)");
        jCheckBoxVic20KernalRom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20KernalRomItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelVic20CommLayout = new javax.swing.GroupLayout(jPanelVic20Comm);
        jPanelVic20Comm.setLayout(jPanelVic20CommLayout);
        jPanelVic20CommLayout.setHorizontalGroup(
            jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelVic20CommLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelVic20CommLayout.createSequentialGroup()
                        .addComponent(jCheckBoxVic20ZeroPage, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxVic20Block2, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelVic20CommLayout.createSequentialGroup()
                        .addGroup(jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jCheckBoxVic20StackArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxVic20Color, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxVic20Via2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxVic20Via1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxVic20Vic, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxVic20Character, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxVic20_8kExp3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxVic20_8kExp2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxVic20_8kExp1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxVic20Screen, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxVic20UserBasic, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxVic20_400Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxVic20_300Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxVic20_200Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxVic20Block3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxVic20Block4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxVic20BasicRom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxVic20KernalRom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelVic20CommLayout.setVerticalGroup(
            jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelVic20CommLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxVic20ZeroPage)
                    .addComponent(jCheckBoxVic20Block2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxVic20StackArea)
                    .addComponent(jCheckBoxVic20Block3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxVic20_200Area)
                    .addComponent(jCheckBoxVic20Block4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxVic20_300Area)
                    .addComponent(jCheckBoxVic20BasicRom, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxVic20_400Area)
                    .addComponent(jCheckBoxVic20KernalRom, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20UserBasic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Screen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20_8kExp1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20_8kExp2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20_8kExp3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Character)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Vic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Via1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Via2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Color)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPaneComm.addTab("Vic20", jPanelVic20Comm);

        jCheckBoxPlus4ZeroPage.setSelected(true);
        jCheckBoxPlus4ZeroPage.setText("Zero page area ($00..$FF)");
        jCheckBoxPlus4ZeroPage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4ZeroPageItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4StackArea.setSelected(true);
        jCheckBoxPlus4StackArea.setText("Stack area ($100..$1FF)");
        jCheckBoxPlus4StackArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4StackAreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_200Area.setSelected(true);
        jCheckBoxPlus4_200Area.setText("Support area for BASIC/KERNAL part 1 ($200..$2FF)");
        jCheckBoxPlus4_200Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_200AreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_300Area.setSelected(true);
        jCheckBoxPlus4_300Area.setText("Support area for BASIC/KERNAL part 2 ($300..$3FF)");
        jCheckBoxPlus4_300Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_300AreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_400Area.setSelected(true);
        jCheckBoxPlus4_400Area.setText("Support area for BASIC/KERNAL part 3 ($400..$4FF)");
        jCheckBoxPlus4_400Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_400AreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_500Area.setSelected(true);
        jCheckBoxPlus4_500Area.setText("Support area for BASIC/KERNAL part 4 ($500..$5FF)");
        jCheckBoxPlus4_500Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_500AreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_600Area.setSelected(true);
        jCheckBoxPlus4_600Area.setText("Support area for BASIC/KERNAL part 5 ($600..$6FF)");
        jCheckBoxPlus4_600Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_600AreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_700Area.setSelected(true);
        jCheckBoxPlus4_700Area.setText("Support area for BASIC/KERNAL part 6 ($700..$7FF)");
        jCheckBoxPlus4_700Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_700AreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4ColorArea.setText("Color memory ($800..$BFF)");
        jCheckBoxPlus4ColorArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4ColorAreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4VideoArea.setText("Video memory ($C00..$CFF)");
        jCheckBoxPlus4VideoArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4VideoAreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4BasicRamP.setText("BASIC RAM without graphics ($1000..$17FF)");
        jCheckBoxPlus4BasicRamP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4BasicRamPItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4Luminance.setText("Luminance ($1800..$1BFF)");
        jCheckBoxPlus4Luminance.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4LuminanceItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4ColorBitmap.setText("Color for bitmap($1C00..$1FFF)");
        jCheckBoxPlus4ColorBitmap.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4ColorBitmapItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4GraphicData.setText("Graphics data ($2000..$3FFF)");
        jCheckBoxPlus4GraphicData.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4GraphicDataItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4BasicRamN.setText("BASIC RAM with graphics ($4000..$7FFF)");
        jCheckBoxPlus4BasicRamN.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4BasicRamNItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4BasicRom.setText("BASIC ROM ($8000..$BFFF)");
        jCheckBoxPlus4BasicRom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4BasicRomItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4BasicExt.setText("BASIC Expansion ($C000..$CFFF)");
        jCheckBoxPlus4BasicExt.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4BasicExtItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4Caracter.setText("Caracter table ($D000..$DFFF)");
        jCheckBoxPlus4Caracter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4CaracterItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4Acia.setSelected(true);
        jCheckBoxPlus4Acia.setText("6551 ACIA ($FD00..$FD0F)");
        jCheckBoxPlus4Acia.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4AciaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_6529B_1.setSelected(true);
        jCheckBoxPlus4_6529B_1.setText("6529B #1 ($FD10..$FD1F)");
        jCheckBoxPlus4_6529B_1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_6529B_1ItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_6529B_2.setSelected(true);
        jCheckBoxPlus4_6529B_2.setText("6529B #2 ($FD30..$FD3F)");
        jCheckBoxPlus4_6529B_2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_6529B_2ItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4Ted.setSelected(true);
        jCheckBoxPlus4Ted.setText("TED ($FF00..$FF1F)");
        jCheckBoxPlus4Ted.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4TedItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4Kernal.setSelected(true);
        jCheckBoxPlus4Kernal.setText("Kernal ($FF20..$FFFF)");
        jCheckBoxPlus4Kernal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4KernalItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelPlus4CommLayout = new javax.swing.GroupLayout(jPanelPlus4Comm);
        jPanelPlus4Comm.setLayout(jPanelPlus4CommLayout);
        jPanelPlus4CommLayout.setHorizontalGroup(
            jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
                        .addComponent(jCheckBoxPlus4_200Area, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(382, 382, 382))
                    .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
                        .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
                                .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jCheckBoxPlus4_400Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCheckBoxPlus4_500Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBoxPlus4_6529B_1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBoxPlus4_6529B_2, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
                                .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jCheckBoxPlus4_600Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCheckBoxPlus4_700Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBoxPlus4Ted, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBoxPlus4Kernal, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jCheckBoxPlus4ColorArea, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4VideoArea, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4BasicRamP, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4Luminance, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4ColorBitmap, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4GraphicData, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4BasicRamN, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
                                .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jCheckBoxPlus4ZeroPage, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                                        .addComponent(jCheckBoxPlus4StackArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jCheckBoxPlus4_300Area, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBoxPlus4Acia, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBoxPlus4BasicRom, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBoxPlus4BasicExt, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCheckBoxPlus4Caracter, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelPlus4CommLayout.setVerticalGroup(
            jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxPlus4ZeroPage)
                    .addComponent(jCheckBoxPlus4BasicRom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxPlus4StackArea)
                    .addComponent(jCheckBoxPlus4BasicExt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxPlus4_200Area)
                    .addComponent(jCheckBoxPlus4Caracter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxPlus4_300Area)
                    .addComponent(jCheckBoxPlus4Acia))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxPlus4_400Area)
                    .addComponent(jCheckBoxPlus4_6529B_1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxPlus4_500Area)
                    .addComponent(jCheckBoxPlus4_6529B_2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxPlus4_600Area)
                    .addComponent(jCheckBoxPlus4Ted))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxPlus4_700Area)
                    .addComponent(jCheckBoxPlus4Kernal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4ColorArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4VideoArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4BasicRamP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4Luminance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4ColorBitmap)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4GraphicData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4BasicRamN)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPaneComm.addTab("Plus4", jPanelPlus4Comm);

        javax.swing.GroupLayout jPanelCommentLayout = new javax.swing.GroupLayout(jPanelComment);
        jPanelComment.setLayout(jPanelCommentLayout);
        jPanelCommentLayout.setHorizontalGroup(
            jPanelCommentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCommentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCommentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCommentLayout.createSequentialGroup()
                        .addComponent(jLabelautocomment, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTabbedPaneComm, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanelCommentLayout.setVerticalGroup(
            jPanelCommentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCommentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelautocomment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPaneComm)
                .addContainerGap())
        );

        jTabbedPaneOption.addTab("Comments", jPanelComment);

        jLabelautocomment1.setText("Apply the output assembler syntax of:");

        jComboBoxAssembler.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dasm", "TMPx", "CA65", "ACME", "KickAssembler" }));

        jCheckBoxDasmF3Comp.setText("Make source compatible with -f3 option");
        jCheckBoxDasmF3Comp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxDasmF3CompActionPerformed(evt);
            }
        });

        jLabelDasmByteDeclaration.setText("Byte declaration:");

        buttonGroupDasmByte.add(jRadioButtonDasmDotByte);
        jRadioButtonDasmDotByte.setSelected(true);

        buttonGroupDasmByte.add(jRadioButtonDasmByte);

        buttonGroupDasmByte.add(jRadioButtonDasmDcByte);

        jLabelDasmLabelDeclaration.setText("Label declaration:");

        buttonGroupDasmLabel.add(jRadioButtonDasmLabelName);

        buttonGroupDasmLabel.add(jRadioButtonDasmLabelNameColon);
        jRadioButtonDasmLabelNameColon.setSelected(true);

        buttonGroupDasmByte.add(jRadioButtonDasmDcBByte);

        jLabelDasmByteDeclaration1.setText("Word declaration:");

        buttonGroupDasmWord.add(jRadioButtonDasmDotWord);
        jRadioButtonDasmDotWord.setSelected(true);

        buttonGroupDasmWord.add(jRadioButtonDasmWord);

        buttonGroupDasmWord.add(jRadioButtonDasmDcWWord);

        jScrollPaneDasmDotByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDotByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDotByte.setEditable(false);
        jTextPaneDasmDotByte.setContentType("text/html"); // NOI18N
        jTextPaneDasmDotByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .byte</b> <font color='red'>$xx</font><br>\n     <b> .byte</b> <font color='blue'>dd</font><br>\n     <b> .byte</b> <font color='green'>%bb</font><br>\n     <b> .byte</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDotByte.setViewportView(jTextPaneDasmDotByte);
        jTextPaneDasmDotByte.getAccessibleContext().setAccessibleName("");

        jScrollPaneDasmByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmByte.setEditable(false);
        jTextPaneDasmByte.setContentType("text/html"); // NOI18N
        jTextPaneDasmByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> byte</b> <font color='red'>$xx</font><br>\n     <b> byte</b> <font color='blue'>dd</font><br>\n     <b> byte</b> <font color='green'>%bb</font><br>\n     <b> byte</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmByte.setViewportView(jTextPaneDasmByte);

        jScrollPaneDasmDcByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDcByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDcByte.setEditable(false);
        jTextPaneDasmDcByte.setContentType("text/html"); // NOI18N
        jTextPaneDasmDcByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> dc</b> <font color='red'>$xx</font><br>\n     <b> dc</b> <font color='blue'>dd</font><br>\n     <b> dc</b> <font color='green'>%bb</font><br>\n     <b> dc</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDcByte.setViewportView(jTextPaneDasmDcByte);

        jScrollPaneDasmDCBByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDCBByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDcBByte.setEditable(false);
        jTextPaneDasmDcBByte.setContentType("text/html"); // NOI18N
        jTextPaneDasmDcBByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> dc.b</b> <font color='red'>$xx</font><br>\n     <b> dc.b</b> <font color='blue'>dd</font><br>\n     <b> dc.b</b> <font color='green'>%bb</font><br>\n     <b> dc.b</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDCBByte.setViewportView(jTextPaneDasmDcBByte);

        jScrollPaneDasmDotWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDotWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDotWord.setEditable(false);
        jTextPaneDasmDotWord.setContentType("text/html"); // NOI18N
        jTextPaneDasmDotWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .word</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDotWord.setViewportView(jTextPaneDasmDotWord);

        jScrollPaneDasmWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmWord.setEditable(false);
        jTextPaneDasmWord.setContentType("text/html"); // NOI18N
        jTextPaneDasmWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> word</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmWord.setViewportView(jTextPaneDasmWord);

        jScrollPaneDasmDcWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDcWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDcWord.setEditable(false);
        jTextPaneDasmDcWord.setContentType("text/html"); // NOI18N
        jTextPaneDasmDcWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> dc.w</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDcWord.setViewportView(jTextPaneDasmDcWord);

        jScrollPaneDasmLabelName.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmLabelName.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmLabelName.setEditable(false);
        jTextPaneDasmLabelName.setContentType("text/html"); // NOI18N
        jTextPaneDasmLabelName.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <font color='black'>zzzz</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmLabelName.setViewportView(jTextPaneDasmLabelName);

        jScrollPaneDasmLabelNameColon.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmLabelNameColon.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmLabelNameColon.setEditable(false);
        jTextPaneDasmLabelNameColon.setContentType("text/html"); // NOI18N
        jTextPaneDasmLabelNameColon.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <font color='black'>zzzz</font><b>:</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmLabelNameColon.setViewportView(jTextPaneDasmLabelNameColon);

        javax.swing.GroupLayout jPanelDasmLayout = new javax.swing.GroupLayout(jPanelDasm);
        jPanelDasm.setLayout(jPanelDasmLayout);
        jPanelDasmLayout.setHorizontalGroup(
            jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDasmLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxDasmF3Comp, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelDasmLayout.createSequentialGroup()
                        .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelDasmLabelDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                            .addComponent(jLabelDasmByteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelDasmLayout.createSequentialGroup()
                                .addComponent(jRadioButtonDasmLabelName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPaneDasmLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButtonDasmLabelNameColon)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPaneDasmLabelNameColon, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelDasmLayout.createSequentialGroup()
                                .addComponent(jRadioButtonDasmDotByte)
                                .addGap(3, 3, 3)
                                .addComponent(jScrollPaneDasmDotByte, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)
                                .addComponent(jRadioButtonDasmByte)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPaneDasmByte, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButtonDasmDcByte)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPaneDasmDcByte, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButtonDasmDcBByte)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPaneDasmDCBByte, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanelDasmLayout.createSequentialGroup()
                        .addComponent(jLabelDasmByteDeclaration1)
                        .addGap(20, 20, 20)
                        .addComponent(jRadioButtonDasmDotWord)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneDasmDotWord, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButtonDasmWord)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneDasmWord, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButtonDasmDcWWord)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneDasmDcWord, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(106, Short.MAX_VALUE))
        );
        jPanelDasmLayout.setVerticalGroup(
            jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDasmLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxDasmF3Comp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonDasmLabelName)
                    .addComponent(jRadioButtonDasmLabelNameColon)
                    .addComponent(jLabelDasmLabelDeclaration)
                    .addComponent(jScrollPaneDasmLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPaneDasmLabelNameColon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonDasmByte)
                            .addComponent(jRadioButtonDasmDcByte))
                        .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelDasmByteDeclaration)
                            .addComponent(jRadioButtonDasmDotByte)))
                    .addComponent(jRadioButtonDasmDcBByte)
                    .addComponent(jScrollPaneDasmDcByte)
                    .addComponent(jScrollPaneDasmByte)
                    .addComponent(jScrollPaneDasmDotByte)
                    .addComponent(jScrollPaneDasmDCBByte))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneDasmDcWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmDotWord)
                    .addComponent(jLabelDasmByteDeclaration1)
                    .addComponent(jRadioButtonDasmWord)
                    .addComponent(jRadioButtonDasmDcWWord)
                    .addComponent(jScrollPaneDasmDotWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPaneDasmWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(194, Short.MAX_VALUE))
        );

        jTabbedPaneAssembler.addTab("Dasm", jPanelDasm);

        jLabelTmpxLabelDeclaration.setText("Label declaration:");

        buttonGroupTmpxLabel.add(jRadioButtonTmpxLabelName);
        jRadioButtonTmpxLabelName.setSelected(true);

        jScrollPaneTmpxByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxLabelName.setEditable(false);
        jTextPaneTmpxLabelName.setContentType("text/html"); // NOI18N
        jTextPaneTmpxLabelName.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <font color='black'>zzzz</font>\n    </p\n  </body>\n</html>\n");
        jScrollPaneTmpxByte.setViewportView(jTextPaneTmpxLabelName);

        jLabelTmpxByteDeclaration.setText("Byte declaration:");

        buttonGroupTmpxByte.add(jRadioButtonTmpxDotByte);

        jScrollPaneTmpxWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxDotByte.setEditable(false);
        jTextPaneTmpxDotByte.setContentType("text/html"); // NOI18N
        jTextPaneTmpxDotByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .byte</b> <font color='red'>$xx</font><br>\n     <b> .byte</b> <font color='blue'>dd</font><br>\n     <b> .byte</b> <font color='green'>%bb</font><br>\n     <b> .byte</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxWord.setViewportView(jTextPaneTmpxDotByte);

        jLabelTmpxWordDeclaration.setText("Word declaration:");

        buttonGroupTmpxWord.add(jRadioButtonTmpxDotWord);

        jScrollPaneTmpxDotWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxDotWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxDotWord.setEditable(false);
        jTextPaneTmpxDotWord.setContentType("text/html"); // NOI18N
        jTextPaneTmpxDotWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .word</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxDotWord.setViewportView(jTextPaneTmpxDotWord);

        javax.swing.GroupLayout jPanelTMPxLayout = new javax.swing.GroupLayout(jPanelTMPx);
        jPanelTMPx.setLayout(jPanelTMPxLayout);
        jPanelTMPxLayout.setHorizontalGroup(
            jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTMPxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelTMPxLayout.createSequentialGroup()
                        .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelTmpxLabelDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                            .addComponent(jLabelTmpxByteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelTMPxLayout.createSequentialGroup()
                                .addComponent(jRadioButtonTmpxLabelName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPaneTmpxByte, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelTMPxLayout.createSequentialGroup()
                                .addComponent(jRadioButtonTmpxDotByte)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPaneTmpxDotWord, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPaneTmpxWord, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(515, Short.MAX_VALUE))
                    .addGroup(jPanelTMPxLayout.createSequentialGroup()
                        .addComponent(jLabelTmpxWordDeclaration)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonTmpxDotWord)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanelTMPxLayout.setVerticalGroup(
            jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTMPxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonTmpxLabelName)
                    .addComponent(jLabelTmpxLabelDeclaration)
                    .addComponent(jScrollPaneTmpxByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelTmpxByteDeclaration)
                    .addComponent(jRadioButtonTmpxDotByte)
                    .addComponent(jScrollPaneTmpxWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonTmpxDotWord)
                    .addComponent(jLabelTmpxWordDeclaration)
                    .addComponent(jScrollPaneTmpxDotWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(215, Short.MAX_VALUE))
        );

        jTabbedPaneAssembler.addTab("TMPx", jPanelTMPx);

        jLabelCa65LabelDeclaration.setText("Label declaration:");

        buttonGroupCa65Label.add(jRadioButtonCa65LabelName);

        jScrollPaneCa65LabelName.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65LabelName.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65LabelName.setEditable(false);
        jTextPaneCa65LabelName.setContentType("text/html"); // NOI18N
        jTextPaneCa65LabelName.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <font color='black'>zzzz</font><b>:</b>\n    </p\n  </body>\n</html>\n");
        jScrollPaneCa65LabelName.setViewportView(jTextPaneCa65LabelName);

        jLabelC65ByteDeclaration.setText("Byte declaration:");

        buttonGroupCa65Byte.add(jRadioButtonC65DotByte);

        jScrollPaneC65DotByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneC65DotByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65DotByte.setEditable(false);
        jTextPaneCa65DotByte.setContentType("text/html"); // NOI18N
        jTextPaneCa65DotByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .byte</b> <font color='red'>$xx</font><br>\n     <b> .byte</b> <font color='blue'>dd</font><br>\n     <b> .byte</b> <font color='green'>%bb</font><br>\n     <b> .byte</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneC65DotByte.setViewportView(jTextPaneCa65DotByte);

        buttonGroupCa65Byte.add(jRadioButtonC65Byte);

        jScrollPaneC65BytByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneC65BytByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneC65BytByte.setEditable(false);
        jTextPaneC65BytByte.setContentType("text/html"); // NOI18N
        jTextPaneC65BytByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .byt</b> <font color='red'>$xx</font><br>\n     <b> .byt</b> <font color='blue'>dd</font><br>\n     <b> .byt</b> <font color='green'>%bb</font><br>\n     <b> .byt</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneC65BytByte.setViewportView(jTextPaneC65BytByte);

        jLabelC65WordDeclaration.setText("Word declaration:");

        buttonGroupC65Word.add(jRadioButtonC65DotWord);
        jRadioButtonC65DotWord.setSelected(true);

        jScrollPaneCa65DotWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65DotWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneC65DotWord.setEditable(false);
        jTextPaneC65DotWord.setContentType("text/html"); // NOI18N
        jTextPaneC65DotWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .word</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneCa65DotWord.setViewportView(jTextPaneC65DotWord);

        jScrollPaneC65Word.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneC65Word.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneC65Word.setEditable(false);
        jTextPaneC65Word.setContentType("text/html"); // NOI18N
        jTextPaneC65Word.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .dbyte</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneC65Word.setViewportView(jTextPaneC65Word);

        buttonGroupC65Word.add(jRadioButtonC65Word);

        javax.swing.GroupLayout jPanelCa65Layout = new javax.swing.GroupLayout(jPanelCa65);
        jPanelCa65.setLayout(jPanelCa65Layout);
        jPanelCa65Layout.setHorizontalGroup(
            jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCa65Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCa65Layout.createSequentialGroup()
                        .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelCa65LabelDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelC65ByteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelCa65Layout.createSequentialGroup()
                                .addComponent(jRadioButtonCa65LabelName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPaneCa65LabelName, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelCa65Layout.createSequentialGroup()
                                .addComponent(jRadioButtonC65DotByte)
                                .addGap(3, 3, 3)
                                .addComponent(jScrollPaneC65DotByte, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)
                                .addComponent(jRadioButtonC65Byte)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPaneC65BytByte, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(384, Short.MAX_VALUE))
                    .addGroup(jPanelCa65Layout.createSequentialGroup()
                        .addComponent(jLabelC65WordDeclaration)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonC65DotWord)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneCa65DotWord, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButtonC65Word)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneC65Word, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanelCa65Layout.setVerticalGroup(
            jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCa65Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonCa65LabelName)
                    .addComponent(jLabelCa65LabelDeclaration)
                    .addComponent(jScrollPaneCa65LabelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jRadioButtonC65Byte)
                        .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelC65ByteDeclaration)
                            .addComponent(jRadioButtonC65DotByte)))
                    .addComponent(jScrollPaneC65DotByte)
                    .addComponent(jScrollPaneC65BytByte))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonC65DotWord)
                    .addComponent(jLabelC65WordDeclaration)
                    .addComponent(jRadioButtonC65Word)
                    .addComponent(jScrollPaneCa65DotWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPaneC65Word, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(215, Short.MAX_VALUE))
        );

        jTabbedPaneAssembler.addTab("CA65", jPanelCa65);

        jLabelAcmeLabelDeclaration.setText("Label declaration:");

        buttonGroupAcmeLabel.add(jRadioButtonAcmeLabelName);

        jScrollPaneAcmeLabelName.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeLabelName.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeLabelName.setEditable(false);
        jTextPaneAcmeLabelName.setContentType("text/html"); // NOI18N
        jTextPaneAcmeLabelName.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <font color='black'>zzzz</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeLabelName.setViewportView(jTextPaneAcmeLabelName);

        buttonGroupAcmeLabel.add(jRadioButtonAcmeLabelNameColon);
        jRadioButtonAcmeLabelNameColon.setSelected(true);

        jScrollPaneAcmeLabelNameColon.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeLabelNameColon.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeLabelNameColon.setEditable(false);
        jTextPaneAcmeLabelNameColon.setContentType("text/html"); // NOI18N
        jTextPaneAcmeLabelNameColon.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <font color='black'>zzzz</font><b>:</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeLabelNameColon.setViewportView(jTextPaneAcmeLabelNameColon);

        jLabelAcmeByteDeclaration.setText("Byte declaration:");

        buttonGroupAcmeByte.add(jRadioButtonAcmeMarkByte);

        jScrollPaneAcmeMarkByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMarkByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMarkByte.setEditable(false);
        jTextPaneAcmeMarkByte.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMarkByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> !byte</b> <font color='red'>$xx</font><br>\n     <b> !byte</b> <font color='blue'>dd</font><br>\n     <b> !byte</b> <font color='green'>%bb</font><br>\n     <b> !byte</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMarkByte.setViewportView(jTextPaneAcmeMarkByte);

        buttonGroupAcmeByte.add(jRadioButtonAcmeMark8Byte);

        jScrollPaneAcmeMark8Byte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMark8Byte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMark8Byte.setEditable(false);
        jTextPaneAcmeMark8Byte.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMark8Byte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b> !8</b> <font color='red'>$xx</font><br>\n     <b> !8</b> <font color='blue'>dd</font><br>\n     <b> !8</b> <font color='green'>%bb</font><br>\n     <b> !8</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMark8Byte.setViewportView(jTextPaneAcmeMark8Byte);

        jLabelAcmeWordByteDeclaration.setText("Word declaration:");

        buttonGroupAcmeWord.add(jRadioButtonAcmeMarkWord);
        jRadioButtonAcmeMarkWord.setSelected(true);

        jScrollPaneAcmeMarkByte1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMarkByte1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMarkWork.setEditable(false);
        jTextPaneAcmeMarkWork.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMarkWork.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> !word</b> <font color='red'>$xxyy</font><br>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMarkByte1.setViewportView(jTextPaneAcmeMarkWork);

        buttonGroupAcmeWord.add(jRadioButtonAcmeMark16Work);

        jScrollPaneAcmeMark8Byte1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMark8Byte1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMark16Work.setEditable(false);
        jTextPaneAcmeMark16Work.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMark16Work.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b> !16</b> <font color='red'>$xxyy</font><br>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMark8Byte1.setViewportView(jTextPaneAcmeMark16Work);

        javax.swing.GroupLayout jPanelAcmeLayout = new javax.swing.GroupLayout(jPanelAcme);
        jPanelAcme.setLayout(jPanelAcmeLayout);
        jPanelAcmeLayout.setHorizontalGroup(
            jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAcmeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAcmeLayout.createSequentialGroup()
                        .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelAcmeLabelDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                            .addComponent(jLabelAcmeByteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelAcmeLayout.createSequentialGroup()
                                .addComponent(jRadioButtonAcmeLabelName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPaneAcmeLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButtonAcmeLabelNameColon)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPaneAcmeLabelNameColon, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelAcmeLayout.createSequentialGroup()
                                .addComponent(jRadioButtonAcmeMarkByte)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPaneAcmeMarkByte, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButtonAcmeMark8Byte)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPaneAcmeMark8Byte, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanelAcmeLayout.createSequentialGroup()
                        .addComponent(jLabelAcmeWordByteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonAcmeMarkWord)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneAcmeMarkByte1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButtonAcmeMark16Work)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneAcmeMark8Byte1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(381, Short.MAX_VALUE))
        );
        jPanelAcmeLayout.setVerticalGroup(
            jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAcmeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonAcmeLabelName)
                    .addComponent(jRadioButtonAcmeLabelNameColon)
                    .addComponent(jLabelAcmeLabelDeclaration)
                    .addComponent(jScrollPaneAcmeLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPaneAcmeLabelNameColon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jRadioButtonAcmeMark8Byte)
                        .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelAcmeByteDeclaration)
                            .addComponent(jRadioButtonAcmeMarkByte)))
                    .addComponent(jScrollPaneAcmeMarkByte)
                    .addComponent(jScrollPaneAcmeMark8Byte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jRadioButtonAcmeMark16Work)
                        .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelAcmeWordByteDeclaration)
                            .addComponent(jRadioButtonAcmeMarkWord)))
                    .addComponent(jScrollPaneAcmeMark8Byte1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPaneAcmeMarkByte1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(215, Short.MAX_VALUE))
        );

        jTabbedPaneAssembler.addTab("ACME", jPanelAcme);

        jLabelKickLabelDeclaration.setText("Label declaration:");

        buttonGroupCa65Label.add(jRadioButtonKickLabelName);
        jRadioButtonKickLabelName.setSelected(true);

        jScrollPaneKickLabelName.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickLabelName.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickCa65LabelName.setEditable(false);
        jTextPaneKickCa65LabelName.setContentType("text/html"); // NOI18N
        jTextPaneKickCa65LabelName.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <font color='black'>zzzz</font><b>:</b>\n    </p\n  </body>\n</html>\n");
        jScrollPaneKickLabelName.setViewportView(jTextPaneKickCa65LabelName);

        jLabelKickByteDeclaration.setText("Byte declaration:");

        buttonGroupTmpxByte.add(jRadioButtonKickDotByte);
        jRadioButtonKickDotByte.setSelected(true);

        jScrollPaneKickWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotByte.setEditable(false);
        jTextPaneKickDotByte.setContentType("text/html"); // NOI18N
        jTextPaneKickDotByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .byte</b> <font color='red'>$xx</font><br>\n     <b> .byte</b> <font color='blue'>dd</font><br>\n     <b> .byte</b> <font color='green'>%bb</font><br>\n     <b> .byte</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickWord.setViewportView(jTextPaneKickDotByte);

        jLabelKickWordDeclaration.setText("Word declaration:");

        buttonGroupTmpxWord.add(jRadioButtonKickDotWord);
        jRadioButtonKickDotWord.setSelected(true);

        jScrollPaneTmpxDotWord1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxDotWord1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotWord.setEditable(false);
        jTextPaneKickDotWord.setContentType("text/html"); // NOI18N
        jTextPaneKickDotWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .word</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxDotWord1.setViewportView(jTextPaneKickDotWord);

        javax.swing.GroupLayout jPanelKickAssemblerLayout = new javax.swing.GroupLayout(jPanelKickAssembler);
        jPanelKickAssembler.setLayout(jPanelKickAssemblerLayout);
        jPanelKickAssemblerLayout.setHorizontalGroup(
            jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelKickByteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelKickLabelDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                                .addComponent(jRadioButtonKickDotByte)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPaneKickWord, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                                .addComponent(jRadioButtonKickLabelName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPaneKickLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(613, 613, 613))
                    .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                        .addComponent(jLabelKickWordDeclaration)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonKickDotWord)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneTmpxDotWord1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanelKickAssemblerLayout.setVerticalGroup(
            jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelKickLabelDeclaration)
                    .addComponent(jScrollPaneKickLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickLabelName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelKickByteDeclaration)
                    .addComponent(jRadioButtonKickDotByte)
                    .addComponent(jScrollPaneKickWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonKickDotWord)
                    .addComponent(jLabelKickWordDeclaration)
                    .addComponent(jScrollPaneTmpxDotWord1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(215, Short.MAX_VALUE))
        );

        jTabbedPaneAssembler.addTab("KickAssembler", jPanelKickAssembler);

        javax.swing.GroupLayout jPanelDisassemblerLayout = new javax.swing.GroupLayout(jPanelDisassembler);
        jPanelDisassembler.setLayout(jPanelDisassemblerLayout);
        jPanelDisassemblerLayout.setHorizontalGroup(
            jPanelDisassemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDisassemblerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDisassemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPaneAssembler)
                    .addGroup(jPanelDisassemblerLayout.createSequentialGroup()
                        .addComponent(jLabelautocomment1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxAssembler, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelDisassemblerLayout.setVerticalGroup(
            jPanelDisassemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDisassemblerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDisassemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelautocomment1)
                    .addComponent(jComboBoxAssembler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPaneAssembler)
                .addContainerGap())
        );

        jTabbedPaneOption.addTab("Disassembler", jPanelDisassembler);

        buttonGroupLook.add(jRadioButtonLookJava);
        jRadioButtonLookJava.setText("Java");
        jRadioButtonLookJava.setEnabled(false);
        jRadioButtonLookJava.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookJavaItemStateChanged(evt);
            }
        });

        buttonGroupLook.add(jRadioButtonLookMac);
        jRadioButtonLookMac.setText("Machintosh");
        jRadioButtonLookMac.setEnabled(false);
        jRadioButtonLookMac.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookMacItemStateChanged(evt);
            }
        });

        buttonGroupLook.add(jRadioButtonLookMetal);
        jRadioButtonLookMetal.setText("Metal");
        jRadioButtonLookMetal.setEnabled(false);
        jRadioButtonLookMetal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookMetalItemStateChanged(evt);
            }
        });

        buttonGroupLook.add(jRadioButtonLookWin);
        jRadioButtonLookWin.setText("Windows style");
        jRadioButtonLookWin.setEnabled(false);
        jRadioButtonLookWin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookWinItemStateChanged(evt);
            }
        });

        buttonGroupLook.add(jRadioButtonLookGtk);
        jRadioButtonLookGtk.setText("GTK style");
        jRadioButtonLookGtk.setEnabled(false);
        jRadioButtonLookGtk.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookGtkItemStateChanged(evt);
            }
        });

        buttonGroupLook.add(jRadioButtonLookNimbus);
        jRadioButtonLookNimbus.setText("Nimbus");
        jRadioButtonLookNimbus.setEnabled(false);
        jRadioButtonLookNimbus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookNimbusItemStateChanged(evt);
            }
        });

        jLabelLook.setText("Look & Feel:");

        jLabelTheme.setText("Theme:");

        buttonGroupTheme.add(jRadioButtonOcean);
        jRadioButtonOcean.setText("Ocean");
        jRadioButtonOcean.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonOceanItemStateChanged(evt);
            }
        });

        buttonGroupTheme.add(jRadioButtonSteel);
        jRadioButtonSteel.setText("Steel");
        jRadioButtonSteel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonSteelItemStateChanged(evt);
            }
        });

        buttonGroupTheme.add(jRadioButtonAqua);
        jRadioButtonAqua.setText("Aqua");
        jRadioButtonAqua.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAquaItemStateChanged(evt);
            }
        });

        buttonGroupTheme.add(jRadioButtonCharcoal);
        jRadioButtonCharcoal.setText("Charcoal");
        jRadioButtonCharcoal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCharcoalItemStateChanged(evt);
            }
        });

        buttonGroupTheme.add(jRadioButtonHighContrast);
        jRadioButtonHighContrast.setText("High Contrast");
        jRadioButtonHighContrast.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonHighContrastItemStateChanged(evt);
            }
        });

        buttonGroupTheme.add(jRadioButtonEmerald);
        jRadioButtonEmerald.setText("Emerald");
        jRadioButtonEmerald.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonEmeraldItemStateChanged(evt);
            }
        });

        buttonGroupTheme.add(jRadioButtonRuby);
        jRadioButtonRuby.setText("Ruby");
        jRadioButtonRuby.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonRubyItemStateChanged(evt);
            }
        });

        buttonGroupLook.add(jRadioButtonLookCWin);
        jRadioButtonLookCWin.setText("Windows classic style");
        jRadioButtonLookCWin.setEnabled(false);
        jRadioButtonLookCWin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookCWinItemStateChanged(evt);
            }
        });

        jLabelBracket.setFont(new java.awt.Font("Tahoma", 0, 64)); // NOI18N
        jLabelBracket.setText("{");

        buttonGroupLook.add(jRadioButtonLookSynth);
        jRadioButtonLookSynth.setText("Synth based");
        jRadioButtonLookSynth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookSynthItemStateChanged(evt);
            }
        });

        jLabelArrow.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabelArrow.setText("----------------->");

        jListLaf.setModel(listModel);
        jListLaf.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListLaf.setEnabled(false);
        jListLaf.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListLafValueChanged(evt);
            }
        });
        jScrollPaneList.setViewportView(jListLaf);

        jLabelFlatLaf.setText("Flat laf look & feel:");

        javax.swing.GroupLayout jPanelLookLayout = new javax.swing.GroupLayout(jPanelLook);
        jPanelLook.setLayout(jPanelLookLayout);
        jPanelLookLayout.setHorizontalGroup(
            jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLookLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelLookLayout.createSequentialGroup()
                        .addComponent(jRadioButtonLookCWin, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelBracket)
                        .addGap(13, 13, 13)
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelTheme, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonOcean, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonSteel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonCharcoal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonAqua, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonHighContrast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonEmerald, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonRuby, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelLookLayout.createSequentialGroup()
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jRadioButtonLookSynth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelLook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonLookJava, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonLookMac, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonLookMetal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonLookWin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                            .addComponent(jRadioButtonLookNimbus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonLookGtk, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelArrow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPaneList, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabelFlatLaf, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE))
                .addContainerGap(252, Short.MAX_VALUE))
        );
        jPanelLookLayout.setVerticalGroup(
            jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLookLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLookLayout.createSequentialGroup()
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelTheme)
                            .addComponent(jLabelFlatLaf))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelLookLayout.createSequentialGroup()
                                .addComponent(jRadioButtonOcean)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonSteel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonAqua)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonCharcoal)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPaneList)))
                    .addGroup(jPanelLookLayout.createSequentialGroup()
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanelLookLayout.createSequentialGroup()
                                .addComponent(jLabelLook)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButtonLookJava)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonLookMac)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonLookMetal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonLookWin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jRadioButtonLookCWin)
                                    .addComponent(jRadioButtonHighContrast)))
                            .addComponent(jLabelBracket, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButtonLookGtk)
                            .addComponent(jRadioButtonEmerald))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButtonLookNimbus)
                            .addComponent(jRadioButtonRuby))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonLookSynth))
                        .addContainerGap(205, Short.MAX_VALUE))))
        );

        jTabbedPaneOption.addTab("Look & Feel", jPanelLook);

        jPanelOption.add(jTabbedPaneOption, java.awt.BorderLayout.CENTER);

        jButtonLoad.setText("Load");
        jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadActionPerformed(evt);
            }
        });
        jPanelDn.add(jButtonLoad);

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        jPanelDn.add(jButtonSave);

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });
        jPanelDn.add(jButtonClose);

        jPanelOption.add(jPanelDn, java.awt.BorderLayout.SOUTH);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanelOption, javax.swing.GroupLayout.PREFERRED_SIZE, 817, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanelOption, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed
      if(!FileManager.instance.readOptionFile(FileManager.OPTION_FILE, option)) {
        JOptionPane.showMessageDialog(this, "Error reading the option file", "Loading error", JOptionPane.ERROR_MESSAGE);
      } else applyOption();
    }//GEN-LAST:event_jButtonLoadActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
       if (!FileManager.instance.writeOptionFile(FileManager.OPTION_FILE, option)) {
        JOptionPane.showMessageDialog(this, "Error writing the option file", "Saving error", JOptionPane.ERROR_MESSAGE);
      } else JOptionPane.showMessageDialog(this, "Saving done", "Saving result", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
      setVisible(false);
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void jCheckBoxErasePlusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxErasePlusItemStateChanged
        option.erasePlus=jCheckBoxErasePlus.isSelected();
    }//GEN-LAST:event_jCheckBoxErasePlusItemStateChanged

    private void jCheckBoxOpcodeFormattingSourceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxOpcodeFormattingSourceItemStateChanged
        option.opcodeUpperCaseSource=jCheckBoxOpcodeFormattingSource.isSelected();
    }//GEN-LAST:event_jCheckBoxOpcodeFormattingSourceItemStateChanged

    private void jTextFieldSidFreqHiFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldSidFreqHiFocusLost
        String txt=jTextFieldSidFreqHi.getText();
        txt=txt.replaceAll(" ", "");
        if ("".equals(txt)) option.sidFreqHiLabel="frequencyHi";
        else option.sidFreqHiLabel=txt;
    }//GEN-LAST:event_jTextFieldSidFreqHiFocusLost

    private void jTextFieldSidFreqLoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldSidFreqLoFocusLost
        String txt=jTextFieldSidFreqLo.getText();
        txt=txt.replaceAll(" ", "");
        if ("".equals(txt)) option.sidFreqLoLabel="frequencyLo";
        else option.sidFreqLoLabel=txt;
    }//GEN-LAST:event_jTextFieldSidFreqLoFocusLost

    private void jTextFieldPlaySoundFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldPlaySoundFocusLost
        String txt=jTextFieldPlaySound.getText();
        txt=txt.replaceAll(" ", "");
        if ("".equals(txt)) option.psidPlaySoundsLabel="playSound";
        else option.psidPlaySoundsLabel=txt;
    }//GEN-LAST:event_jTextFieldPlaySoundFocusLost

    private void jTextFieldInitSongsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldInitSongsFocusLost
        String txt=jTextFieldInitSongs.getText();
        txt=txt.replaceAll(" ", "");
        if ("".equals(txt)) option.psidInitSongsLabel="initSongs";
        else option.psidInitSongsLabel=txt;
    }//GEN-LAST:event_jTextFieldInitSongsFocusLost

    private void jSpinnerMaxAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxAggregateStateChanged
        option.maxAggregate=(Integer)jSpinnerMaxAggregate.getValue();
    }//GEN-LAST:event_jSpinnerMaxAggregateStateChanged

    private void jSpinnerMaxLengthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxLengthStateChanged
        option.maxLabelLength=(Integer)jSpinnerMaxLength.getValue();
    }//GEN-LAST:event_jSpinnerMaxLengthStateChanged

    private void jCheckBoxUndefinedCodeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxUndefinedCodeItemStateChanged
        option.useAsCode=jCheckBoxUndefinedCode.isSelected();
    }//GEN-LAST:event_jCheckBoxUndefinedCodeItemStateChanged

    private void jCheckBoxOpcodeFormattingPreviewItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxOpcodeFormattingPreviewItemStateChanged
        option.opcodeUpperCasePreview=jCheckBoxOpcodeFormattingPreview.isSelected();
    }//GEN-LAST:event_jCheckBoxOpcodeFormattingPreviewItemStateChanged

    private void jCheckBoxEraseDCommItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxEraseDCommItemStateChanged
        option.eraseDComm=jCheckBoxEraseDComm.isSelected();
    }//GEN-LAST:event_jCheckBoxEraseDCommItemStateChanged

    private void jRadioButtonLangItalianItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLangItalianItemStateChanged
        option.commentLanguage=C64Dasm.LANG_ITALIAN;
    }//GEN-LAST:event_jRadioButtonLangItalianItemStateChanged

    private void jRadioButtonLangEnglishItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLangEnglishItemStateChanged
        option.commentLanguage=C64Dasm.LANG_ENGLISH;
    }//GEN-LAST:event_jRadioButtonLangEnglishItemStateChanged

    private void jRadioButtonStyle3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonStyle3ItemStateChanged
        option.illegalOpcodeMode=M6510Dasm.MODE3;
    }//GEN-LAST:event_jRadioButtonStyle3ItemStateChanged

    private void jRadioButtonStyle2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonStyle2ItemStateChanged
        option.illegalOpcodeMode=M6510Dasm.MODE2;
    }//GEN-LAST:event_jRadioButtonStyle2ItemStateChanged

    private void jRadioButtonStyle1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonStyle1ItemStateChanged
        option.illegalOpcodeMode=M6510Dasm.MODE1;
    }//GEN-LAST:event_jRadioButtonStyle1ItemStateChanged

    private void jRadioButtonLookJavaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookJavaItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_MOTIF; 
        option.setLafName(actualLEF);
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);  
      }
    }//GEN-LAST:event_jRadioButtonLookJavaItemStateChanged

    private void jRadioButtonLookMacItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookMacItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_MAC;
        option.setLafName(actualLEF);   
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookMacItemStateChanged

    private void jRadioButtonLookMetalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookMetalItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_METAL;
        option.setLafName(actualLEF);    
        enableTheme();
        selectedTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme); 
      }
    }//GEN-LAST:event_jRadioButtonLookMetalItemStateChanged

    private void jRadioButtonLookWinItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookWinItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_WINDOWS;
        option.setLafName(actualLEF);    
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookWinItemStateChanged

    private void jRadioButtonLookGtkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookGtkItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_GTK;  
        option.setLafName(actualLEF);  
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookGtkItemStateChanged

    private void jRadioButtonLookNimbusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookNimbusItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_NIMBUS;
        option.setLafName(actualLEF);
        option.setTheme(Option.THEME_NULL);
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookNimbusItemStateChanged

    private void jRadioButtonLookCWinItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookCWinItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_CWINDOWS;
        option.setLafName(actualLEF);    
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookCWinItemStateChanged

    private void jRadioButtonLookSynthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookSynthItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_SYNTH;  
        option.setLafName(actualLEF);  
        disableTheme();
        jListLaf.setEnabled(true);
        
        actualLaf=(String)listModel.getElementAt(jListLaf.getSelectedIndex());
        option.setFlatLaf(actualLaf);
        Option.useLookAndFeel(actualLaf);
      }
    }//GEN-LAST:event_jRadioButtonLookSynthItemStateChanged

    private void jListLafValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListLafValueChanged
      if (!goFlat) return;
        
      if (evt != null && evt.getValueIsAdjusting()) {
        return;
      }
      if (evt == null) {
        return;
      }
      
      actualLaf=(String)listModel.getElementAt(jListLaf.getSelectedIndex());
      option.setFlatLaf(actualLaf);
      Option.useLookAndFeel(actualLaf);
    }//GEN-LAST:event_jListLafValueChanged

    private void jRadioButtonOceanItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonOceanItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_OCEAN);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonOceanItemStateChanged

    private void jRadioButtonSteelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonSteelItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_STEEL);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonSteelItemStateChanged

    private void jRadioButtonAquaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAquaItemStateChanged
     if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_AQUA);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }      
    }//GEN-LAST:event_jRadioButtonAquaItemStateChanged

    private void jRadioButtonCharcoalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCharcoalItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_CHARCOAL);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }    
    }//GEN-LAST:event_jRadioButtonCharcoalItemStateChanged

    private void jRadioButtonHighContrastItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonHighContrastItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_CONTRAST);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }      
    }//GEN-LAST:event_jRadioButtonHighContrastItemStateChanged

    private void jRadioButtonEmeraldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonEmeraldItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_EMERALD);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }     
    }//GEN-LAST:event_jRadioButtonEmeraldItemStateChanged

    private void jRadioButtonRubyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonRubyItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_RUBY);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      } 
    }//GEN-LAST:event_jRadioButtonRubyItemStateChanged

    private void jCheckBoxC64ZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64ZeroPageItemStateChanged
      option.commentC64ZeroPage=jCheckBoxC64ZeroPage.isSelected();
    }//GEN-LAST:event_jCheckBoxC64ZeroPageItemStateChanged

    private void jCheckBoxC64StackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64StackAreaItemStateChanged
      option.commentC64StackArea=jCheckBoxC64StackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxC64StackAreaItemStateChanged

    private void jCheckBoxC64_200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64_200AreaItemStateChanged
      option.commentC64_200Area=jCheckBoxC64_200Area.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC64_200AreaItemStateChanged

    private void jCheckBoxC64_300AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64_300AreaItemStateChanged
      option.commentC64_300Area=jCheckBoxC64_300Area.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC64_300AreaItemStateChanged

    private void jCheckBoxC64FreeAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64FreeAreaItemStateChanged
      option.commentC64BasicFreeArea=jCheckBoxC64FreeArea.isSelected();
    }//GEN-LAST:event_jCheckBoxC64FreeAreaItemStateChanged

    private void jCheckBoxC64BasicRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64BasicRomItemStateChanged
      option.commentC64BasicRom=jCheckBoxC64BasicRom.isSelected();
    }//GEN-LAST:event_jCheckBoxC64BasicRomItemStateChanged

    private void jCheckBoxC64FreeRamItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64FreeRamItemStateChanged
      option.commentC64FreeRam=jCheckBoxC64FreeRam.isSelected();
    }//GEN-LAST:event_jCheckBoxC64FreeRamItemStateChanged

    private void jCheckC64BoxVicIIItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckC64BoxVicIIItemStateChanged
      option.commentC64VicII=jCheckC64BoxVicII.isSelected();
    }//GEN-LAST:event_jCheckC64BoxVicIIItemStateChanged

    private void jCheckC64BoxSidItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckC64BoxSidItemStateChanged
      option.commentC64Sid=jCheckC64BoxSid.isSelected();
    }//GEN-LAST:event_jCheckC64BoxSidItemStateChanged

    private void jCheckBoxC64ColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64ColorItemStateChanged
      option.commentC64ColorArea=jCheckBoxC64Color.isSelected();
    }//GEN-LAST:event_jCheckBoxC64ColorItemStateChanged

    private void jCheckBoxC64Cia1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64Cia1ItemStateChanged
      option.commentC64Cia1=jCheckBoxC64Cia1.isSelected();
    }//GEN-LAST:event_jCheckBoxC64Cia1ItemStateChanged

    private void jCheckBoxC64Cia2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64Cia2ItemStateChanged
      option.commentC64Cia2=jCheckBoxC64Cia2.isSelected();
    }//GEN-LAST:event_jCheckBoxC64Cia2ItemStateChanged

    private void jCheckBoxC64KernalRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64KernalRomItemStateChanged
      option.commentC64KernalRom=jCheckBoxC64KernalRom.isSelected();
    }//GEN-LAST:event_jCheckBoxC64KernalRomItemStateChanged

    private void jCheckBoxC64ScreenAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64ScreenAreaItemStateChanged
      option.commentC64ScreenArea=jCheckBoxC64ScreenArea.isSelected();
    }//GEN-LAST:event_jCheckBoxC64ScreenAreaItemStateChanged

    private void jCheckBoxC1541ZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541ZeroPageItemStateChanged
      option.commentC1541ZeroPage=jCheckBoxC1541ZeroPage.isShowing();
    }//GEN-LAST:event_jCheckBoxC1541ZeroPageItemStateChanged

    private void jCheckBoxC1541StackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541StackAreaItemStateChanged
      option.commentC1541StackArea=jCheckBoxC64StackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541StackAreaItemStateChanged

    private void jCheckBoxC1541_200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541_200AreaItemStateChanged
      option.commentC1541_200Area=jCheckBoxC1541_200Area.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541_200AreaItemStateChanged

    private void jCheckBoxC1541Via1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Via1ItemStateChanged
      option.commentC1541Via1=jCheckBoxC1541Via1.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541Via1ItemStateChanged

    private void jCheckBoxC1541Via2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Via2ItemStateChanged
      option.commentC1541Via2=jCheckBoxC1541Via2.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541Via2ItemStateChanged

    private void jCheckBoxC1541KernalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541KernalItemStateChanged
     option.commentC1541Kernal=jCheckBoxC1541Kernal.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541KernalItemStateChanged

    private void jCheckBoxC1541Buffer0ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer0ItemStateChanged
      option.commentC1541Buffer0=jCheckBoxC1541Buffer0.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541Buffer0ItemStateChanged

    private void jCheckBoxC1541Buffer1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer1ItemStateChanged
      option.commentC1541Buffer1=jCheckBoxC1541Buffer1.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC1541Buffer1ItemStateChanged

    private void jCheckBoxC1541Buffer2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer2ItemStateChanged
      option.commentC1541Buffer2=jCheckBoxC1541Buffer2.isSelected();  
    }//GEN-LAST:event_jCheckBoxC1541Buffer2ItemStateChanged

    private void jCheckBoxC1541Buffer3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer3ItemStateChanged
      option.commentC1541Buffer3=jCheckBoxC1541Buffer3.isSelected();  
    }//GEN-LAST:event_jCheckBoxC1541Buffer3ItemStateChanged

    private void jCheckBoxC1541Buffer4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer4ItemStateChanged
      option.commentC1541Buffer4=jCheckBoxC1541Buffer4.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC1541Buffer4ItemStateChanged

    private void jCheckBoxPlus4ZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4ZeroPageItemStateChanged
      option.commentPlus4ZeroPage=jCheckBoxPlus4ZeroPage.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4ZeroPageItemStateChanged

    private void jCheckBoxPlus4StackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4StackAreaItemStateChanged
      option.commentPlus4StackArea=jCheckBoxPlus4StackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4StackAreaItemStateChanged

    private void jCheckBoxPlus4_200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_200AreaItemStateChanged
      option.commentPlus4_200Area=jCheckBoxPlus4_200Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_200AreaItemStateChanged

    private void jCheckBoxPlus4_300AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_300AreaItemStateChanged
      option.commentPlus4_300Area=jCheckBoxPlus4_300Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_300AreaItemStateChanged

    private void jCheckBoxPlus4_400AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_400AreaItemStateChanged
      option.commentPlus4_400Area=jCheckBoxPlus4_400Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_400AreaItemStateChanged

    private void jCheckBoxPlus4_500AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_500AreaItemStateChanged
      option.commentPlus4_500Area=jCheckBoxPlus4_500Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_500AreaItemStateChanged

    private void jCheckBoxPlus4_600AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_600AreaItemStateChanged
      option.commentPlus4_600Area=jCheckBoxPlus4_600Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_600AreaItemStateChanged

    private void jCheckBoxPlus4_700AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_700AreaItemStateChanged
      option.commentPlus4_700Area=jCheckBoxPlus4_700Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_700AreaItemStateChanged

    private void jCheckBoxPlus4ColorAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4ColorAreaItemStateChanged
      option.commentPlus4ColorArea=jCheckBoxPlus4ColorArea.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4ColorAreaItemStateChanged

    private void jCheckBoxPlus4VideoAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4VideoAreaItemStateChanged
      option.commentPlus4VideoArea=jCheckBoxPlus4VideoArea.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4VideoAreaItemStateChanged

    private void jCheckBoxPlus4BasicRamPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4BasicRamPItemStateChanged
      option.commentPlus4BasicRamP=jCheckBoxPlus4BasicRamP.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4BasicRamPItemStateChanged

    private void jCheckBoxPlus4LuminanceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4LuminanceItemStateChanged
      option.commentPlus4Luminance=jCheckBoxPlus4Luminance.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4LuminanceItemStateChanged

    private void jCheckBoxPlus4ColorBitmapItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4ColorBitmapItemStateChanged
      option.commentPlus4ColorBitmap=jCheckBoxPlus4ColorBitmap.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4ColorBitmapItemStateChanged

    private void jCheckBoxPlus4GraphicDataItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4GraphicDataItemStateChanged
      option.commentPlus4GraphicData=jCheckBoxPlus4GraphicData.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4GraphicDataItemStateChanged

    private void jCheckBoxPlus4BasicRamNItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4BasicRamNItemStateChanged
      option.commentPlus4BasicRamN=jCheckBoxPlus4BasicRamN.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4BasicRamNItemStateChanged

    private void jCheckBoxPlus4BasicRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4BasicRomItemStateChanged
      option.commentPlus4BasicRom=jCheckBoxPlus4BasicRom.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4BasicRomItemStateChanged

    private void jCheckBoxPlus4BasicExtItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4BasicExtItemStateChanged
      option.commentPlus4BasicExt=jCheckBoxPlus4BasicExt.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4BasicExtItemStateChanged

    private void jCheckBoxPlus4CaracterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4CaracterItemStateChanged
      option.commentPlus4Caracter=jCheckBoxPlus4Caracter.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4CaracterItemStateChanged

    private void jCheckBoxPlus4AciaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4AciaItemStateChanged
      option.commentPlus4Acia=jCheckBoxPlus4Acia.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4AciaItemStateChanged

    private void jCheckBoxPlus4_6529B_1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_6529B_1ItemStateChanged
      option.commentPlus4_6529B_1=jCheckBoxPlus4_6529B_1.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_6529B_1ItemStateChanged

    private void jCheckBoxPlus4_6529B_2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_6529B_2ItemStateChanged
      option.commentPlus4_6529B_2=jCheckBoxPlus4_6529B_2.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_6529B_2ItemStateChanged

    private void jCheckBoxPlus4TedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4TedItemStateChanged
      option.commentPlus4Ted=jCheckBoxPlus4Ted.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4TedItemStateChanged

    private void jCheckBoxPlus4KernalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4KernalItemStateChanged
      option.commentPlus4Kernal=jCheckBoxPlus4Kernal.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4KernalItemStateChanged

    private void jCheckBoxVic20StackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20StackAreaItemStateChanged
      option.commentVic20StackArea=jCheckBoxVic20StackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20StackAreaItemStateChanged

    private void jCheckBoxVic20ZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20ZeroPageItemStateChanged
      option.commentVic20ZeroPage=jCheckBoxVic20ZeroPage.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20ZeroPageItemStateChanged

    private void jCheckBoxVic20_200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_200AreaItemStateChanged
      option.commentVic20_200Area=jCheckBoxVic20_200Area.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20_200AreaItemStateChanged

    private void jCheckBoxVic20_300AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_300AreaItemStateChanged
      option.commentVic20_300Area=jCheckBoxVic20_300Area.isSelected();  
    }//GEN-LAST:event_jCheckBoxVic20_300AreaItemStateChanged

    private void jCheckBoxVic20_400AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_400AreaItemStateChanged
      option.commentVic20_400Area=jCheckBoxVic20_400Area.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20_400AreaItemStateChanged

    private void jCheckBoxVic20VicItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20VicItemStateChanged
      option.commentVic20Vic=jCheckBoxVic20Vic.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20VicItemStateChanged

    private void jCheckBoxVic20Via1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Via1ItemStateChanged
      option.commentVic20Via1=jCheckBoxVic20Via1.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20Via1ItemStateChanged

    private void jCheckBoxVic20Via2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Via2ItemStateChanged
      option.commentVic20Via2=jCheckBoxVic20Via2.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20Via2ItemStateChanged

    private void jCheckBoxVic20UserBasicItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20UserBasicItemStateChanged
      option.commentVic20UserBasic=jCheckBoxVic20UserBasic.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20UserBasicItemStateChanged

    private void jCheckBoxVic20ScreenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20ScreenItemStateChanged
      option.commentVic20Screen=jCheckBoxVic20Screen.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20ScreenItemStateChanged

    private void jCheckBoxVic20_8kExp1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_8kExp1ItemStateChanged
      option.commentVic20_8kExp1=jCheckBoxVic20_8kExp1.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20_8kExp1ItemStateChanged

    private void jCheckBoxVic20_8kExp2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_8kExp2ItemStateChanged
      option.commentVic20_8kExp2=jCheckBoxVic20_8kExp2.isSelected();    
    }//GEN-LAST:event_jCheckBoxVic20_8kExp2ItemStateChanged

    private void jCheckBoxVic20_8kExp3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_8kExp3ItemStateChanged
      option.commentVic20_8kExp3=jCheckBoxVic20_8kExp3.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20_8kExp3ItemStateChanged

    private void jCheckBoxVic20CharacterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20CharacterItemStateChanged
      option.commentVic20Character=jCheckBoxVic20Character.isSelected();  
    }//GEN-LAST:event_jCheckBoxVic20CharacterItemStateChanged

    private void jCheckBoxVic20ColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20ColorItemStateChanged
      option.commentVic20Color=jCheckBoxVic20Color.isSelected();   
    }//GEN-LAST:event_jCheckBoxVic20ColorItemStateChanged

    private void jCheckBoxVic20Block2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Block2ItemStateChanged
      option.commentVic20Block2=jCheckBoxVic20Block2.isSelected();  
    }//GEN-LAST:event_jCheckBoxVic20Block2ItemStateChanged

    private void jCheckBoxVic20Block3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Block3ItemStateChanged
      option.commentVic20Block3=jCheckBoxVic20Block3.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20Block3ItemStateChanged

    private void jCheckBoxVic20Block4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Block4ItemStateChanged
      option.commentVic20Block4=jCheckBoxVic20Block4.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20Block4ItemStateChanged

    private void jCheckBoxVic20BasicRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20BasicRomItemStateChanged
      option.commentVic20BasicRom=jCheckBoxVic20BasicRom.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20BasicRomItemStateChanged

    private void jCheckBoxVic20KernalRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20KernalRomItemStateChanged
      option.commentVic20KernalRom=jCheckBoxVic20KernalRom.isSelected();  
    }//GEN-LAST:event_jCheckBoxVic20KernalRomItemStateChanged

    private void jSpinnerInstrSpacesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerInstrSpacesStateChanged
      int num=(Integer)((JSpinner) evt.getSource()).getValue();
      if (num+option.numInstrTabs==0) jSpinnerInstrSpaces.setValue(1);
      else option.numInstrSpaces=num;      
    }//GEN-LAST:event_jSpinnerInstrSpacesStateChanged

    private void jSpinnerInstrTabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerInstrTabsStateChanged
      int num=(Integer)((JSpinner) evt.getSource()).getValue();
      if (num+option.numInstrSpaces==0) jSpinnerInstrTabs.setValue(1);
      else option.numInstrTabs=num;       
    }//GEN-LAST:event_jSpinnerInstrTabsStateChanged

    private void jSpinnerDataSpacesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerDataSpacesStateChanged
      int num=(Integer)((JSpinner) evt.getSource()).getValue();
      if (num+option.numDataTabs==0) jSpinnerDataSpaces.setValue(1);
      else option.numDataSpaces=num;         
    }//GEN-LAST:event_jSpinnerDataSpacesStateChanged

    private void jSpinnerDataTabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerDataTabsStateChanged
      int num=(Integer)((JSpinner) evt.getSource()).getValue();
      if (num+option.numDataSpaces==0) jSpinnerDataTabs.setValue(1);
      else option.numDataTabs=num;       
    }//GEN-LAST:event_jSpinnerDataTabsStateChanged

    private void jCheckBoxLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxLabelActionPerformed
      option.labelOnSepLine=jCheckBoxLabel.isSelected();
    }//GEN-LAST:event_jCheckBoxLabelActionPerformed

    private void jCheckBoxDasmF3CompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxDasmF3CompActionPerformed
      option.dasmF3Comp=jCheckBoxDasmF3Comp.isSelected();
    }//GEN-LAST:event_jCheckBoxDasmF3CompActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JOptionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JOptionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JOptionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JOptionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JOptionDialog dialog = new JOptionDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupAcmeByte;
    private javax.swing.ButtonGroup buttonGroupAcmeLabel;
    private javax.swing.ButtonGroup buttonGroupAcmeWord;
    private javax.swing.ButtonGroup buttonGroupC65Word;
    private javax.swing.ButtonGroup buttonGroupCa65Byte;
    private javax.swing.ButtonGroup buttonGroupCa65Label;
    private javax.swing.ButtonGroup buttonGroupCodeData;
    private javax.swing.ButtonGroup buttonGroupDasmByte;
    private javax.swing.ButtonGroup buttonGroupDasmLabel;
    private javax.swing.ButtonGroup buttonGroupDasmWord;
    private javax.swing.ButtonGroup buttonGroupIllegalOpcodeStyle;
    private javax.swing.ButtonGroup buttonGroupLanguage;
    private javax.swing.ButtonGroup buttonGroupLook;
    private javax.swing.ButtonGroup buttonGroupOpcodeFormatting;
    private javax.swing.ButtonGroup buttonGroupTheme;
    private javax.swing.ButtonGroup buttonGroupTmpxByte;
    private javax.swing.ButtonGroup buttonGroupTmpxLabel;
    private javax.swing.ButtonGroup buttonGroupTmpxWord;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JCheckBox jCheckBoxC1541Buffer0;
    private javax.swing.JCheckBox jCheckBoxC1541Buffer1;
    private javax.swing.JCheckBox jCheckBoxC1541Buffer2;
    private javax.swing.JCheckBox jCheckBoxC1541Buffer3;
    private javax.swing.JCheckBox jCheckBoxC1541Buffer4;
    private javax.swing.JCheckBox jCheckBoxC1541Kernal;
    private javax.swing.JCheckBox jCheckBoxC1541StackArea;
    private javax.swing.JCheckBox jCheckBoxC1541Via1;
    private javax.swing.JCheckBox jCheckBoxC1541Via2;
    private javax.swing.JCheckBox jCheckBoxC1541ZeroPage;
    private javax.swing.JCheckBox jCheckBoxC1541_200Area;
    private javax.swing.JCheckBox jCheckBoxC64BasicRom;
    private javax.swing.JCheckBox jCheckBoxC64Cia1;
    private javax.swing.JCheckBox jCheckBoxC64Cia2;
    private javax.swing.JCheckBox jCheckBoxC64Color;
    private javax.swing.JCheckBox jCheckBoxC64FreeArea;
    private javax.swing.JCheckBox jCheckBoxC64FreeRam;
    private javax.swing.JCheckBox jCheckBoxC64KernalRom;
    private javax.swing.JCheckBox jCheckBoxC64ScreenArea;
    private javax.swing.JCheckBox jCheckBoxC64StackArea;
    private javax.swing.JCheckBox jCheckBoxC64ZeroPage;
    private javax.swing.JCheckBox jCheckBoxC64_200Area;
    private javax.swing.JCheckBox jCheckBoxC64_300Area;
    private javax.swing.JCheckBox jCheckBoxDasmF3Comp;
    private javax.swing.JCheckBox jCheckBoxEraseDComm;
    private javax.swing.JCheckBox jCheckBoxErasePlus;
    private javax.swing.JCheckBox jCheckBoxLabel;
    private javax.swing.JCheckBox jCheckBoxOpcodeFormattingPreview;
    private javax.swing.JCheckBox jCheckBoxOpcodeFormattingSource;
    private javax.swing.JCheckBox jCheckBoxPlus4Acia;
    private javax.swing.JCheckBox jCheckBoxPlus4BasicExt;
    private javax.swing.JCheckBox jCheckBoxPlus4BasicRamN;
    private javax.swing.JCheckBox jCheckBoxPlus4BasicRamP;
    private javax.swing.JCheckBox jCheckBoxPlus4BasicRom;
    private javax.swing.JCheckBox jCheckBoxPlus4Caracter;
    private javax.swing.JCheckBox jCheckBoxPlus4ColorArea;
    private javax.swing.JCheckBox jCheckBoxPlus4ColorBitmap;
    private javax.swing.JCheckBox jCheckBoxPlus4GraphicData;
    private javax.swing.JCheckBox jCheckBoxPlus4Kernal;
    private javax.swing.JCheckBox jCheckBoxPlus4Luminance;
    private javax.swing.JCheckBox jCheckBoxPlus4StackArea;
    private javax.swing.JCheckBox jCheckBoxPlus4Ted;
    private javax.swing.JCheckBox jCheckBoxPlus4VideoArea;
    private javax.swing.JCheckBox jCheckBoxPlus4ZeroPage;
    private javax.swing.JCheckBox jCheckBoxPlus4_200Area;
    private javax.swing.JCheckBox jCheckBoxPlus4_300Area;
    private javax.swing.JCheckBox jCheckBoxPlus4_400Area;
    private javax.swing.JCheckBox jCheckBoxPlus4_500Area;
    private javax.swing.JCheckBox jCheckBoxPlus4_600Area;
    private javax.swing.JCheckBox jCheckBoxPlus4_6529B_1;
    private javax.swing.JCheckBox jCheckBoxPlus4_6529B_2;
    private javax.swing.JCheckBox jCheckBoxPlus4_700Area;
    private javax.swing.JCheckBox jCheckBoxUndefinedCode;
    private javax.swing.JCheckBox jCheckBoxVic20BasicRom;
    private javax.swing.JCheckBox jCheckBoxVic20Block2;
    private javax.swing.JCheckBox jCheckBoxVic20Block3;
    private javax.swing.JCheckBox jCheckBoxVic20Block4;
    private javax.swing.JCheckBox jCheckBoxVic20Character;
    private javax.swing.JCheckBox jCheckBoxVic20Color;
    private javax.swing.JCheckBox jCheckBoxVic20KernalRom;
    private javax.swing.JCheckBox jCheckBoxVic20Screen;
    private javax.swing.JCheckBox jCheckBoxVic20StackArea;
    private javax.swing.JCheckBox jCheckBoxVic20UserBasic;
    private javax.swing.JCheckBox jCheckBoxVic20Via1;
    private javax.swing.JCheckBox jCheckBoxVic20Via2;
    private javax.swing.JCheckBox jCheckBoxVic20Vic;
    private javax.swing.JCheckBox jCheckBoxVic20ZeroPage;
    private javax.swing.JCheckBox jCheckBoxVic20_200Area;
    private javax.swing.JCheckBox jCheckBoxVic20_300Area;
    private javax.swing.JCheckBox jCheckBoxVic20_400Area;
    private javax.swing.JCheckBox jCheckBoxVic20_8kExp1;
    private javax.swing.JCheckBox jCheckBoxVic20_8kExp2;
    private javax.swing.JCheckBox jCheckBoxVic20_8kExp3;
    private javax.swing.JCheckBox jCheckC64BoxSid;
    private javax.swing.JCheckBox jCheckC64BoxVicII;
    private javax.swing.JComboBox<String> jComboBoxAssembler;
    private javax.swing.JLabel jLabelAcmeByteDeclaration;
    private javax.swing.JLabel jLabelAcmeLabelDeclaration;
    private javax.swing.JLabel jLabelAcmeWordByteDeclaration;
    private javax.swing.JLabel jLabelAggregate;
    private javax.swing.JLabel jLabelArrow;
    private javax.swing.JLabel jLabelBracket;
    private javax.swing.JLabel jLabelC65ByteDeclaration;
    private javax.swing.JLabel jLabelC65WordDeclaration;
    private javax.swing.JLabel jLabelCa65LabelDeclaration;
    private javax.swing.JLabel jLabelDasmByteDeclaration;
    private javax.swing.JLabel jLabelDasmByteDeclaration1;
    private javax.swing.JLabel jLabelDasmLabelDeclaration;
    private javax.swing.JLabel jLabelDataSep;
    private javax.swing.JLabel jLabelDataSpace;
    private javax.swing.JLabel jLabelDataTabs;
    private javax.swing.JLabel jLabelFlatLaf;
    private javax.swing.JLabel jLabelIllegalOpcodeStyle;
    private javax.swing.JLabel jLabelInstrSep;
    private javax.swing.JLabel jLabelInstrSpace;
    private javax.swing.JLabel jLabelInstrTabs;
    private javax.swing.JLabel jLabelKickByteDeclaration;
    private javax.swing.JLabel jLabelKickLabelDeclaration;
    private javax.swing.JLabel jLabelKickWordDeclaration;
    private javax.swing.JLabel jLabelLanguage;
    private javax.swing.JLabel jLabelLook;
    private javax.swing.JLabel jLabelMaxLength;
    private javax.swing.JLabel jLabelPSIDinitsong;
    private javax.swing.JLabel jLabelPSIDplaysound;
    private javax.swing.JLabel jLabelSIDfreqHi;
    private javax.swing.JLabel jLabelSIDfreqLo;
    private javax.swing.JLabel jLabelTheme;
    private javax.swing.JLabel jLabelTmpxByteDeclaration;
    private javax.swing.JLabel jLabelTmpxLabelDeclaration;
    private javax.swing.JLabel jLabelTmpxWordDeclaration;
    private javax.swing.JLabel jLabelautocomment;
    private javax.swing.JLabel jLabelautocomment1;
    private javax.swing.JList<String> jListLaf;
    private javax.swing.JPanel jPanelAcme;
    private javax.swing.JPanel jPanelC128Comm;
    private javax.swing.JPanel jPanelC1541Comm;
    private javax.swing.JPanel jPanelC64Comm;
    private javax.swing.JPanel jPanelCa65;
    private javax.swing.JPanel jPanelComment;
    private javax.swing.JPanel jPanelDasm;
    private javax.swing.JPanel jPanelDisassembler;
    private javax.swing.JPanel jPanelDn;
    private javax.swing.JPanel jPanelKickAssembler;
    private javax.swing.JPanel jPanelLook;
    private javax.swing.JPanel jPanelOption;
    private javax.swing.JPanel jPanelPlus4Comm;
    private javax.swing.JPanel jPanelPreview;
    private javax.swing.JPanel jPanelTMPx;
    private javax.swing.JPanel jPanelVic20Comm;
    private javax.swing.JRadioButton jRadioButtonAcmeLabelName;
    private javax.swing.JRadioButton jRadioButtonAcmeLabelNameColon;
    private javax.swing.JRadioButton jRadioButtonAcmeMark16Work;
    private javax.swing.JRadioButton jRadioButtonAcmeMark8Byte;
    private javax.swing.JRadioButton jRadioButtonAcmeMarkByte;
    private javax.swing.JRadioButton jRadioButtonAcmeMarkWord;
    private javax.swing.JRadioButton jRadioButtonAqua;
    private javax.swing.JRadioButton jRadioButtonC65Byte;
    private javax.swing.JRadioButton jRadioButtonC65DotByte;
    private javax.swing.JRadioButton jRadioButtonC65DotWord;
    private javax.swing.JRadioButton jRadioButtonC65Word;
    private javax.swing.JRadioButton jRadioButtonCa65LabelName;
    private javax.swing.JRadioButton jRadioButtonCharcoal;
    private javax.swing.JRadioButton jRadioButtonDasmByte;
    private javax.swing.JRadioButton jRadioButtonDasmDcBByte;
    private javax.swing.JRadioButton jRadioButtonDasmDcByte;
    private javax.swing.JRadioButton jRadioButtonDasmDcWWord;
    private javax.swing.JRadioButton jRadioButtonDasmDotByte;
    private javax.swing.JRadioButton jRadioButtonDasmDotWord;
    private javax.swing.JRadioButton jRadioButtonDasmLabelName;
    private javax.swing.JRadioButton jRadioButtonDasmLabelNameColon;
    private javax.swing.JRadioButton jRadioButtonDasmWord;
    private javax.swing.JRadioButton jRadioButtonEmerald;
    private javax.swing.JRadioButton jRadioButtonHighContrast;
    private javax.swing.JRadioButton jRadioButtonKickDotByte;
    private javax.swing.JRadioButton jRadioButtonKickDotWord;
    private javax.swing.JRadioButton jRadioButtonKickLabelName;
    private javax.swing.JRadioButton jRadioButtonLangEnglish;
    private javax.swing.JRadioButton jRadioButtonLangItalian;
    private javax.swing.JRadioButton jRadioButtonLookCWin;
    private javax.swing.JRadioButton jRadioButtonLookGtk;
    private javax.swing.JRadioButton jRadioButtonLookJava;
    private javax.swing.JRadioButton jRadioButtonLookMac;
    private javax.swing.JRadioButton jRadioButtonLookMetal;
    private javax.swing.JRadioButton jRadioButtonLookNimbus;
    private javax.swing.JRadioButton jRadioButtonLookSynth;
    private javax.swing.JRadioButton jRadioButtonLookWin;
    private javax.swing.JRadioButton jRadioButtonOcean;
    private javax.swing.JRadioButton jRadioButtonRuby;
    private javax.swing.JRadioButton jRadioButtonSteel;
    private javax.swing.JRadioButton jRadioButtonStyle1;
    private javax.swing.JRadioButton jRadioButtonStyle2;
    private javax.swing.JRadioButton jRadioButtonStyle3;
    private javax.swing.JRadioButton jRadioButtonTmpxDotByte;
    private javax.swing.JRadioButton jRadioButtonTmpxDotWord;
    private javax.swing.JRadioButton jRadioButtonTmpxLabelName;
    private javax.swing.JScrollPane jScrollPaneAcmeLabelName;
    private javax.swing.JScrollPane jScrollPaneAcmeLabelNameColon;
    private javax.swing.JScrollPane jScrollPaneAcmeMark8Byte;
    private javax.swing.JScrollPane jScrollPaneAcmeMark8Byte1;
    private javax.swing.JScrollPane jScrollPaneAcmeMarkByte;
    private javax.swing.JScrollPane jScrollPaneAcmeMarkByte1;
    private javax.swing.JScrollPane jScrollPaneC65BytByte;
    private javax.swing.JScrollPane jScrollPaneC65DotByte;
    private javax.swing.JScrollPane jScrollPaneC65Word;
    private javax.swing.JScrollPane jScrollPaneCa65DotWord;
    private javax.swing.JScrollPane jScrollPaneCa65LabelName;
    private javax.swing.JScrollPane jScrollPaneDasmByte;
    private javax.swing.JScrollPane jScrollPaneDasmDCBByte;
    private javax.swing.JScrollPane jScrollPaneDasmDcByte;
    private javax.swing.JScrollPane jScrollPaneDasmDcWord;
    private javax.swing.JScrollPane jScrollPaneDasmDotByte;
    private javax.swing.JScrollPane jScrollPaneDasmDotWord;
    private javax.swing.JScrollPane jScrollPaneDasmLabelName;
    private javax.swing.JScrollPane jScrollPaneDasmLabelNameColon;
    private javax.swing.JScrollPane jScrollPaneDasmWord;
    private javax.swing.JScrollPane jScrollPaneKickLabelName;
    private javax.swing.JScrollPane jScrollPaneKickWord;
    private javax.swing.JScrollPane jScrollPaneList;
    private javax.swing.JScrollPane jScrollPaneTmpxByte;
    private javax.swing.JScrollPane jScrollPaneTmpxDotWord;
    private javax.swing.JScrollPane jScrollPaneTmpxDotWord1;
    private javax.swing.JScrollPane jScrollPaneTmpxWord;
    private javax.swing.JSpinner jSpinnerDataSpaces;
    private javax.swing.JSpinner jSpinnerDataTabs;
    private javax.swing.JSpinner jSpinnerInstrSpaces;
    private javax.swing.JSpinner jSpinnerInstrTabs;
    private javax.swing.JSpinner jSpinnerMaxAggregate;
    private javax.swing.JSpinner jSpinnerMaxLength;
    private javax.swing.JTabbedPane jTabbedPaneAssembler;
    private javax.swing.JTabbedPane jTabbedPaneComm;
    private javax.swing.JTabbedPane jTabbedPaneOption;
    private javax.swing.JTextField jTextFieldInitSongs;
    private javax.swing.JTextField jTextFieldPlaySound;
    private javax.swing.JTextField jTextFieldSidFreqHi;
    private javax.swing.JTextField jTextFieldSidFreqLo;
    private javax.swing.JTextPane jTextPaneAcmeLabelName;
    private javax.swing.JTextPane jTextPaneAcmeLabelNameColon;
    private javax.swing.JTextPane jTextPaneAcmeMark16Work;
    private javax.swing.JTextPane jTextPaneAcmeMark8Byte;
    private javax.swing.JTextPane jTextPaneAcmeMarkByte;
    private javax.swing.JTextPane jTextPaneAcmeMarkWork;
    private javax.swing.JTextPane jTextPaneC65BytByte;
    private javax.swing.JTextPane jTextPaneC65DotWord;
    private javax.swing.JTextPane jTextPaneC65Word;
    private javax.swing.JTextPane jTextPaneCa65DotByte;
    private javax.swing.JTextPane jTextPaneCa65LabelName;
    private javax.swing.JTextPane jTextPaneDasmByte;
    private javax.swing.JTextPane jTextPaneDasmDcBByte;
    private javax.swing.JTextPane jTextPaneDasmDcByte;
    private javax.swing.JTextPane jTextPaneDasmDcWord;
    private javax.swing.JTextPane jTextPaneDasmDotByte;
    private javax.swing.JTextPane jTextPaneDasmDotWord;
    private javax.swing.JTextPane jTextPaneDasmLabelName;
    private javax.swing.JTextPane jTextPaneDasmLabelNameColon;
    private javax.swing.JTextPane jTextPaneDasmWord;
    private javax.swing.JTextPane jTextPaneKickCa65LabelName;
    private javax.swing.JTextPane jTextPaneKickDotByte;
    private javax.swing.JTextPane jTextPaneKickDotWord;
    private javax.swing.JTextPane jTextPaneTmpxDotByte;
    private javax.swing.JTextPane jTextPaneTmpxDotWord;
    private javax.swing.JTextPane jTextPaneTmpxLabelName;
    // End of variables declaration//GEN-END:variables

    /**
     * Use the passed option container 
     * 
     * @param option the option to use
     */
    public void useOption(Option option) {
      this.option=option;
      applyOption();
    }

    /**
     * Apply option to graphical container
     */
    private void applyOption() {
      jRadioButtonLangEnglish.setSelected(option.commentLanguage==C64Dasm.LANG_ENGLISH);
      jRadioButtonLangItalian.setSelected(option.commentLanguage==C64Dasm.LANG_ITALIAN);
      jRadioButtonStyle1.setSelected((option.illegalOpcodeMode==M6510Dasm.MODE1));
      jRadioButtonStyle2.setSelected((option.illegalOpcodeMode==M6510Dasm.MODE2));
      jRadioButtonStyle3.setSelected((option.illegalOpcodeMode==M6510Dasm.MODE3));
      jCheckBoxOpcodeFormattingPreview.setSelected(option.opcodeUpperCasePreview);      
      jCheckBoxOpcodeFormattingSource.setSelected(option.opcodeUpperCaseSource);      
      jCheckBoxUndefinedCode.setSelected(option.useAsCode);
      jCheckBoxEraseDComm.setSelected(option.eraseDComm);
      jCheckBoxErasePlus.setSelected(option.erasePlus);
      jTextFieldInitSongs.setText(option.psidInitSongsLabel);
      jTextFieldPlaySound.setText(option.psidPlaySoundsLabel);
      jTextFieldSidFreqLo.setText(option.sidFreqLoLabel);
      jTextFieldSidFreqHi.setText(option.sidFreqHiLabel);
      jSpinnerMaxLength.setValue(option.maxLabelLength);
      jSpinnerMaxAggregate.setValue(option.maxAggregate);
      jSpinnerInstrSpaces.setValue(option.numInstrSpaces);
      jSpinnerInstrTabs.setValue(option.numInstrTabs);
      jSpinnerDataSpaces.setValue(option.numDataSpaces);
      jSpinnerDataTabs.setValue(option.numDataTabs);
      jCheckBoxLabel.setSelected(option.labelOnSepLine);
      
      actualLEF=option.getLafName();
      actualTheme=option.getMethalTheme();
      actualLaf=option.getFlatLaf();
      
      // select the right element
      String name;        
      for (int i=0; i<listModel.size(); i++) {        
        name=(String)listModel.elementAt(i);
        if (name.equals(actualLaf)) jListLaf.setSelectedIndex(i);
      }  
      
      goFlat=true;
      
      // show the look and feel radio selected
      String lafName=option.getLafName();
      if (lafName.equals(Option.LAF_GTK)) jRadioButtonLookGtk.setSelected(true);
      if (lafName.equals(Option.LAF_MAC)) jRadioButtonLookMac.setSelected(true);
      if (lafName.equals(Option.LAF_METAL)) jRadioButtonLookMetal.setSelected(true);
      if (lafName.equals(Option.LAF_MOTIF)) jRadioButtonLookJava.setSelected(true);    
      if (lafName.equals(Option.LAF_WINDOWS)) jRadioButtonLookWin.setSelected(true);
      if (lafName.equals(Option.LAF_CWINDOWS)) jRadioButtonLookCWin.setSelected(true);
      if (lafName.equals(Option.LAF_NIMBUS)) jRadioButtonLookNimbus.setSelected(true);
      if (lafName.equals(Option.LAF_SYNTH)) {
        jRadioButtonLookSynth.setSelected(true);
        jListLaf.setEnabled(true);        
      }
      
      selectedTheme();
      
      //DASM
      jCheckBoxDasmF3Comp.setSelected(option.dasmF3Comp);
      
      // apply comments C64
      jCheckBoxC64ZeroPage.setSelected(option.commentC64ZeroPage);
      jCheckBoxC64StackArea.setSelected(option.commentC64StackArea);
      jCheckBoxC64_200Area.setSelected(option.commentC64_200Area);
      jCheckBoxC64_300Area.setSelected(option.commentC64_300Area);
      jCheckBoxC64FreeArea.setSelected(option.commentC64BasicFreeArea);
      jCheckBoxC64BasicRom.setSelected(option.commentC64BasicRom);
      jCheckBoxC64FreeRam.setSelected(option.commentC64FreeRam);
      jCheckC64BoxVicII.setSelected(option.commentC64VicII);
      jCheckC64BoxSid.setSelected(option.commentC64Sid);
      jCheckBoxC64Color.setSelected(option.commentC64ColorArea);
      jCheckBoxC64Cia1.setSelected(option.commentC64Cia1);
      jCheckBoxC64Cia2.setSelected(option.commentC64Cia2);
      jCheckBoxC64KernalRom.setSelected(option.commentC64ScreenArea);
      jCheckBoxC64ScreenArea.setSelected(option.commentC64ScreenArea);

      // apply comments C1541
      jCheckBoxC1541ZeroPage.setSelected(option.commentC1541ZeroPage);
      jCheckBoxC1541StackArea.setSelected(option.commentC1541StackArea);
      jCheckBoxC1541_200Area.setSelected(option.commentC1541_200Area);
      jCheckBoxC1541Via1.setSelected(option.commentC1541Via1);
      jCheckBoxC1541Via2.setSelected(option.commentC1541Via2);
      jCheckBoxC1541Kernal.setSelected(option.commentC1541Kernal);
      jCheckBoxC1541Buffer0.setSelected(option.commentC1541Buffer0);
      jCheckBoxC1541Buffer1.setSelected(option.commentC1541Buffer1);
      jCheckBoxC1541Buffer2.setSelected(option.commentC1541Buffer2);
      jCheckBoxC1541Buffer3.setSelected(option.commentC1541Buffer3);
      jCheckBoxC1541Buffer4.setSelected(option.commentC1541Buffer4);
      
      // apply comments Plus4
      jCheckBoxPlus4Acia.setSelected(option.commentPlus4Acia);
      jCheckBoxPlus4BasicExt.setSelected(option.commentPlus4BasicExt);
      jCheckBoxPlus4BasicRamN.setSelected(option.commentPlus4BasicRamN);
      jCheckBoxPlus4BasicRamP.setSelected(option.commentPlus4BasicRamP);
      jCheckBoxPlus4BasicRom.setSelected(option.commentPlus4BasicRom);
      jCheckBoxPlus4Caracter.setSelected(option.commentPlus4Caracter);
      jCheckBoxPlus4ColorArea.setSelected(option.commentPlus4ColorArea);
      jCheckBoxPlus4ColorBitmap.setSelected(option.commentPlus4ColorBitmap);
      jCheckBoxPlus4GraphicData.setSelected(option.commentPlus4GraphicData);
      jCheckBoxPlus4Kernal.setSelected(option.commentPlus4Kernal);
      jCheckBoxPlus4Luminance.setSelected(option.commentPlus4Luminance);
      jCheckBoxPlus4StackArea.setSelected(option.commentPlus4StackArea);
      jCheckBoxPlus4Ted.setSelected(option.commentPlus4Ted);
      jCheckBoxPlus4VideoArea.setSelected(option.commentPlus4VideoArea);
      jCheckBoxPlus4ZeroPage.setSelected(option.commentPlus4ZeroPage);
      jCheckBoxPlus4_200Area.setSelected(option.commentPlus4_200Area);
      jCheckBoxPlus4_300Area.setSelected(option.commentPlus4_300Area);
      jCheckBoxPlus4_400Area.setSelected(option.commentPlus4_400Area);
      jCheckBoxPlus4_500Area.setSelected(option.commentPlus4_500Area);
      jCheckBoxPlus4_600Area.setSelected(option.commentPlus4_600Area);
      jCheckBoxPlus4_6529B_1.setSelected(option.commentPlus4_6529B_1);
      jCheckBoxPlus4_6529B_2.setSelected(option.commentPlus4_6529B_2);
      jCheckBoxPlus4_700Area.setSelected(option.commentPlus4_700Area); 
      
      // apply comments Vic20
      jCheckBoxVic20BasicRom.setSelected(option.commentVic20BasicRom);
      jCheckBoxVic20Block2.setSelected(option.commentVic20Block2);
      jCheckBoxVic20Block3.setSelected(option.commentVic20Block3);
      jCheckBoxVic20Block4.setSelected(option.commentVic20Block4);
      jCheckBoxVic20Character.setSelected(option.commentVic20Character);
      jCheckBoxVic20Color.setSelected(option.commentVic20Color);
      jCheckBoxVic20KernalRom.setSelected(option.commentVic20KernalRom);
      jCheckBoxVic20Screen.setSelected(option.commentVic20Screen);
      jCheckBoxVic20StackArea.setSelected(option.commentVic20StackArea);
      jCheckBoxVic20UserBasic.setSelected(option.commentVic20UserBasic);
      jCheckBoxVic20Via1.setSelected(option.commentVic20Via1);
      jCheckBoxVic20Via2.setSelected(option.commentVic20Via2);
      jCheckBoxVic20Vic.setSelected(option.commentVic20Vic);
      jCheckBoxVic20ZeroPage.setSelected(option.commentVic20ZeroPage);
      jCheckBoxVic20_200Area.setSelected(option.commentVic20_200Area);
      jCheckBoxVic20_300Area.setSelected(option.commentVic20_300Area);
      jCheckBoxVic20_400Area.setSelected(option.commentVic20_400Area);
      jCheckBoxVic20_8kExp1.setSelected(option.commentVic20_8kExp1);
      jCheckBoxVic20_8kExp2.setSelected(option.commentVic20_8kExp2);
      jCheckBoxVic20_8kExp3.setSelected(option.commentVic20_8kExp3);
    }
    
  /**
   * Disable the themes buttons
   */
  private void disableTheme() {
    jRadioButtonOcean.setEnabled(false);
    jRadioButtonSteel.setEnabled(false);
    jRadioButtonAqua.setEnabled(false);
    jRadioButtonCharcoal.setEnabled(false);
    jRadioButtonHighContrast.setEnabled(false);
    jRadioButtonEmerald.setEnabled(false);
    jRadioButtonRuby.setEnabled(false);
  }
  
  /**
   * Enable the themes buttons
   */
  private void enableTheme() {
    jRadioButtonOcean.setEnabled(true);
    jRadioButtonSteel.setEnabled(true);
    jRadioButtonAqua.setEnabled(true);
    jRadioButtonCharcoal.setEnabled(true);
    jRadioButtonHighContrast.setEnabled(true);
    jRadioButtonEmerald.setEnabled(true);
    jRadioButtonRuby.setEnabled(true);   
  }  
  
  /**
   * Select the theme in radio button
   */
  public void selectedTheme() {
    switch (option.getTheme()) {
      case Option.THEME_OCEAN:
        jRadioButtonOcean.setSelected(true); 
        break;
      case Option.THEME_STEEL:
        jRadioButtonSteel.setSelected(true);    
        break;
      case Option.THEME_AQUA:
        jRadioButtonAqua.setSelected(true);   
        break;
      case Option.THEME_CHARCOAL:
        jRadioButtonCharcoal.setSelected(true);   
        break;    
      case Option.THEME_CONTRAST:
        jRadioButtonHighContrast.setSelected(true);   
        break;       
      case Option.THEME_EMERALD:
        jRadioButtonEmerald.setSelected(true);   
        break;      
      case Option.THEME_RUBY:
        jRadioButtonRuby.setSelected(true);   
        break;         
    }      
  }
    
}
