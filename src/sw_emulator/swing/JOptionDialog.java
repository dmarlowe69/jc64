/**
 * @(#)JPanelOption.java 2019/12/01
 *
 * ICE Team free software group
 *
 * This file is part of C64 Java Software Emulator.
 * See README for copyright notice.
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 *  02111-1307  USA.
 */
package sw_emulator.swing;

import com.formdev.flatlaf.FlatLaf;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SwingUtilities;
import javax.swing.plaf.metal.MetalTheme;
import javax.swing.UIManager;
import sw_emulator.software.Assembler;
import sw_emulator.software.Assembler.Name;

import sw_emulator.software.cpu.M6510Dasm;
import sw_emulator.software.machine.C64Dasm;
import sw_emulator.swing.main.FileManager;
import sw_emulator.swing.main.Option;
import sw_emulator.swing.table.DataTableModelMemory;

/**
 * A dialog for option
 * 
 * @author ice
 */
public class JOptionDialog extends javax.swing.JDialog {
  /** Option to use */
  Option option=new Option();
    
  /** Actual selected look and feel */
  String actualLEF=option.getLafName();
  
  /** Actual metal theme to use */
  MetalTheme actualTheme=option.getMethalTheme();
  
  /** Actual flat laf theme */
  String actualLaf=option.getFlatLaf();
  
  /** Default list model for laf look & feel */
  DefaultListModel<String> listModel=new DefaultListModel();
  
  /** file chooser for tmp dierctory */
  JFileChooser chooserDir=new JFileChooser();   
  
  /** True if event can be processed */
  boolean goFlat=false;
  
  /** Data Table model */
  DataTableModelMemory model;    
    
    /**
     * Creates new form JOptionDialog
     */
    public JOptionDialog(java.awt.Frame parent, boolean modal, DataTableModelMemory model) {
        super(parent, modal);
        initComponents();
        this.model=model;
        
        jDasmPanel.setUp(option);
        jTmpxPanel.setUp(option);
        jCa65Panel.setUp(option);
        jAcmePanel.setUp(option); 
        
        for (Name val: Assembler.Name.values()) {
          jComboBoxAssembler.addItem(val.getName());
        }
        Shared.framesList.add(this);        
        
        chooserDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        platformeEnable();
    }
    
  /**
   * Enable some chooses based onto platforme specific implementation
   */
  private void platformeEnable() {
    String name;  
      
    UIManager.LookAndFeelInfo[] info=UIManager.getInstalledLookAndFeels();
    // scan all the look and feels 
    for (int i=0; i<info.length; i++) {
      name=info[i].getClassName();  
      if (name.equals(Option.LAF_MAC)) jRadioButtonLookMac.setEnabled(true);
      if (name.equals(Option.LAF_METAL)) jRadioButtonLookMetal.setEnabled(true);
      if (name.equals(Option.LAF_MOTIF)) jRadioButtonLookJava.setEnabled(true);
      if (name.equals(Option.LAF_WINDOWS)) jRadioButtonLookWin.setEnabled(true);
      if (name.equals(Option.LAF_CWINDOWS)) jRadioButtonLookCWin.setEnabled(true);
      if (name.equals(Option.LAF_GTK)) jRadioButtonLookGtk.setEnabled(true);
      if (name.equals(Option.LAF_NIMBUS)) jRadioButtonLookNimbus.setEnabled(true);
    }
    
    // scan all flat laf
    for (FlatLaf laf: Option.LAF_SYNTH_FLAT) {
      listModel.addElement(laf.getName());
    }
  }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupOpcodeFormatting = new javax.swing.ButtonGroup();
        buttonGroupIllegalOpcodeStyle = new javax.swing.ButtonGroup();
        buttonGroupLanguage = new javax.swing.ButtonGroup();
        buttonGroupCodeData = new javax.swing.ButtonGroup();
        buttonGroupLook = new javax.swing.ButtonGroup();
        buttonGroupTheme = new javax.swing.ButtonGroup();
        buttonGroupKickLabel = new javax.swing.ButtonGroup();
        buttonGroupKickByte = new javax.swing.ButtonGroup();
        buttonGroupKickWord = new javax.swing.ButtonGroup();
        buttonGroupKickStarting = new javax.swing.ButtonGroup();
        buttonGroupKickComment = new javax.swing.ButtonGroup();
        buttonGroupKickOrigin = new javax.swing.ButtonGroup();
        buttonGroupKickBlockComment = new javax.swing.ButtonGroup();
        buttonGroupTass64Starting = new javax.swing.ButtonGroup();
        buttonGroupTass64Origin = new javax.swing.ButtonGroup();
        buttonGroupTass64Comment = new javax.swing.ButtonGroup();
        buttonGroupTass64BlockComment = new javax.swing.ButtonGroup();
        buttonGroupTass64Label = new javax.swing.ButtonGroup();
        buttonGroupTass64Byte = new javax.swing.ButtonGroup();
        buttonGroupTass64Word = new javax.swing.ButtonGroup();
        buttonGroupKickMonoSprite = new javax.swing.ButtonGroup();
        buttonGroupKickMultiSprite = new javax.swing.ButtonGroup();
        buttonGroupTass64MonoSprite = new javax.swing.ButtonGroup();
        buttonGroupTass64MultiSprite = new javax.swing.ButtonGroup();
        buttonGroupKickTribyte = new javax.swing.ButtonGroup();
        buttonGroupTass64Tribyte = new javax.swing.ButtonGroup();
        buttonGroupKickLong = new javax.swing.ButtonGroup();
        buttonGroupKickWordSwapped = new javax.swing.ButtonGroup();
        buttonGroupTass64WordSwapped = new javax.swing.ButtonGroup();
        buttonGroupTass64WaordSwapped = new javax.swing.ButtonGroup();
        buttonGroupKickText = new javax.swing.ButtonGroup();
        buttonGroupTass64Text = new javax.swing.ButtonGroup();
        buttonGroupTass64Long = new javax.swing.ButtonGroup();
        buttonGroupKickNumText = new javax.swing.ButtonGroup();
        buttonGroupKickZeroText = new javax.swing.ButtonGroup();
        buttonGroupTass64NumText = new javax.swing.ButtonGroup();
        buttonGroupTass64ZeroText = new javax.swing.ButtonGroup();
        buttonGroupKickAddress = new javax.swing.ButtonGroup();
        buttonGroupTass64Address = new javax.swing.ButtonGroup();
        buttonGroupTass64StackWord = new javax.swing.ButtonGroup();
        buttonGroupKickStackWord = new javax.swing.ButtonGroup();
        buttonGroupKickHighText = new javax.swing.ButtonGroup();
        buttonGroupTass64HighText = new javax.swing.ButtonGroup();
        buttonGroupKickShiftText = new javax.swing.ButtonGroup();
        buttonGroupTass64ShiftText = new javax.swing.ButtonGroup();
        buttonGroupKickScreenText = new javax.swing.ButtonGroup();
        buttonGroupKickPetasciiText = new javax.swing.ButtonGroup();
        buttonGroupTass64ScreenCode = new javax.swing.ButtonGroup();
        buttonGroupTass64PetasciiText = new javax.swing.ButtonGroup();
        buttonGroupMemoryValue = new javax.swing.ButtonGroup();
        buttonGroupHeather = new javax.swing.ButtonGroup();
        buttonGroupGlassStarting = new javax.swing.ButtonGroup();
        jPanelOption = new javax.swing.JPanel();
        jTabbedPaneOption = new javax.swing.JTabbedPane();
        jScrollPanePreview = new javax.swing.JScrollPane();
        jPanelPreview = new javax.swing.JPanel();
        jLabelIllegalOpcodeStyle = new javax.swing.JLabel();
        jRadioButtonStyle1 = new javax.swing.JRadioButton();
        jRadioButtonStyle2 = new javax.swing.JRadioButton();
        jRadioButtonStyle3 = new javax.swing.JRadioButton();
        jLabelLanguage = new javax.swing.JLabel();
        jRadioButtonLangEnglish = new javax.swing.JRadioButton();
        jRadioButtonLangItalian = new javax.swing.JRadioButton();
        jCheckBoxEraseDComm = new javax.swing.JCheckBox();
        jCheckBoxOpcodeFormattingPreview = new javax.swing.JCheckBox();
        jCheckBoxUndefinedCode = new javax.swing.JCheckBox();
        jSpinnerMaxLength = new javax.swing.JSpinner();
        jLabelMaxLength = new javax.swing.JLabel();
        jLabelAggregate = new javax.swing.JLabel();
        jSpinnerMaxByteAggregate = new javax.swing.JSpinner();
        jLabelPSIDinitsong = new javax.swing.JLabel();
        jTextFieldInitSongs = new javax.swing.JTextField();
        jLabelPSIDplaysound = new javax.swing.JLabel();
        jTextFieldPlaySound = new javax.swing.JTextField();
        jLabelSIDfreqLo = new javax.swing.JLabel();
        jTextFieldSidFreqLo = new javax.swing.JTextField();
        jLabelSIDfreqHi = new javax.swing.JLabel();
        jTextFieldSidFreqHi = new javax.swing.JTextField();
        jCheckBoxOpcodeFormattingSource = new javax.swing.JCheckBox();
        jCheckBoxErasePlus = new javax.swing.JCheckBox();
        jLabelInstrSep = new javax.swing.JLabel();
        jSpinnerInstrSpaces = new javax.swing.JSpinner();
        jSpinnerInstrTabs = new javax.swing.JSpinner();
        jLabelInstrSpace = new javax.swing.JLabel();
        jLabelInstrTabs = new javax.swing.JLabel();
        jLabelDataSep = new javax.swing.JLabel();
        jLabelDataSpace = new javax.swing.JLabel();
        jSpinnerDataSpaces = new javax.swing.JSpinner();
        jLabelDataTabs = new javax.swing.JLabel();
        jSpinnerDataTabs = new javax.swing.JSpinner();
        jCheckBoxLabel = new javax.swing.JCheckBox();
        jLabelMaxByte = new javax.swing.JLabel();
        jLabelMaxWord = new javax.swing.JLabel();
        jSpinnerMaxWordAggregate = new javax.swing.JSpinner();
        jLabelMaxTribyte = new javax.swing.JLabel();
        jSpinnerMaxTribyteAggregate = new javax.swing.JSpinner();
        jLabelMaxLong = new javax.swing.JLabel();
        jSpinnerMaxLongAggregate = new javax.swing.JSpinner();
        jLabelTmpPath = new javax.swing.JLabel();
        jTextFieldTmpPath = new javax.swing.JTextField();
        jButtonBrowse = new javax.swing.JButton();
        jLabelMaxSwapped = new javax.swing.JLabel();
        jSpinnerMaxSwappedAggregate = new javax.swing.JSpinner();
        jLabelMaxText = new javax.swing.JLabel();
        jSpinnerMaxTextAggregate = new javax.swing.JSpinner();
        jLabelMaxAddress = new javax.swing.JLabel();
        jSpinnerMaxAddressAggregate = new javax.swing.JSpinner();
        jLabelMaxStackWord = new javax.swing.JLabel();
        jSpinnerMaxStackWordAggregate = new javax.swing.JSpinner();
        jCheckBoxUbEdit = new javax.swing.JCheckBox();
        jCheckBoxUcEdit = new javax.swing.JCheckBox();
        jCheckBoxUlEdit = new javax.swing.JCheckBox();
        jCheckBoxDcErase = new javax.swing.JCheckBox();
        jCheckBoxDlErase = new javax.swing.JCheckBox();
        jCheckBoxForceCompilation = new javax.swing.JCheckBox();
        jLabelLanguage1 = new javax.swing.JLabel();
        jRadioButtonMemoryValueHex = new javax.swing.JRadioButton();
        jRadioButtonMemoryValueChar = new javax.swing.JRadioButton();
        jLabelInstrCSep = new javax.swing.JLabel();
        jLabelInstrCSpace = new javax.swing.JLabel();
        jSpinnerInstrCSpaces = new javax.swing.JSpinner();
        jLabelInstrCTabs = new javax.swing.JLabel();
        jSpinnerInstrCTabs = new javax.swing.JSpinner();
        jLabelDataCSep = new javax.swing.JLabel();
        jLabelDataCSpace = new javax.swing.JLabel();
        jSpinnerDataCSpaces = new javax.swing.JSpinner();
        jLabelDataCTabs = new javax.swing.JLabel();
        jSpinnerDataCTabs = new javax.swing.JSpinner();
        jCheckBoxAllowUtf = new javax.swing.JCheckBox();
        jCheckBoxAllowSIDFreq = new javax.swing.JCheckBox();
        jCheckBoxMarkMemory = new javax.swing.JCheckBox();
        jCheckBoxSetLabels = new javax.swing.JCheckBox();
        jCheckBoxSetComment = new javax.swing.JCheckBox();
        jCheckBoxNotUsePSID = new javax.swing.JCheckBox();
        jCheckBoxCreatePSID = new javax.swing.JCheckBox();
        jScrollPaneHeather = new javax.swing.JScrollPane();
        jTextAreaHeather = new javax.swing.JTextArea();
        jRadioButtonCustom = new javax.swing.JRadioButton();
        jRadioButtonStandard = new javax.swing.JRadioButton();
        jRadioButtonNone = new javax.swing.JRadioButton();
        jLabelHeather = new javax.swing.JLabel();
        jCheckBoxRepositionate = new javax.swing.JCheckBox();
        jCheckBoxPedantic = new javax.swing.JCheckBox();
        jCheckBoxVlPatch = new javax.swing.JCheckBox();
        jPanelComment = new javax.swing.JPanel();
        jLabelautocomment = new javax.swing.JLabel();
        jTabbedPaneComm = new javax.swing.JTabbedPane();
        jPanelC64Comm = new javax.swing.JPanel();
        jCheckBoxC64ZeroPage = new javax.swing.JCheckBox();
        jCheckBoxC64StackArea = new javax.swing.JCheckBox();
        jCheckBoxC64_200Area = new javax.swing.JCheckBox();
        jCheckBoxC64_300Area = new javax.swing.JCheckBox();
        jCheckBoxC64ScreenArea = new javax.swing.JCheckBox();
        jCheckBoxC64FreeArea = new javax.swing.JCheckBox();
        jCheckBoxC64BasicRom = new javax.swing.JCheckBox();
        jCheckBoxC64FreeRam = new javax.swing.JCheckBox();
        jCheckC64BoxVicII = new javax.swing.JCheckBox();
        jCheckC64BoxSid = new javax.swing.JCheckBox();
        jCheckBoxC64Color = new javax.swing.JCheckBox();
        jCheckBoxC64Cia1 = new javax.swing.JCheckBox();
        jCheckBoxC64Cia2 = new javax.swing.JCheckBox();
        jCheckBoxC64KernalRom = new javax.swing.JCheckBox();
        jPanelC1541Comm = new javax.swing.JPanel();
        jCheckBoxC1541ZeroPage = new javax.swing.JCheckBox();
        jCheckBoxC1541StackArea = new javax.swing.JCheckBox();
        jCheckBoxC1541_200Area = new javax.swing.JCheckBox();
        jCheckBoxC1541Via1 = new javax.swing.JCheckBox();
        jCheckBoxC1541Via2 = new javax.swing.JCheckBox();
        jCheckBoxC1541Kernal = new javax.swing.JCheckBox();
        jCheckBoxC1541Buffer0 = new javax.swing.JCheckBox();
        jCheckBoxC1541Buffer1 = new javax.swing.JCheckBox();
        jCheckBoxC1541Buffer2 = new javax.swing.JCheckBox();
        jCheckBoxC1541Buffer3 = new javax.swing.JCheckBox();
        jCheckBoxC1541Buffer4 = new javax.swing.JCheckBox();
        jPanelC128Comm = new javax.swing.JPanel();
        jCheckBoxC128ZeroPage = new javax.swing.JCheckBox();
        jCheckBoxC128StackArea = new javax.swing.JCheckBox();
        jCheckBoxC128_300Area = new javax.swing.JCheckBox();
        jCheckBoxC128_200Area = new javax.swing.JCheckBox();
        jCheckBoxC128ScreenArea = new javax.swing.JCheckBox();
        jCheckBoxC128UserBasic = new javax.swing.JCheckBox();
        jCheckBoxC128AppProgArea = new javax.swing.JCheckBox();
        jCheckBoxC128VideoColor = new javax.swing.JCheckBox();
        jCheckBoxC128ScreenMem = new javax.swing.JCheckBox();
        jCheckBoxC128Color = new javax.swing.JCheckBox();
        jCheckBoxC128BasicRom = new javax.swing.JCheckBox();
        jCheckBoxC128VicII = new javax.swing.JCheckBox();
        jCheckBoxC128Sid = new javax.swing.JCheckBox();
        jCheckBoxC128MMU = new javax.swing.JCheckBox();
        jCheckBoxC128VDC = new javax.swing.JCheckBox();
        jCheckBoxC128Cia1 = new javax.swing.JCheckBox();
        jCheckBoxC128Cia2 = new javax.swing.JCheckBox();
        jCheckBoxC128DMA = new javax.swing.JCheckBox();
        jCheckBoxC128KernalRom = new javax.swing.JCheckBox();
        jPanelVic20Comm = new javax.swing.JPanel();
        jCheckBoxVic20StackArea = new javax.swing.JCheckBox();
        jCheckBoxVic20ZeroPage = new javax.swing.JCheckBox();
        jCheckBoxVic20_200Area = new javax.swing.JCheckBox();
        jCheckBoxVic20_300Area = new javax.swing.JCheckBox();
        jCheckBoxVic20_400Area = new javax.swing.JCheckBox();
        jCheckBoxVic20Vic = new javax.swing.JCheckBox();
        jCheckBoxVic20Via1 = new javax.swing.JCheckBox();
        jCheckBoxVic20Via2 = new javax.swing.JCheckBox();
        jCheckBoxVic20UserBasic = new javax.swing.JCheckBox();
        jCheckBoxVic20Screen = new javax.swing.JCheckBox();
        jCheckBoxVic20_8kExp1 = new javax.swing.JCheckBox();
        jCheckBoxVic20_8kExp2 = new javax.swing.JCheckBox();
        jCheckBoxVic20_8kExp3 = new javax.swing.JCheckBox();
        jCheckBoxVic20Character = new javax.swing.JCheckBox();
        jCheckBoxVic20Color = new javax.swing.JCheckBox();
        jCheckBoxVic20Block2 = new javax.swing.JCheckBox();
        jCheckBoxVic20Block3 = new javax.swing.JCheckBox();
        jCheckBoxVic20Block4 = new javax.swing.JCheckBox();
        jCheckBoxVic20BasicRom = new javax.swing.JCheckBox();
        jCheckBoxVic20KernalRom = new javax.swing.JCheckBox();
        jPanelPlus4Comm = new javax.swing.JPanel();
        jCheckBoxPlus4ZeroPage = new javax.swing.JCheckBox();
        jCheckBoxPlus4StackArea = new javax.swing.JCheckBox();
        jCheckBoxPlus4_200Area = new javax.swing.JCheckBox();
        jCheckBoxPlus4_300Area = new javax.swing.JCheckBox();
        jCheckBoxPlus4_400Area = new javax.swing.JCheckBox();
        jCheckBoxPlus4_500Area = new javax.swing.JCheckBox();
        jCheckBoxPlus4_600Area = new javax.swing.JCheckBox();
        jCheckBoxPlus4_700Area = new javax.swing.JCheckBox();
        jCheckBoxPlus4ColorArea = new javax.swing.JCheckBox();
        jCheckBoxPlus4VideoArea = new javax.swing.JCheckBox();
        jCheckBoxPlus4BasicRamP = new javax.swing.JCheckBox();
        jCheckBoxPlus4Luminance = new javax.swing.JCheckBox();
        jCheckBoxPlus4ColorBitmap = new javax.swing.JCheckBox();
        jCheckBoxPlus4GraphicData = new javax.swing.JCheckBox();
        jCheckBoxPlus4BasicRamN = new javax.swing.JCheckBox();
        jCheckBoxPlus4BasicRom = new javax.swing.JCheckBox();
        jCheckBoxPlus4BasicExt = new javax.swing.JCheckBox();
        jCheckBoxPlus4Caracter = new javax.swing.JCheckBox();
        jCheckBoxPlus4Acia = new javax.swing.JCheckBox();
        jCheckBoxPlus4_6529B_1 = new javax.swing.JCheckBox();
        jCheckBoxPlus4_6529B_2 = new javax.swing.JCheckBox();
        jCheckBoxPlus4Ted = new javax.swing.JCheckBox();
        jCheckBoxPlus4Kernal = new javax.swing.JCheckBox();
        jPanelDisassembler = new javax.swing.JPanel();
        jLabelAutoComment = new javax.swing.JLabel();
        jComboBoxAssembler = new javax.swing.JComboBox<>();
        jTabbedPaneAssembler = new javax.swing.JTabbedPane();
        jScrollPaneDasm = new javax.swing.JScrollPane();
        jDasmPanel = new sw_emulator.swing.JDasmPanel();
        jScrollPaneTMPx = new javax.swing.JScrollPane();
        jTmpxPanel = new sw_emulator.swing.JTmpxPanel();
        jScrollPaneCa65 = new javax.swing.JScrollPane();
        jCa65Panel = new sw_emulator.swing.JCa65Panel();
        jScrollPaneAcme = new javax.swing.JScrollPane();
        jAcmePanel = new sw_emulator.swing.JAcmePanel();
        jScrollPaneKickAssembler = new javax.swing.JScrollPane();
        jPanelKickAssembler = new javax.swing.JPanel();
        jLabelKickLabelDeclaration = new javax.swing.JLabel();
        jRadioButtonKickLabelNameColon = new javax.swing.JRadioButton();
        jScrollPaneKickLabelNameColon = new javax.swing.JScrollPane();
        jTextPaneKickLabelNameColon = new javax.swing.JTextPane();
        jLabelKickByteDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotByte = new javax.swing.JRadioButton();
        jScrollPaneKickDotByte = new javax.swing.JScrollPane();
        jTextPaneKickDotByte = new javax.swing.JTextPane();
        jLabelKickWordDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotWord = new javax.swing.JRadioButton();
        jScrollPaneKickDotWord = new javax.swing.JScrollPane();
        jTextPaneKickDotWord = new javax.swing.JTextPane();
        jLabelKickStartingDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotCpuUndStarting = new javax.swing.JRadioButton();
        jScrollPaneKickDotCpuUndStarting = new javax.swing.JScrollPane();
        jTextPaneKickDotCpuUndStarting = new javax.swing.JTextPane();
        jLabelKickCommentDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDoubleBarComment = new javax.swing.JRadioButton();
        jScrollPaneKickDoubleBarComment = new javax.swing.JScrollPane();
        jTextPaneKickDoubleBarComment = new javax.swing.JTextPane();
        jLabelKickOriginDeclaration = new javax.swing.JLabel();
        jRadioButtonKickAsterixOrigin = new javax.swing.JRadioButton();
        jScrollPaneKickAsterixOrigin = new javax.swing.JScrollPane();
        jTextPaneKickAsterixOrigin = new javax.swing.JTextPane();
        jRadioButtonKickDotPcOrigin = new javax.swing.JRadioButton();
        jScrollPaneKickDotPcOrigin = new javax.swing.JScrollPane();
        jTextPaneKickDotPcOrigin = new javax.swing.JTextPane();
        jLabelKickBlockCommentDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDoubleBarBlockComment = new javax.swing.JRadioButton();
        jScrollPaneKickDoubleBarBlockComment = new javax.swing.JScrollPane();
        jTextPaneKickDoubleBarBlockComment = new javax.swing.JTextPane();
        jRadioButtonKickCstyleBlockComment = new javax.swing.JRadioButton();
        jScrollPaneKickCstyleBlockComment = new javax.swing.JScrollPane();
        jTextPaneKickCstyleBlockComment = new javax.swing.JTextPane();
        jRadioButtonDasmSharpIfPBlockComment = new javax.swing.JRadioButton();
        jScrollPaneDasmSharpIfPBlockComment = new javax.swing.JScrollPane();
        jTextPaneDasmSharpIfPBlockComment = new javax.swing.JTextPane();
        jLabelKickMultiSpriteDeclaration = new javax.swing.JLabel();
        jLabelKickMonoSpriteDeclaration = new javax.swing.JLabel();
        jRadioButtonKickByteHexMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonKickByteHexMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneKickByteHexMultiSprite = new javax.swing.JScrollPane();
        jTextPaneKickByteHexMultiSprite = new javax.swing.JTextPane();
        jScrollPaneKickByteHexMonoSprite = new javax.swing.JScrollPane();
        jTextPaneKickByteHexMonoSprite = new javax.swing.JTextPane();
        jRadioButtonKickByteBinMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonKickByteBinMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneKickByteBinMultiSprite = new javax.swing.JScrollPane();
        jTextPaneKickByteBinMultiSprite = new javax.swing.JTextPane();
        jScrollPaneKickByteBinMonoSprite = new javax.swing.JScrollPane();
        jTextPaneKickByteBinMonoSprite = new javax.swing.JTextPane();
        jRadioButtonKickMacroHexMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonKickMacroHexMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneKickMacroHexMultiSprite = new javax.swing.JScrollPane();
        jTextPaneKickMacroHexMultiSprite = new javax.swing.JTextPane();
        jScrollPaneKickMacroHexMonoSprite = new javax.swing.JScrollPane();
        jTextPaneKickMacroHexMonoSprite = new javax.swing.JTextPane();
        jRadioButtonKickMacroBinMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonKickMacroBinMultiSprite = new javax.swing.JRadioButton();
        jScrollPanekickMacroBinMultiSprite = new javax.swing.JScrollPane();
        jTextPaneKickMacroBinMultiSprite = new javax.swing.JTextPane();
        jScrollPaneKickMacroBinMonoSprite = new javax.swing.JScrollPane();
        jTextPaneKickMacroBinMonoSprite = new javax.swing.JTextPane();
        jLabelKickTribyteDeclaration = new javax.swing.JLabel();
        jRadioButtonKickMacroTribyte = new javax.swing.JRadioButton();
        jScrollPaneKickMacroTribyte = new javax.swing.JScrollPane();
        jTextPaneKickMacroTribyte = new javax.swing.JTextPane();
        jLabelKickLongDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDwordLong = new javax.swing.JRadioButton();
        jScrollPaneKickDwordLong = new javax.swing.JScrollPane();
        jTextPaneKickDwordLong = new javax.swing.JTextPane();
        jLabelKickWordSwappedDeclaration = new javax.swing.JLabel();
        jRadioButtonKickMacroWordSwapped = new javax.swing.JRadioButton();
        jScrollPaneKickMacroWordSwapped = new javax.swing.JScrollPane();
        jTextPaneKickMacroWordSwapped = new javax.swing.JTextPane();
        jLabelKickTextDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotText = new javax.swing.JRadioButton();
        jScrollPaneKickDotText = new javax.swing.JScrollPane();
        jTextPaneKickDotText = new javax.swing.JTextPane();
        jRadioButtonKickDotByByte = new javax.swing.JRadioButton();
        jScrollPaneKickDotByByte = new javax.swing.JScrollPane();
        jTextPaneKickDotByByte = new javax.swing.JTextPane();
        jRadioButtonKickDotWoWord = new javax.swing.JRadioButton();
        jScrollPaneKickDotWoWord = new javax.swing.JScrollPane();
        jTextPaneKickDotWoWord = new javax.swing.JTextPane();
        jRadioButtonKickDotDwLong = new javax.swing.JRadioButton();
        jScrollPaneKickDotDwLong = new javax.swing.JScrollPane();
        jTextPaneKickDotDwLong = new javax.swing.JTextPane();
        jCheckBoxKickColonMacro = new javax.swing.JCheckBox();
        jLabelKickNumTextDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotTextNumText = new javax.swing.JRadioButton();
        jScrollPaneKickDotTextNumText = new javax.swing.JScrollPane();
        jTextPaneKickDotTextNumText = new javax.swing.JTextPane();
        jLabelKickZeroTextDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotTextZeroText = new javax.swing.JRadioButton();
        jScrollPaneKickDotTextZeroText = new javax.swing.JScrollPane();
        jTextPaneKickDotTextZeroText = new javax.swing.JTextPane();
        jLabelKickAddressDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotWordAddress = new javax.swing.JRadioButton();
        jScrollPaneKickDotWordAddress = new javax.swing.JScrollPane();
        jTextPaneKickDotWordAddress = new javax.swing.JTextPane();
        jRadioButtonKickDotWoWordAddress = new javax.swing.JRadioButton();
        jScrollPaneKickDotWoWordAddress = new javax.swing.JScrollPane();
        jTextPaneKickDotWoWordAddress = new javax.swing.JTextPane();
        jLabelKickStackWordDeclaration = new javax.swing.JLabel();
        jRadioButtonKickMacroStackWord = new javax.swing.JRadioButton();
        jScrollPaneKickMacroStackWord = new javax.swing.JScrollPane();
        jTextPaneKickMacroStackWord = new javax.swing.JTextPane();
        jLabelKickHighTextDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotTextHighText = new javax.swing.JRadioButton();
        jScrollPaneKickDotTextHighText = new javax.swing.JScrollPane();
        jTextPaneKickDotTextHighText = new javax.swing.JTextPane();
        jLabelKickShiftTextDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotTextShiftText = new javax.swing.JRadioButton();
        jScrollPaneKickDotTextShiftText = new javax.swing.JScrollPane();
        jTextPaneKickDotTextShiftText = new javax.swing.JTextPane();
        jLabelKickScreenTextDeclaration = new javax.swing.JLabel();
        jLabelKickPetasciiTextDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotTextScreenText = new javax.swing.JRadioButton();
        jRadioButtonKickDotTextPetasciiText = new javax.swing.JRadioButton();
        jScrollPaneKickDotTextScreenText = new javax.swing.JScrollPane();
        ScreenjTextPaneKickDotTextScreenText = new javax.swing.JTextPane();
        jScrollPaneKickDotTextPetasciiText = new javax.swing.JScrollPane();
        jTextPaneKickDotTextPetasciiText = new javax.swing.JTextPane();
        jScrollPaneTass64 = new javax.swing.JScrollPane();
        jPanelTass64 = new javax.swing.JPanel();
        jLabelTass64StartingDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64DotCpuAStarting = new javax.swing.JRadioButton();
        jScrollPaneDasmTass64DotCpuAStarting = new javax.swing.JScrollPane();
        jTextPaneTass64DotCpuAStarting = new javax.swing.JTextPane();
        jLabelTass64OriginDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64AsterixOrigin = new javax.swing.JRadioButton();
        jScrollPaneTass64ASterixOrigin = new javax.swing.JScrollPane();
        jTextPaneTass64AsterixOrigin = new javax.swing.JTextPane();
        jLabelTass64CommentDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64SemicolonComment = new javax.swing.JRadioButton();
        jScrollPaneTass64SemicolonComment = new javax.swing.JScrollPane();
        jTextPaneTass64SemicolonComment = new javax.swing.JTextPane();
        jLabelTass64BlockCommentDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64SemicolonBlockComment = new javax.swing.JRadioButton();
        jScrollPaneTass64SemicolonBlockComment = new javax.swing.JScrollPane();
        jTextPaneTass64SemicolonBlockComment = new javax.swing.JTextPane();
        jRadioButtontass64DotIfFiBlockComment = new javax.swing.JRadioButton();
        jScrollPaneTass64DotIfFiBlockComment = new javax.swing.JScrollPane();
        jTextPaneTass664DotIfFiBlockComment1 = new javax.swing.JTextPane();
        jRadioButtonTass64DotCommentBlockComment = new javax.swing.JRadioButton();
        jScrollPaneTass64DotComment = new javax.swing.JScrollPane();
        jTextPaneTass64DotCommentBlockComment = new javax.swing.JTextPane();
        jLabelTass64LabelDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64LabelNameColon = new javax.swing.JRadioButton();
        jScrollPaneTass64LabelName = new javax.swing.JScrollPane();
        jTextPaneTass64LabelNameColon = new javax.swing.JTextPane();
        jLabelTass64WordDeclaration = new javax.swing.JLabel();
        jLabelTass64ByteDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64DotByte = new javax.swing.JRadioButton();
        jRadioButtonTass64DotWord = new javax.swing.JRadioButton();
        jScrollPaneTass64DotWord = new javax.swing.JScrollPane();
        jTextPaneTass64DotWord = new javax.swing.JTextPane();
        jScrollPaneTass64DotByte = new javax.swing.JScrollPane();
        jTextPaneTass64DotByte = new javax.swing.JTextPane();
        jRadioButtonTass64DotCharByte = new javax.swing.JRadioButton();
        jRadioButtonTass64DotSintWord = new javax.swing.JRadioButton();
        jScrollPaneTass64DotSintWord = new javax.swing.JScrollPane();
        jTextPaneTass64DotSintWord = new javax.swing.JTextPane();
        jScrollPaneTass64DotCharByte = new javax.swing.JScrollPane();
        jTextPaneTass64DotCharByte = new javax.swing.JTextPane();
        jLabelTass64MonoSpriteDeclaration = new javax.swing.JLabel();
        jLabelTass64MultiSpriteDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64ByteHexMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonTass64ByteHexMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneTass64ByteHexMultiSprite = new javax.swing.JScrollPane();
        TmpxPaneTass64ByteHexMultiSprite = new javax.swing.JTextPane();
        jScrollPaneTass64ByteHexMonoSprite = new javax.swing.JScrollPane();
        jTextPaneTass64ByteHexMonoSprite = new javax.swing.JTextPane();
        jRadioButtonTass64ByteBinMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonTass64ByteBinMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneTass64ByteBinMultiSprite = new javax.swing.JScrollPane();
        jTextPaneTass64ByteBinMultiSprite = new javax.swing.JTextPane();
        jScrollPaneTass64ByteBinMonoSprite = new javax.swing.JScrollPane();
        jTextPaneTass64ByteBinMonoSprite = new javax.swing.JTextPane();
        jRadioButtonTass64MacroHexMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonTass64MacroHexMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneTass64MacroHexMultiSprite = new javax.swing.JScrollPane();
        jTextPaneTass64MacroHexMultiSprite = new javax.swing.JTextPane();
        jScrollPaneTass64MacroHexMonoSprite = new javax.swing.JScrollPane();
        jTextPaneTass64MacroHexMonoSprite = new javax.swing.JTextPane();
        jRadioButtonTass64MacroBinMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonTass64MacroBinMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneTass64MacroBinMultiSprite = new javax.swing.JScrollPane();
        jTextPaneTass64MacroBinMultiSprite = new javax.swing.JTextPane();
        jScrollPaneTass64MacroBinMonoSprite = new javax.swing.JScrollPane();
        jTextPaneTass64MacroBinMonoSprite = new javax.swing.JTextPane();
        jLabelTass64TribyteDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64DotLongTribyte = new javax.swing.JRadioButton();
        jScrollPaneTass64DotLongTribyte = new javax.swing.JScrollPane();
        jTextPaneTass64DotLongTribyte = new javax.swing.JTextPane();
        jRadioButtonTass64DotLintTribyte = new javax.swing.JRadioButton();
        jScrollPaneTass64DotLintTribyte = new javax.swing.JScrollPane();
        jTextPaneTass64DotLintTribyte = new javax.swing.JTextPane();
        jLabelTass64LongDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64DotDwordLong = new javax.swing.JRadioButton();
        jScrollPaneTass64DotDwordLong = new javax.swing.JScrollPane();
        jTextPaneTass64DotDwordLong = new javax.swing.JTextPane();
        jRadioButtonTass64DotDlintLong = new javax.swing.JRadioButton();
        jScrollPaneTass64DotDlintLong = new javax.swing.JScrollPane();
        jTextPaneTass64DotDlintLong = new javax.swing.JTextPane();
        jLabelTass65WordSwappedDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64MacroWordSwapped = new javax.swing.JRadioButton();
        jScrollPaneTass64MacroWordSwapped = new javax.swing.JScrollPane();
        jTextPaneTass64MacroWordSwapped = new javax.swing.JTextPane();
        jLabelTass65TextDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64DotText = new javax.swing.JRadioButton();
        jScrollPaneTass64DotText = new javax.swing.JScrollPane();
        jTextPaneTass64DotText = new javax.swing.JTextPane();
        jLabelTass64NumTextDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64DotPTextNumText = new javax.swing.JRadioButton();
        jScrollPaneTass64DotPTextNumText = new javax.swing.JScrollPane();
        jTextPaneTass64DotPTextNumText = new javax.swing.JTextPane();
        jRadioButtonTass64DotTextPNumText = new javax.swing.JRadioButton();
        jScrollPaneTass64DotTextPNumChar = new javax.swing.JScrollPane();
        jTextPaneTass64DotTextPNumChar = new javax.swing.JTextPane();
        jLabelTass64ZeroTextDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64DotNullZeroText = new javax.swing.JRadioButton();
        jScrollPaneTass64DotNullZeroText = new javax.swing.JScrollPane();
        jTextPaneTass64DotNullZeroText = new javax.swing.JTextPane();
        jRadioButtonTass64DotTextNZeroText = new javax.swing.JRadioButton();
        jScrollPaneTass64DotTextNZeroText = new javax.swing.JScrollPane();
        jTextPaneTass64DotTextNZeroText = new javax.swing.JTextPane();
        jLabelTass64AddressDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64DotAddrAddress = new javax.swing.JRadioButton();
        jScrollPaneTass64DotAddrAddress = new javax.swing.JScrollPane();
        jTextPaneTass64DotAddrAddress = new javax.swing.JTextPane();
        jLabelTass64StackWordDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64DotRtaStackWord = new javax.swing.JRadioButton();
        jScrollPaneTass64DotRtaStackWord = new javax.swing.JScrollPane();
        jTextPaneTass64DotRtaStackWord = new javax.swing.JTextPane();
        jLabelTass64HighTextDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64DotShiftHighText = new javax.swing.JRadioButton();
        jScrollPaneTass64DotShiftHighText = new javax.swing.JScrollPane();
        jTextPaneTass64DotShiftHighText = new javax.swing.JTextPane();
        jRadioButtonTass64DotTextSHighText = new javax.swing.JRadioButton();
        jScrollPaneTass64DotTextSHighText = new javax.swing.JScrollPane();
        jTextPaneTass64DotTextSHighText = new javax.swing.JTextPane();
        jLabelTass64ShiftTextDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64DotShiftlShiftText = new javax.swing.JRadioButton();
        jScrollPaneTass64DotShiftlShiftText = new javax.swing.JScrollPane();
        jTextPaneTass64DotShiftlShiftText = new javax.swing.JTextPane();
        jRadioButtonTass64DotTextLShiftText = new javax.swing.JRadioButton();
        jScrollPaneTass64DotTextLShiftText = new javax.swing.JScrollPane();
        jTextPaneTass64DotTextLShiftText = new javax.swing.JTextPane();
        jLabelTass65ScreenTextDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64DotTextScreenText = new javax.swing.JRadioButton();
        jScrollPaneTass64DotTextScreenText = new javax.swing.JScrollPane();
        jTextPaneTass64DotTextScreenText = new javax.swing.JTextPane();
        jLabelTass65PetasciiTextDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64DotTextPetasciiText = new javax.swing.JRadioButton();
        jScrollPaneTass64DotTextPetasciiText = new javax.swing.JScrollPane();
        jTextPaneTass64DotTextPetasciiText = new javax.swing.JTextPane();
        jScrollPaneGlass = new javax.swing.JScrollPane();
        jPanelGlass = new javax.swing.JPanel();
        jLabelGlassLabelDeclaration = new javax.swing.JLabel();
        jRadioButtonGlassLabelName = new javax.swing.JRadioButton();
        jScrollPaneGlassByte = new javax.swing.JScrollPane();
        jTextPaneGlassLabelName = new javax.swing.JTextPane();
        jLabelGlassByteDeclaration = new javax.swing.JLabel();
        jRadioButtonGlassDotByte = new javax.swing.JRadioButton();
        jScrollPaneGlassWord = new javax.swing.JScrollPane();
        jTextPaneTmpxDotByte1 = new javax.swing.JTextPane();
        jLabelTmpxWordDeclaration1 = new javax.swing.JLabel();
        jRadioButtonTmpxDotWord1 = new javax.swing.JRadioButton();
        jScrollPaneGlassDotWord = new javax.swing.JScrollPane();
        jTextPaneTmpxDotWord1 = new javax.swing.JTextPane();
        jLabelGlassCommentDeclaration = new javax.swing.JLabel();
        jRadioButtonTmpxSemicolonComment1 = new javax.swing.JRadioButton();
        jScrollPaneTmpxSemicolonComment1 = new javax.swing.JScrollPane();
        jTextPaneTmpxSemicolonComment1 = new javax.swing.JTextPane();
        jLabelTmpxBlockCommentDeclaration1 = new javax.swing.JLabel();
        jRadioButtonTmpxSemicolonBlockComment1 = new javax.swing.JRadioButton();
        jScrollPaneTmpxSemicolonBlockComment1 = new javax.swing.JScrollPane();
        jTextPaneTmpxSemicolonBlockComment1 = new javax.swing.JTextPane();
        jLabelGlassOriginDeclaration = new javax.swing.JLabel();
        jRadioButtonGlassAsterixOrigin = new javax.swing.JRadioButton();
        jScrollPaneTmpxAsterixOrigin1 = new javax.swing.JScrollPane();
        jTextPaneGlassAsterixOrigin = new javax.swing.JTextPane();
        jRadioButtonTmpxDotIfBlockComment1 = new javax.swing.JRadioButton();
        jScrollPaneTmpxDotIfBlockComment1 = new javax.swing.JScrollPane();
        jTextPaneTmpxDotIfBlockComment1 = new javax.swing.JTextPane();
        jLabelGlassStartingDeclaration = new javax.swing.JLabel();
        jRadioButtonGlassFakeStarting = new javax.swing.JRadioButton();
        jScrollPaneGlassFakeStarting = new javax.swing.JScrollPane();
        jTextPaneGlassFakeStarting = new javax.swing.JTextPane();
        jLabelTmpxMonoSpriteDeclaration1 = new javax.swing.JLabel();
        jLabelTmpxMultiSpriteDeclaration1 = new javax.swing.JLabel();
        jRadioButtonTmpxByteHexMonoSprite1 = new javax.swing.JRadioButton();
        jRadioButtonTmpxByteHexMultiSprite1 = new javax.swing.JRadioButton();
        jScrollPaneTmpxByteHexMultiSprite1 = new javax.swing.JScrollPane();
        TmpxPaneTmpxByteHexMultiSprite1 = new javax.swing.JTextPane();
        jScrollPaneTmpxByteHexMonoSprite1 = new javax.swing.JScrollPane();
        jTextPaneTmpxByteHexMonoSprite1 = new javax.swing.JTextPane();
        jRadioButtonTmpxByteBinMonoSprite1 = new javax.swing.JRadioButton();
        jRadioButtonTmpxByteBinMultiSprite1 = new javax.swing.JRadioButton();
        jScrollPaneTmpxByteBinMultiSprite1 = new javax.swing.JScrollPane();
        jTextPaneTmpxByteBinMultiSprite1 = new javax.swing.JTextPane();
        jScrollPaneTmpxByteBinMonoSprite1 = new javax.swing.JScrollPane();
        jTextPaneTmpxByteBinMonoSprite1 = new javax.swing.JTextPane();
        jRadioButtonTmpxMacroHexMonoSprite1 = new javax.swing.JRadioButton();
        jRadioButtonTmpxMacroHexMultiSprite1 = new javax.swing.JRadioButton();
        jScrollPaneTmpxMacroHexMultiSprite1 = new javax.swing.JScrollPane();
        jTextPaneTmpxMacroHexMultiSprite1 = new javax.swing.JTextPane();
        jScrollPaneTmpxMacroHexMonoSprite1 = new javax.swing.JScrollPane();
        jTextPaneTmpxMacroHexMonoSprite1 = new javax.swing.JTextPane();
        jRadioButtonTmpxMacroBinMonoSprite1 = new javax.swing.JRadioButton();
        jRadioButtonTmpxMacroBinMultiSprite1 = new javax.swing.JRadioButton();
        jScrollPaneTmpxMacroBinMultiSprite1 = new javax.swing.JScrollPane();
        jTextPaneTmpxMacroBinMultiSprite1 = new javax.swing.JTextPane();
        jScrollPaneTmpxMacroBinMonoSprite1 = new javax.swing.JScrollPane();
        jTextPaneTmpxMacroBinMonoSprite1 = new javax.swing.JTextPane();
        jLabelTmpxTribyteDeclaration1 = new javax.swing.JLabel();
        jRadioButtonTmpxMacroTribyte1 = new javax.swing.JRadioButton();
        jScrollPaneTmpxMacroTribyte1 = new javax.swing.JScrollPane();
        jTextPaneTmpxMacroTribyte1 = new javax.swing.JTextPane();
        jLabelTmpxLongDeclaration1 = new javax.swing.JLabel();
        jRadioButtonTmpxMacroLong1 = new javax.swing.JRadioButton();
        jScrollPaneTmpxMacroLong1 = new javax.swing.JScrollPane();
        jTextPaneTmpxMacroLong1 = new javax.swing.JTextPane();
        jLabelTmpxWordSwappedDeclaration1 = new javax.swing.JLabel();
        jRadioButtonTmpxMacroWordSwapped1 = new javax.swing.JRadioButton();
        jScrollPaneTmpxMacroWordSwapped1 = new javax.swing.JScrollPane();
        jTextPaneTmpxMacroWordSwapped1 = new javax.swing.JTextPane();
        jLabelTmpxTextDeclaration1 = new javax.swing.JLabel();
        jRadioButtonTmpxDotText1 = new javax.swing.JRadioButton();
        jScrollPaneTmpxDotText1 = new javax.swing.JScrollPane();
        jTextPaneTmpxDotText1 = new javax.swing.JTextPane();
        jLabelTmpxNumTextDeclaration1 = new javax.swing.JLabel();
        jRadioButtonTmpxPTextNumText1 = new javax.swing.JRadioButton();
        jScrollPaneTmpxDotTextNumText1 = new javax.swing.JScrollPane();
        jTextPaneTmpxDotTextNumText1 = new javax.swing.JTextPane();
        jLabelTmpxZeroTextDeclaration1 = new javax.swing.JLabel();
        jRadioButtonTmpxDotNullZeroText1 = new javax.swing.JRadioButton();
        jScrollPaneTmpxDotNullZeroText1 = new javax.swing.JScrollPane();
        jTextPaneTmpxDotNullZeroText1 = new javax.swing.JTextPane();
        jLabelTmpxAddressDeclaration1 = new javax.swing.JLabel();
        jRadioButtonTmpxDotAddrAddress1 = new javax.swing.JRadioButton();
        jScrollPaneTmpxDotAddrAddress1 = new javax.swing.JScrollPane();
        jTextPaneTmpxDotAddrAddress1 = new javax.swing.JTextPane();
        jLabelTmpxStackWordDeclaration1 = new javax.swing.JLabel();
        jRadioButtonTmpxDotRdaStackWord1 = new javax.swing.JRadioButton();
        jScrollPaneTmpxDotRtaStackWord1 = new javax.swing.JScrollPane();
        jTextPaneTmpxDotRtaStackWord1 = new javax.swing.JTextPane();
        jLabelTmpxHighTextDeclaration1 = new javax.swing.JLabel();
        jRadioButtonTmpxDotShiftHighText1 = new javax.swing.JRadioButton();
        jScrollPaneTmpxDotShiftHighText1 = new javax.swing.JScrollPane();
        jTextPaneTmpxDotShiftHighText1 = new javax.swing.JTextPane();
        jLabelTmpxShiftTextDeclaration1 = new javax.swing.JLabel();
        jRadioButtonTmpxDotShiflShiftText1 = new javax.swing.JRadioButton();
        jScrollPaneTmpxDotShiftlShiftText1 = new javax.swing.JScrollPane();
        jTextPaneTmpxDotShiflShiftText1 = new javax.swing.JTextPane();
        jLabelTmpxScreenTextDeclaration1 = new javax.swing.JLabel();
        jRadioButtonTmpxDotScreenText1 = new javax.swing.JRadioButton();
        jScrollPaneTmpxDotScreenText1 = new javax.swing.JScrollPane();
        jTextPaneTmpxDotScreenText1 = new javax.swing.JTextPane();
        jLabelTmpxPetasciiTextDeclaration1 = new javax.swing.JLabel();
        jRadioButtonTmpxDotPetasciiText1 = new javax.swing.JRadioButton();
        jScrollPaneTmpxDotPetasciiText1 = new javax.swing.JScrollPane();
        jTextPaneTmpxDotPetasciiText1 = new javax.swing.JTextPane();
        jPanelLook = new javax.swing.JPanel();
        jRadioButtonLookJava = new javax.swing.JRadioButton();
        jRadioButtonLookMac = new javax.swing.JRadioButton();
        jRadioButtonLookMetal = new javax.swing.JRadioButton();
        jRadioButtonLookWin = new javax.swing.JRadioButton();
        jRadioButtonLookGtk = new javax.swing.JRadioButton();
        jRadioButtonLookNimbus = new javax.swing.JRadioButton();
        jLabelLook = new javax.swing.JLabel();
        jLabelTheme = new javax.swing.JLabel();
        jRadioButtonOcean = new javax.swing.JRadioButton();
        jRadioButtonSteel = new javax.swing.JRadioButton();
        jRadioButtonAqua = new javax.swing.JRadioButton();
        jRadioButtonCharcoal = new javax.swing.JRadioButton();
        jRadioButtonHighContrast = new javax.swing.JRadioButton();
        jRadioButtonEmerald = new javax.swing.JRadioButton();
        jRadioButtonRuby = new javax.swing.JRadioButton();
        jRadioButtonLookCWin = new javax.swing.JRadioButton();
        jLabelBracket = new javax.swing.JLabel();
        jRadioButtonLookSynth = new javax.swing.JRadioButton();
        jLabelArrow = new javax.swing.JLabel();
        jScrollPaneList = new javax.swing.JScrollPane();
        jListLaf = new javax.swing.JList<>();
        jLabelFlatLaf = new javax.swing.JLabel();
        jPanelDn = new javax.swing.JPanel();
        jButtonLoad = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Options");

        jPanelOption.setLayout(new java.awt.BorderLayout());

        jTabbedPaneOption.setFocusable(false);
        jTabbedPaneOption.setName("Options"); // NOI18N
        jTabbedPaneOption.setPreferredSize(new java.awt.Dimension(831, 842));

        jScrollPanePreview.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPanePreview.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jLabelIllegalOpcodeStyle.setText("Illegal opcode style:");

        buttonGroupIllegalOpcodeStyle.add(jRadioButtonStyle1);
        jRadioButtonStyle1.setSelected(true);
        jRadioButtonStyle1.setText("ANE, ISB, SHY, SHS");
        jRadioButtonStyle1.setToolTipText("Mode use by John west and Marko M\"akel\"a");
        jRadioButtonStyle1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonStyle1ItemStateChanged(evt);
            }
        });

        buttonGroupIllegalOpcodeStyle.add(jRadioButtonStyle2);
        jRadioButtonStyle2.setText("AXA, ISC, SYH, SSH");
        jRadioButtonStyle2.setToolTipText("Mode use by Juergen Buchmueller");
        jRadioButtonStyle2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonStyle2ItemStateChanged(evt);
            }
        });

        buttonGroupIllegalOpcodeStyle.add(jRadioButtonStyle3);
        jRadioButtonStyle3.setText("XAA, INS, SAY, TAS");
        jRadioButtonStyle3.setToolTipText("Mode use by Adam Vardy");
        jRadioButtonStyle3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonStyle3ItemStateChanged(evt);
            }
        });

        jLabelLanguage.setText("Language of comments:");

        buttonGroupLanguage.add(jRadioButtonLangEnglish);
        jRadioButtonLangEnglish.setSelected(true);
        jRadioButtonLangEnglish.setText("English");
        jRadioButtonLangEnglish.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLangEnglishItemStateChanged(evt);
            }
        });

        buttonGroupLanguage.add(jRadioButtonLangItalian);
        jRadioButtonLangItalian.setText("Italian");
        jRadioButtonLangItalian.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLangItalianItemStateChanged(evt);
            }
        });

        jCheckBoxEraseDComm.setSelected(true);
        jCheckBoxEraseDComm.setText("Erase DASM automatic comment when mark a memory location as Data");
        jCheckBoxEraseDComm.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxEraseDCommItemStateChanged(evt);
            }
        });

        jCheckBoxOpcodeFormattingPreview.setSelected(true);
        jCheckBoxOpcodeFormattingPreview.setText("Opcode formatting as Upper case (NOP, JMP, ...) instead of Lower case (nop, jmp, ...) for preview");
        jCheckBoxOpcodeFormattingPreview.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxOpcodeFormattingPreviewItemStateChanged(evt);
            }
        });

        jCheckBoxUndefinedCode.setSelected(true);
        jCheckBoxUndefinedCode.setText("Undefined code/data used as code instead of data");
        jCheckBoxUndefinedCode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxUndefinedCodeItemStateChanged(evt);
            }
        });

        jSpinnerMaxLength.setModel(new javax.swing.SpinnerNumberModel(25, 5, 40, 1));
        jSpinnerMaxLength.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaxLengthStateChanged(evt);
            }
        });

        jLabelMaxLength.setText("Max lenght of label (some assembler has a limit):");

        jLabelAggregate.setText("Aggregate up to X values on a data row of type:");

        jSpinnerMaxByteAggregate.setModel(new javax.swing.SpinnerNumberModel(8, 2, 8, 1));
        jSpinnerMaxByteAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaxByteAggregateStateChanged(evt);
            }
        });

        jLabelPSIDinitsong.setText("PSID init songs label:");

        jTextFieldInitSongs.setText("initSongs");
        jTextFieldInitSongs.setToolTipText("Label to use for the PSID starting init routine");
        jTextFieldInitSongs.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldInitSongsFocusLost(evt);
            }
        });

        jLabelPSIDplaysound.setText("PSID play sound label:");

        jTextFieldPlaySound.setText("playSound");
        jTextFieldPlaySound.setToolTipText("Label to use for PSID play sound routine");
        jTextFieldPlaySound.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldPlaySoundFocusLost(evt);
            }
        });

        jLabelSIDfreqLo.setText("SID frequency table low label:");

        jTextFieldSidFreqLo.setText("frequencyLo");
        jTextFieldSidFreqLo.setToolTipText("Label to use for low address of frequency table");
        jTextFieldSidFreqLo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldSidFreqLoFocusLost(evt);
            }
        });

        jLabelSIDfreqHi.setText("SID frequency table high label:");

        jTextFieldSidFreqHi.setText("frequencyHi");
        jTextFieldSidFreqHi.setToolTipText("Label to use for high address of frequenct table");
        jTextFieldSidFreqHi.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldSidFreqHiFocusLost(evt);
            }
        });

        jCheckBoxOpcodeFormattingSource.setText("Opcode formatting as Upper case (NOP, JMP, ...) instead of Lower case (nop, jmp, ...) for source");
        jCheckBoxOpcodeFormattingSource.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxOpcodeFormattingSourceItemStateChanged(evt);
            }
        });

        jCheckBoxErasePlus.setSelected(true);
        jCheckBoxErasePlus.setText("Erase relative + address when mark a memory location as Data");
        jCheckBoxErasePlus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxErasePlusItemStateChanged(evt);
            }
        });

        jLabelInstrSep.setText("Instruction separator in start of row of source:");

        jSpinnerInstrSpaces.setModel(new javax.swing.SpinnerNumberModel(6, 0, 20, 1));
        jSpinnerInstrSpaces.setToolTipText("At least 1 space or 1 tabs is necessary");
        jSpinnerInstrSpaces.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerInstrSpacesStateChanged(evt);
            }
        });

        jSpinnerInstrTabs.setModel(new javax.swing.SpinnerNumberModel(0, 0, 8, 1));
        jSpinnerInstrTabs.setToolTipText("At least 1 space or 1 tabs is necessary");
        jSpinnerInstrTabs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerInstrTabsStateChanged(evt);
            }
        });

        jLabelInstrSpace.setText("Spaces:");

        jLabelInstrTabs.setText("Tabs:");

        jLabelDataSep.setText("Data separator in start of row of source:");

        jLabelDataSpace.setText("Spaces:");

        jSpinnerDataSpaces.setModel(new javax.swing.SpinnerNumberModel(2, 0, 20, 1));
        jSpinnerDataSpaces.setToolTipText("At least 1 space or 1 tabs is necessary");
        jSpinnerDataSpaces.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerDataSpacesStateChanged(evt);
            }
        });

        jLabelDataTabs.setText("Tabs:");

        jSpinnerDataTabs.setModel(new javax.swing.SpinnerNumberModel(0, 0, 8, 1));
        jSpinnerDataTabs.setToolTipText("At least 1 space or 1 tabs is necessary");
        jSpinnerDataTabs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerDataTabsStateChanged(evt);
            }
        });

        jCheckBoxLabel.setText("Label is on a separated line from instruction");
        jCheckBoxLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxLabelActionPerformed(evt);
            }
        });

        jLabelMaxByte.setText("Byte:");

        jLabelMaxWord.setText("Word:");

        jSpinnerMaxWordAggregate.setModel(new javax.swing.SpinnerNumberModel(4, 2, 8, 1));
        jSpinnerMaxWordAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaxWordAggregateStateChanged(evt);
            }
        });

        jLabelMaxTribyte.setText("Tribyte:");

        jSpinnerMaxTribyteAggregate.setModel(new javax.swing.SpinnerNumberModel(3, 2, 8, 1));
        jSpinnerMaxTribyteAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaxTribyteAggregateStateChanged(evt);
            }
        });

        jLabelMaxLong.setText("Long:");

        jSpinnerMaxLongAggregate.setModel(new javax.swing.SpinnerNumberModel(4, 2, 8, 1));
        jSpinnerMaxLongAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaxLongAggregateStateChanged(evt);
            }
        });

        jLabelTmpPath.setText("Temp. Path for assembler compilation:");

        jTextFieldTmpPath.setEditable(false);

        jButtonBrowse.setText("Browse");
        jButtonBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseActionPerformed(evt);
            }
        });

        jLabelMaxSwapped.setText("Swapped:");

        jSpinnerMaxSwappedAggregate.setModel(new javax.swing.SpinnerNumberModel(4, 2, 8, 1));
        jSpinnerMaxSwappedAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaxSwappedAggregateStateChanged(evt);
            }
        });

        jLabelMaxText.setText("Text:");

        jSpinnerMaxTextAggregate.setModel(new javax.swing.SpinnerNumberModel(32, 2, 40, 1));
        jSpinnerMaxTextAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaxTextAggregateStateChanged(evt);
            }
        });

        jLabelMaxAddress.setText("Address:");

        jSpinnerMaxAddressAggregate.setModel(new javax.swing.SpinnerNumberModel(4, 2, 8, 1));
        jSpinnerMaxAddressAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaxAddressAggregateStateChanged(evt);
            }
        });

        jLabelMaxStackWord.setText("Stack word:");

        jSpinnerMaxStackWordAggregate.setModel(new javax.swing.SpinnerNumberModel(4, 2, 8, 1));
        jSpinnerMaxStackWordAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaxStackWordAggregateStateChanged(evt);
            }
        });

        jCheckBoxUbEdit.setText("A click on UB column edit the global comment");
        jCheckBoxUbEdit.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxUbEditItemStateChanged(evt);
            }
        });

        jCheckBoxUcEdit.setText("A click on UC column edit the user comment");
        jCheckBoxUcEdit.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxUcEditItemStateChanged(evt);
            }
        });

        jCheckBoxUlEdit.setText("A click on UL column edit the user label");
        jCheckBoxUlEdit.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxUlEditItemStateChanged(evt);
            }
        });

        jCheckBoxDcErase.setText("A click on DC column erase the automatic comment");
        jCheckBoxDcErase.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxDcEraseItemStateChanged(evt);
            }
        });

        jCheckBoxDlErase.setText("A click on DL column erase the automatic label");
        jCheckBoxDlErase.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxDlEraseItemStateChanged(evt);
            }
        });

        jCheckBoxForceCompilation.setText("Force compilation at every modification");
        jCheckBoxForceCompilation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxForceCompilationActionPerformed(evt);
            }
        });

        jLabelLanguage1.setText("Memory value in left panel:");

        buttonGroupMemoryValue.add(jRadioButtonMemoryValueHex);
        jRadioButtonMemoryValueHex.setSelected(true);
        jRadioButtonMemoryValueHex.setText("Hex");
        jRadioButtonMemoryValueHex.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonMemoryValueHexItemStateChanged(evt);
            }
        });

        buttonGroupMemoryValue.add(jRadioButtonMemoryValueChar);
        jRadioButtonMemoryValueChar.setText("Char");
        jRadioButtonMemoryValueChar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonMemoryValueCharItemStateChanged(evt);
            }
        });

        jLabelInstrCSep.setText("Comment separator inside instruction in source:");

        jLabelInstrCSpace.setText("Spaces:");

        jSpinnerInstrCSpaces.setModel(new javax.swing.SpinnerNumberModel(34, 1, 50, 1));
        jSpinnerInstrCSpaces.setToolTipText("");
        jSpinnerInstrCSpaces.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerInstrCSpacesStateChanged(evt);
            }
        });

        jLabelInstrCTabs.setText("Tabs:");

        jSpinnerInstrCTabs.setModel(new javax.swing.SpinnerNumberModel(0, 0, 8, 1));
        jSpinnerInstrCTabs.setToolTipText("");
        jSpinnerInstrCTabs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerInstrCTabsStateChanged(evt);
            }
        });

        jLabelDataCSep.setText("Comment separator inside data in source:");

        jLabelDataCSpace.setText("Spaces:");

        jSpinnerDataCSpaces.setModel(new javax.swing.SpinnerNumberModel(34, 1, 70, 1));
        jSpinnerDataCSpaces.setToolTipText("");
        jSpinnerDataCSpaces.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerDataCSpacesStateChanged(evt);
            }
        });

        jLabelDataCTabs.setText("Tabs:");

        jSpinnerDataCTabs.setModel(new javax.swing.SpinnerNumberModel(0, 0, 8, 1));
        jSpinnerDataCTabs.setToolTipText("");
        jSpinnerDataCTabs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerDataCTabsStateChanged(evt);
            }
        });

        jCheckBoxAllowUtf.setText("Allow UTF character in text/char definitions");
        jCheckBoxAllowUtf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAllowUtfActionPerformed(evt);
            }
        });

        jCheckBoxAllowSIDFreq.setSelected(true);
        jCheckBoxAllowSIDFreq.setText("Use SID frequency catcher:");
        jCheckBoxAllowSIDFreq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAllowSIDFreqActionPerformed(evt);
            }
        });

        jCheckBoxMarkMemory.setSelected(true);
        jCheckBoxMarkMemory.setText("Mark memory");
        jCheckBoxMarkMemory.setToolTipText("Mark the memory as data if they are of a frequency table");
        jCheckBoxMarkMemory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMarkMemoryActionPerformed(evt);
            }
        });

        jCheckBoxSetLabels.setSelected(true);
        jCheckBoxSetLabels.setText("Set labels");
        jCheckBoxSetLabels.setToolTipText("Set the labels for the memory area catched");
        jCheckBoxSetLabels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSetLabelsActionPerformed(evt);
            }
        });

        jCheckBoxSetComment.setSelected(true);
        jCheckBoxSetComment.setText("Set comments");
        jCheckBoxSetComment.setToolTipText("Set comments about A4 frequency");
        jCheckBoxSetComment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSetCommentActionPerformed(evt);
            }
        });

        jCheckBoxNotUsePSID.setText("Did not create PSID labels");
        jCheckBoxNotUsePSID.setToolTipText("Not create the PSID init e play labels");
        jCheckBoxNotUsePSID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxNotUsePSIDActionPerformed(evt);
            }
        });

        jCheckBoxCreatePSID.setSelected(true);
        jCheckBoxCreatePSID.setText("Create PSID heather:");
        jCheckBoxCreatePSID.setToolTipText("For PSID it creates heather. Removing this will break binary recreation from source");
        jCheckBoxCreatePSID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxCreatePSIDActionPerformed(evt);
            }
        });

        jTextAreaHeather.setColumns(20);
        jTextAreaHeather.setRows(5);
        jScrollPaneHeather.setViewportView(jTextAreaHeather);

        buttonGroupHeather.add(jRadioButtonCustom);
        jRadioButtonCustom.setText("Custom (below):");
        jRadioButtonCustom.setToolTipText("Insert the custom text");
        jRadioButtonCustom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCustomItemStateChanged(evt);
            }
        });

        buttonGroupHeather.add(jRadioButtonStandard);
        jRadioButtonStandard.setSelected(true);
        jRadioButtonStandard.setText("Standard");
        jRadioButtonStandard.setToolTipText("Use standard heather with program and version");
        jRadioButtonStandard.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonStandardItemStateChanged(evt);
            }
        });

        buttonGroupHeather.add(jRadioButtonNone);
        jRadioButtonNone.setText("None");
        jRadioButtonNone.setToolTipText("Don't use any heather");
        jRadioButtonNone.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonNoneItemStateChanged(evt);
            }
        });

        jLabelHeather.setText("Source header:");
        jLabelHeather.setToolTipText("");

        jCheckBoxRepositionate.setText("Repositionate memory from preview after compilation");
        jCheckBoxRepositionate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxRepositionateActionPerformed(evt);
            }
        });

        jCheckBoxPedantic.setText("Allow OK result messages for load/save/apply");
        jCheckBoxPedantic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPedanticActionPerformed(evt);
            }
        });

        jCheckBoxVlPatch.setText("A click on VL column allow to patch value directly");
        jCheckBoxVlPatch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVlPatchItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelPreviewLayout = new javax.swing.GroupLayout(jPanelPreview);
        jPanelPreview.setLayout(jPanelPreviewLayout);
        jPanelPreviewLayout.setHorizontalGroup(
            jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                .addComponent(jLabelSIDfreqHi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(222, 222, 222))
                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                .addComponent(jLabelPSIDplaysound, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(222, 222, 222))
                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                .addComponent(jLabelSIDfreqLo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 424, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                .addComponent(jLabelPSIDinitsong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(222, 222, 222))
                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jLabelDataCSep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabelInstrCSep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabelDataSep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabelInstrSep, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(24, 24, 24)
                                                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabelDataCSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabelInstrCSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabelDataSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabelInstrSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(30, 30, 30)
                                                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                                        .addComponent(jSpinnerDataCSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(jLabelDataCTabs))
                                                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                                        .addComponent(jSpinnerInstrCSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(jLabelInstrCTabs))
                                                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jSpinnerDataSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jSpinnerInstrSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabelInstrTabs)
                                                            .addComponent(jLabelDataTabs)))))
                                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                                .addGap(352, 352, 352)
                                                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabelMaxByte, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jLabelMaxTribyte, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                .addComponent(jLabelMaxAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(jLabelMaxSwapped, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                        .addGap(10, 10, 10)
                                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jSpinnerMaxSwappedAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jSpinnerMaxTribyteAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jSpinnerMaxByteAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jSpinnerMaxAddressAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGap(24, 24, 24)
                                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                            .addComponent(jLabelMaxStackWord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addComponent(jLabelMaxText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addComponent(jLabelMaxLong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addComponent(jLabelMaxWord, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(jCheckBoxNotUsePSID, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                                                .addComponent(jCheckBoxMarkMemory)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jCheckBoxSetLabels)))
                                                        .addGap(97, 97, 97)))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jSpinnerMaxWordAggregate)
                                            .addComponent(jSpinnerMaxLongAggregate)
                                            .addComponent(jSpinnerMaxTextAggregate)
                                            .addComponent(jSpinnerInstrCTabs)
                                            .addComponent(jSpinnerDataTabs)
                                            .addComponent(jSpinnerInstrTabs)
                                            .addComponent(jSpinnerMaxStackWordAggregate)
                                            .addComponent(jSpinnerDataCTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabelAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelMaxLength, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                        .addComponent(jLabelTmpPath)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldTmpPath, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonBrowse))
                                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                        .addGap(405, 405, 405)
                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldSidFreqHi, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextFieldSidFreqLo, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextFieldPlaySound, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextFieldInitSongs, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSpinnerMaxLength, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(jCheckBoxAllowSIDFreq, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(332, 332, 332)
                                        .addComponent(jCheckBoxSetComment)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxOpcodeFormattingSource, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxOpcodeFormattingPreview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabelLanguage1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                                            .addComponent(jLabelLanguage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabelIllegalOpcodeStyle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(32, 32, 32)
                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jRadioButtonLangEnglish, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jRadioButtonMemoryValueHex, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jRadioButtonStyle1))
                                        .addGap(46, 46, 46)
                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jRadioButtonMemoryValueChar)
                                            .addComponent(jRadioButtonLangItalian)
                                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                                .addComponent(jRadioButtonStyle2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jRadioButtonStyle3))))
                                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jCheckBoxAllowUtf, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jCheckBoxForceCompilation, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jCheckBoxLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jCheckBoxDlErase, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jCheckBoxDcErase, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jCheckBoxUlEdit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jCheckBoxUbEdit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jCheckBoxUcEdit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jCheckBoxErasePlus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jCheckBoxCreatePSID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jCheckBoxUndefinedCode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jCheckBoxEraseDComm, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
                                            .addComponent(jCheckBoxRepositionate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jCheckBoxPedantic, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jCheckBoxVlPatch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jScrollPaneHeather)
                                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                                .addComponent(jRadioButtonStandard)
                                                .addGap(72, 72, 72)
                                                .addComponent(jRadioButtonNone))
                                            .addComponent(jRadioButtonCustom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabelHeather, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 120, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanelPreviewLayout.setVerticalGroup(
            jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelIllegalOpcodeStyle)
                    .addComponent(jRadioButtonStyle1)
                    .addComponent(jRadioButtonStyle2)
                    .addComponent(jRadioButtonStyle3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelLanguage)
                    .addComponent(jRadioButtonLangEnglish)
                    .addComponent(jRadioButtonLangItalian))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelLanguage1)
                    .addComponent(jRadioButtonMemoryValueHex)
                    .addComponent(jRadioButtonMemoryValueChar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxOpcodeFormattingPreview)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxOpcodeFormattingSource)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxEraseDComm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxErasePlus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxUndefinedCode)
                    .addComponent(jLabelHeather))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxUcEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonStandard)
                    .addComponent(jRadioButtonNone))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxUbEdit)
                    .addComponent(jRadioButtonCustom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                        .addComponent(jCheckBoxUlEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxDcErase)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxDlErase)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxVlPatch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxForceCompilation))
                    .addComponent(jScrollPaneHeather))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxAllowUtf)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxRepositionate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPedantic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxNotUsePSID)
                    .addComponent(jCheckBoxCreatePSID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxAllowSIDFreq)
                    .addComponent(jCheckBoxMarkMemory)
                    .addComponent(jCheckBoxSetLabels)
                    .addComponent(jCheckBoxSetComment))
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelMaxByte)
                            .addComponent(jSpinnerMaxByteAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelMaxWord)
                            .addComponent(jSpinnerMaxWordAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelMaxTribyte)
                            .addComponent(jSpinnerMaxTribyteAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelMaxLong)
                            .addComponent(jSpinnerMaxLongAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelMaxSwapped)
                            .addComponent(jSpinnerMaxSwappedAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelMaxText)
                            .addComponent(jSpinnerMaxTextAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelMaxAddress)
                            .addComponent(jSpinnerMaxAddressAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelMaxStackWord)
                            .addComponent(jSpinnerMaxStackWordAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabelAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerMaxLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMaxLength))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPSIDinitsong)
                    .addComponent(jTextFieldInitSongs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPSIDplaysound)
                    .addComponent(jTextFieldPlaySound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSIDfreqLo)
                    .addComponent(jTextFieldSidFreqLo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSIDfreqHi)
                    .addComponent(jTextFieldSidFreqHi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelInstrSep)
                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelInstrSpace)
                            .addComponent(jSpinnerInstrSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelInstrTabs)
                            .addComponent(jSpinnerInstrTabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelDataSpace)
                            .addComponent(jSpinnerDataSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDataTabs)
                            .addComponent(jSpinnerDataTabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDataSep))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelInstrCSpace)
                            .addComponent(jSpinnerInstrCSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelInstrCTabs)
                            .addComponent(jSpinnerInstrCTabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelInstrCSep))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelDataCSpace)
                            .addComponent(jSpinnerDataCSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDataCTabs)
                            .addComponent(jSpinnerDataCTabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDataCSep))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTmpPath)
                    .addComponent(jTextFieldTmpPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowse))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jScrollPanePreview.setViewportView(jPanelPreview);

        jTabbedPaneOption.addTab("Option", jScrollPanePreview);

        jLabelautocomment.setText("Automatic add comments to those known locations:");

        jCheckBoxC64ZeroPage.setSelected(true);
        jCheckBoxC64ZeroPage.setText("Zero page area ($00..$FF)");
        jCheckBoxC64ZeroPage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64ZeroPageItemStateChanged(evt);
            }
        });

        jCheckBoxC64StackArea.setSelected(true);
        jCheckBoxC64StackArea.setText("Stack area ($100..$1FF)");
        jCheckBoxC64StackArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64StackAreaItemStateChanged(evt);
            }
        });

        jCheckBoxC64_200Area.setSelected(true);
        jCheckBoxC64_200Area.setText("Support area for BASIC/KERNAL part 1 ($200..$2FF)");
        jCheckBoxC64_200Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64_200AreaItemStateChanged(evt);
            }
        });

        jCheckBoxC64_300Area.setSelected(true);
        jCheckBoxC64_300Area.setText("Support area for BASIC/KERNAL part 2 ($300..$3FF)");
        jCheckBoxC64_300Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64_300AreaItemStateChanged(evt);
            }
        });

        jCheckBoxC64ScreenArea.setSelected(true);
        jCheckBoxC64ScreenArea.setText("Screen area ($400..$7FF)");
        jCheckBoxC64ScreenArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64ScreenAreaItemStateChanged(evt);
            }
        });

        jCheckBoxC64FreeArea.setText("BASIC (free) area ($800..$9FFF)");
        jCheckBoxC64FreeArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64FreeAreaItemStateChanged(evt);
            }
        });

        jCheckBoxC64BasicRom.setSelected(true);
        jCheckBoxC64BasicRom.setText("BASIC ROM ($A000..$BFFF)");
        jCheckBoxC64BasicRom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64BasicRomItemStateChanged(evt);
            }
        });

        jCheckBoxC64FreeRam.setSelected(true);
        jCheckBoxC64FreeRam.setText("Free Ram ($C000..$CFFF)");
        jCheckBoxC64FreeRam.setEnabled(false);
        jCheckBoxC64FreeRam.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64FreeRamItemStateChanged(evt);
            }
        });

        jCheckC64BoxVicII.setSelected(true);
        jCheckC64BoxVicII.setText("VIC II chip ($D000..$D3FF)");
        jCheckC64BoxVicII.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckC64BoxVicIIItemStateChanged(evt);
            }
        });

        jCheckC64BoxSid.setSelected(true);
        jCheckC64BoxSid.setText("SID chip ($D400..$D7FF)");
        jCheckC64BoxSid.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckC64BoxSidItemStateChanged(evt);
            }
        });

        jCheckBoxC64Color.setSelected(true);
        jCheckBoxC64Color.setText("Color RAM ($D800..$DBFF)");
        jCheckBoxC64Color.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64ColorItemStateChanged(evt);
            }
        });

        jCheckBoxC64Cia1.setSelected(true);
        jCheckBoxC64Cia1.setText("CIA 1 ($DC00..$DCFF)");
        jCheckBoxC64Cia1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64Cia1ItemStateChanged(evt);
            }
        });

        jCheckBoxC64Cia2.setSelected(true);
        jCheckBoxC64Cia2.setText("CIA 2 ($DD00..$DDFF)");
        jCheckBoxC64Cia2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64Cia2ItemStateChanged(evt);
            }
        });

        jCheckBoxC64KernalRom.setSelected(true);
        jCheckBoxC64KernalRom.setText("KERNAL ROM ($E000..$FFFF)");
        jCheckBoxC64KernalRom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64KernalRomItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelC64CommLayout = new javax.swing.GroupLayout(jPanelC64Comm);
        jPanelC64Comm.setLayout(jPanelC64CommLayout);
        jPanelC64CommLayout.setHorizontalGroup(
            jPanelC64CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelC64CommLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelC64CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jCheckBoxC64ScreenArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64KernalRom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64Cia1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64Color, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckC64BoxSid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckC64BoxVicII, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64FreeRam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64FreeArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64_200Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64StackArea, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64ZeroPage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64_300Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64BasicRom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64Cia2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelC64CommLayout.setVerticalGroup(
            jPanelC64CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelC64CommLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxC64ZeroPage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64StackArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64_200Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64_300Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64ScreenArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64FreeArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64BasicRom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64FreeRam)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckC64BoxVicII)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckC64BoxSid)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64Color)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64Cia1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64Cia2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64KernalRom)
                .addContainerGap(201, Short.MAX_VALUE))
        );

        jTabbedPaneComm.addTab("C64", jPanelC64Comm);

        jCheckBoxC1541ZeroPage.setSelected(true);
        jCheckBoxC1541ZeroPage.setText("Zero page area ($00..$FF)");
        jCheckBoxC1541ZeroPage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541ZeroPageItemStateChanged(evt);
            }
        });

        jCheckBoxC1541StackArea.setSelected(true);
        jCheckBoxC1541StackArea.setText("Stack area ($100..$1FF)");
        jCheckBoxC1541StackArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541StackAreaItemStateChanged(evt);
            }
        });

        jCheckBoxC1541_200Area.setSelected(true);
        jCheckBoxC1541_200Area.setText("Support area for KERNAL  ($200..$2FF)");
        jCheckBoxC1541_200Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541_200AreaItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Via1.setSelected(true);
        jCheckBoxC1541Via1.setText("VIA #1 ($1800..$180F)");
        jCheckBoxC1541Via1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Via1ItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Via2.setSelected(true);
        jCheckBoxC1541Via2.setText("VIA #2 ($1C00..$1C0F)");
        jCheckBoxC1541Via2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Via2ItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Kernal.setSelected(true);
        jCheckBoxC1541Kernal.setText("Kernal ($C000..$FFFF)");
        jCheckBoxC1541Kernal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541KernalItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Buffer0.setText("Buffer #0 ($300..$3FF)");
        jCheckBoxC1541Buffer0.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Buffer0ItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Buffer1.setText("Buffer #1 ($400..$4FF)");
        jCheckBoxC1541Buffer1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Buffer1ItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Buffer2.setText("Buffer #2 ($500..$5FF)");
        jCheckBoxC1541Buffer2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Buffer2ItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Buffer3.setText("Buffer #3 ($600..$6FF)");
        jCheckBoxC1541Buffer3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Buffer3ItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Buffer4.setText("Buffer #4 ($700..$7FF)");
        jCheckBoxC1541Buffer4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Buffer4ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelC1541CommLayout = new javax.swing.GroupLayout(jPanelC1541Comm);
        jPanelC1541Comm.setLayout(jPanelC1541CommLayout);
        jPanelC1541CommLayout.setHorizontalGroup(
            jPanelC1541CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelC1541CommLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelC1541CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCheckBoxC1541Buffer4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Buffer3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Buffer2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Buffer1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Buffer0, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Kernal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Via2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Via1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541_200Area, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541StackArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541ZeroPage, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE))
                .addGap(379, 379, 379))
        );
        jPanelC1541CommLayout.setVerticalGroup(
            jPanelC1541CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelC1541CommLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxC1541ZeroPage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541StackArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541_200Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Buffer0)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Buffer1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Buffer2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Buffer3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Buffer4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Via1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Via2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Kernal)
                .addContainerGap(276, Short.MAX_VALUE))
        );

        jTabbedPaneComm.addTab("C1541", jPanelC1541Comm);

        jCheckBoxC128ZeroPage.setSelected(true);
        jCheckBoxC128ZeroPage.setText("Zero page area ($00..$FF)");
        jCheckBoxC128ZeroPage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128ZeroPageItemStateChanged(evt);
            }
        });

        jCheckBoxC128StackArea.setSelected(true);
        jCheckBoxC128StackArea.setText("Stack area ($100..$1FF)");
        jCheckBoxC128StackArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128StackAreaItemStateChanged(evt);
            }
        });

        jCheckBoxC128_300Area.setSelected(true);
        jCheckBoxC128_300Area.setText("Support area for BASIC/KERNAL part 2 ($300..$3FF)");
        jCheckBoxC128_300Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128_300AreaItemStateChanged(evt);
            }
        });

        jCheckBoxC128_200Area.setSelected(true);
        jCheckBoxC128_200Area.setText("Support area for BASIC/KERNAL part 1 ($200..$2FF)");
        jCheckBoxC128_200Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128_200AreaItemStateChanged(evt);
            }
        });

        jCheckBoxC128ScreenArea.setSelected(true);
        jCheckBoxC128ScreenArea.setText("Screen area ($400..$7E7)");
        jCheckBoxC128ScreenArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128ScreenAreaItemStateChanged(evt);
            }
        });

        jCheckBoxC128UserBasic.setSelected(true);
        jCheckBoxC128UserBasic.setText("User BASIC area ($7E8..$12FF)");
        jCheckBoxC128UserBasic.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128UserBasicItemStateChanged(evt);
            }
        });

        jCheckBoxC128AppProgArea.setText("Application program area ($1300..$1BFF)");
        jCheckBoxC128AppProgArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128AppProgAreaItemStateChanged(evt);
            }
        });

        jCheckBoxC128VideoColor.setText("Video Color ($1C00..$1FFF)");
        jCheckBoxC128VideoColor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128VideoColorItemStateChanged(evt);
            }
        });

        jCheckBoxC128ScreenMem.setText("Screen memory ($2000..$3FFF)");
        jCheckBoxC128ScreenMem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128ScreenMemItemStateChanged(evt);
            }
        });

        jCheckBoxC128Color.setSelected(true);
        jCheckBoxC128Color.setText("Color RAM ($D800..$DBFF)");
        jCheckBoxC128Color.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128ColorItemStateChanged(evt);
            }
        });

        jCheckBoxC128BasicRom.setSelected(true);
        jCheckBoxC128BasicRom.setText("BASIC ROM ($4000..$CFFF)");
        jCheckBoxC128BasicRom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128BasicRomItemStateChanged(evt);
            }
        });

        jCheckBoxC128VicII.setSelected(true);
        jCheckBoxC128VicII.setText("VIC II chip ($D000..$D3FF)");
        jCheckBoxC128VicII.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128VicIIItemStateChanged(evt);
            }
        });

        jCheckBoxC128Sid.setSelected(true);
        jCheckBoxC128Sid.setText("SID chip ($D400..$D4FF)");
        jCheckBoxC128Sid.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128SidItemStateChanged(evt);
            }
        });

        jCheckBoxC128MMU.setSelected(true);
        jCheckBoxC128MMU.setText("MMU ($D500..$D50B)");
        jCheckBoxC128MMU.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128MMUItemStateChanged(evt);
            }
        });

        jCheckBoxC128VDC.setSelected(true);
        jCheckBoxC128VDC.setText("VDC ($D600..$D624)");
        jCheckBoxC128VDC.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128VDCItemStateChanged(evt);
            }
        });

        jCheckBoxC128Cia1.setSelected(true);
        jCheckBoxC128Cia1.setText("CIA 1 ($DC00..$DCFF)");
        jCheckBoxC128Cia1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128Cia1ItemStateChanged(evt);
            }
        });

        jCheckBoxC128Cia2.setSelected(true);
        jCheckBoxC128Cia2.setText("CIA 2 ($DD00..$DDFF)");
        jCheckBoxC128Cia2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128Cia2ItemStateChanged(evt);
            }
        });

        jCheckBoxC128DMA.setSelected(true);
        jCheckBoxC128DMA.setText("DMA Controller ($DF00..$DF0A)");
        jCheckBoxC128DMA.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128DMAItemStateChanged(evt);
            }
        });

        jCheckBoxC128KernalRom.setSelected(true);
        jCheckBoxC128KernalRom.setText("KERNAL ROM ($E000..$FFFF)");
        jCheckBoxC128KernalRom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128KernalRomItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelC128CommLayout = new javax.swing.GroupLayout(jPanelC128Comm);
        jPanelC128Comm.setLayout(jPanelC128CommLayout);
        jPanelC128CommLayout.setHorizontalGroup(
            jPanelC128CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelC128CommLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelC128CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxC128ZeroPage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128StackArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128_200Area, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128_300Area, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128ScreenArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128UserBasic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128AppProgArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128VideoColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128ScreenMem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128BasicRom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128VicII)
                    .addComponent(jCheckBoxC128Sid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128MMU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128VDC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jPanelC128CommLayout.createSequentialGroup()
                .addGroup(jPanelC128CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelC128CommLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jCheckBoxC128Color, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelC128CommLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelC128CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jCheckBoxC128Cia1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxC128Cia2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxC128DMA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxC128KernalRom, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(399, Short.MAX_VALUE))
        );
        jPanelC128CommLayout.setVerticalGroup(
            jPanelC128CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelC128CommLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxC128ZeroPage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128StackArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128_200Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128_300Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128ScreenArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128UserBasic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128AppProgArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128VideoColor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128ScreenMem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128BasicRom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128VicII)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128Sid)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128MMU)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128VDC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128Color)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128Cia1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128Cia2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128DMA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128KernalRom)
                .addContainerGap(76, Short.MAX_VALUE))
        );

        jTabbedPaneComm.addTab("C128", jPanelC128Comm);

        jCheckBoxVic20StackArea.setSelected(true);
        jCheckBoxVic20StackArea.setText("Stack area ($100..$1FF)");
        jCheckBoxVic20StackArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20StackAreaItemStateChanged(evt);
            }
        });

        jCheckBoxVic20ZeroPage.setSelected(true);
        jCheckBoxVic20ZeroPage.setText("Zero page area ($00..$FF)");
        jCheckBoxVic20ZeroPage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20ZeroPageItemStateChanged(evt);
            }
        });

        jCheckBoxVic20_200Area.setSelected(true);
        jCheckBoxVic20_200Area.setText("Support area for BASIC/KERNAL part 1 ($200..$2FF)");
        jCheckBoxVic20_200Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20_200AreaItemStateChanged(evt);
            }
        });

        jCheckBoxVic20_300Area.setSelected(true);
        jCheckBoxVic20_300Area.setText("Support area for BASIC/KERNAL part 2 ($300..$3FF)");
        jCheckBoxVic20_300Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20_300AreaItemStateChanged(evt);
            }
        });

        jCheckBoxVic20_400Area.setSelected(true);
        jCheckBoxVic20_400Area.setText("Support area for BASIC/KERNAL part 3 ($400..$4FF)");
        jCheckBoxVic20_400Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20_400AreaItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Vic.setSelected(true);
        jCheckBoxVic20Vic.setText("VIC ($9000..$900F)");
        jCheckBoxVic20Vic.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20VicItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Via1.setSelected(true);
        jCheckBoxVic20Via1.setText("Via #1 ($9010..$901F)");
        jCheckBoxVic20Via1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20Via1ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Via2.setSelected(true);
        jCheckBoxVic20Via2.setText("Via #2 ($9020..$902F)");
        jCheckBoxVic20Via2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20Via2ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20UserBasic.setText("User BASIC area ($1000..$1DFF)");
        jCheckBoxVic20UserBasic.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20UserBasicItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Screen.setText("Screen memory ($1E00..$1FFF)");
        jCheckBoxVic20Screen.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20ScreenItemStateChanged(evt);
            }
        });

        jCheckBoxVic20_8kExp1.setText("8K expansion block 1 ($2000..$3FFF)");
        jCheckBoxVic20_8kExp1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20_8kExp1ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20_8kExp2.setText("8K expansion block 2 ($4000..$5FFF)");
        jCheckBoxVic20_8kExp2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20_8kExp2ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20_8kExp3.setText("8K expansion block 3 ($6000..$7FFF)");
        jCheckBoxVic20_8kExp3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20_8kExp3ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Character.setText("4K character ($8000..$8FFF)");
        jCheckBoxVic20Character.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20CharacterItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Color.setText("Color RAM ($9400..$97FF)");
        jCheckBoxVic20Color.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20ColorItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Block2.setText("I/O block 2 ($9800..$9BFF)");
        jCheckBoxVic20Block2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20Block2ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Block3.setText("I/O block 3 ($9C00..$9FFF)");
        jCheckBoxVic20Block3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20Block3ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Block4.setText("8K decoded ($A0000..$BFFF)");
        jCheckBoxVic20Block4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20Block4ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20BasicRom.setSelected(true);
        jCheckBoxVic20BasicRom.setText("BASIC ROM ($C0000..$DFFF)");
        jCheckBoxVic20BasicRom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20BasicRomItemStateChanged(evt);
            }
        });

        jCheckBoxVic20KernalRom.setSelected(true);
        jCheckBoxVic20KernalRom.setText("KERNAL ROM ($E0000..$FFFF)");
        jCheckBoxVic20KernalRom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20KernalRomItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelVic20CommLayout = new javax.swing.GroupLayout(jPanelVic20Comm);
        jPanelVic20Comm.setLayout(jPanelVic20CommLayout);
        jPanelVic20CommLayout.setHorizontalGroup(
            jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelVic20CommLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxVic20ZeroPage, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jCheckBoxVic20StackArea, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20Color, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20Via2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20Via1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20Vic, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20Character, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20_8kExp3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20_8kExp2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20_8kExp1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20Screen, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20UserBasic, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20_400Area, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jCheckBoxVic20_300Area, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jCheckBoxVic20_200Area, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(jCheckBoxVic20Block2, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jCheckBoxVic20Block3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20Block4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20BasicRom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20KernalRom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(393, Short.MAX_VALUE))
        );
        jPanelVic20CommLayout.setVerticalGroup(
            jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelVic20CommLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxVic20ZeroPage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20StackArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20_200Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20_300Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20_400Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20UserBasic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Screen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20_8kExp1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20_8kExp2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20_8kExp3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Character)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Vic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Via1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Via2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Color)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Block2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Block3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Block4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20BasicRom, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20KernalRom, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        jTabbedPaneComm.addTab("Vic20", jPanelVic20Comm);

        jCheckBoxPlus4ZeroPage.setSelected(true);
        jCheckBoxPlus4ZeroPage.setText("Zero page area ($00..$FF)");
        jCheckBoxPlus4ZeroPage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4ZeroPageItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4StackArea.setSelected(true);
        jCheckBoxPlus4StackArea.setText("Stack area ($100..$1FF)");
        jCheckBoxPlus4StackArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4StackAreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_200Area.setSelected(true);
        jCheckBoxPlus4_200Area.setText("Support area for BASIC/KERNAL part 1 ($200..$2FF)");
        jCheckBoxPlus4_200Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_200AreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_300Area.setSelected(true);
        jCheckBoxPlus4_300Area.setText("Support area for BASIC/KERNAL part 2 ($300..$3FF)");
        jCheckBoxPlus4_300Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_300AreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_400Area.setSelected(true);
        jCheckBoxPlus4_400Area.setText("Support area for BASIC/KERNAL part 3 ($400..$4FF)");
        jCheckBoxPlus4_400Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_400AreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_500Area.setSelected(true);
        jCheckBoxPlus4_500Area.setText("Support area for BASIC/KERNAL part 4 ($500..$5FF)");
        jCheckBoxPlus4_500Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_500AreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_600Area.setSelected(true);
        jCheckBoxPlus4_600Area.setText("Support area for BASIC/KERNAL part 5 ($600..$6FF)");
        jCheckBoxPlus4_600Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_600AreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_700Area.setSelected(true);
        jCheckBoxPlus4_700Area.setText("Support area for BASIC/KERNAL part 6 ($700..$7FF)");
        jCheckBoxPlus4_700Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_700AreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4ColorArea.setText("Color memory ($800..$BFF)");
        jCheckBoxPlus4ColorArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4ColorAreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4VideoArea.setText("Video memory ($C00..$CFF)");
        jCheckBoxPlus4VideoArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4VideoAreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4BasicRamP.setText("BASIC RAM without graphics ($1000..$17FF)");
        jCheckBoxPlus4BasicRamP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4BasicRamPItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4Luminance.setText("Luminance ($1800..$1BFF)");
        jCheckBoxPlus4Luminance.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4LuminanceItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4ColorBitmap.setText("Color for bitmap($1C00..$1FFF)");
        jCheckBoxPlus4ColorBitmap.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4ColorBitmapItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4GraphicData.setText("Graphics data ($2000..$3FFF)");
        jCheckBoxPlus4GraphicData.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4GraphicDataItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4BasicRamN.setText("BASIC RAM with graphics ($4000..$7FFF)");
        jCheckBoxPlus4BasicRamN.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4BasicRamNItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4BasicRom.setText("BASIC ROM ($8000..$BFFF)");
        jCheckBoxPlus4BasicRom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4BasicRomItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4BasicExt.setText("BASIC Expansion ($C000..$CFFF)");
        jCheckBoxPlus4BasicExt.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4BasicExtItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4Caracter.setText("Caracter table ($D000..$DFFF)");
        jCheckBoxPlus4Caracter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4CaracterItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4Acia.setSelected(true);
        jCheckBoxPlus4Acia.setText("6551 ACIA ($FD00..$FD0F)");
        jCheckBoxPlus4Acia.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4AciaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_6529B_1.setSelected(true);
        jCheckBoxPlus4_6529B_1.setText("6529B #1 ($FD10..$FD1F)");
        jCheckBoxPlus4_6529B_1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_6529B_1ItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_6529B_2.setSelected(true);
        jCheckBoxPlus4_6529B_2.setText("6529B #2 ($FD30..$FD3F)");
        jCheckBoxPlus4_6529B_2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_6529B_2ItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4Ted.setSelected(true);
        jCheckBoxPlus4Ted.setText("TED ($FF00..$FF1F)");
        jCheckBoxPlus4Ted.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4TedItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4Kernal.setSelected(true);
        jCheckBoxPlus4Kernal.setText("Kernal ($FF20..$FFFF)");
        jCheckBoxPlus4Kernal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4KernalItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelPlus4CommLayout = new javax.swing.GroupLayout(jPanelPlus4Comm);
        jPanelPlus4Comm.setLayout(jPanelPlus4CommLayout);
        jPanelPlus4CommLayout.setHorizontalGroup(
            jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
                        .addComponent(jCheckBoxPlus4_200Area, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(382, 382, 382))
                    .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
                        .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jCheckBoxPlus4_600Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCheckBoxPlus4_700Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jCheckBoxPlus4ColorArea, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4VideoArea, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4BasicRamP, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4Luminance, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4ColorBitmap, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4GraphicData, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4BasicRamN, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4BasicRom, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4BasicExt, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4Caracter, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jCheckBoxPlus4_400Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCheckBoxPlus4_500Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jCheckBoxPlus4ZeroPage, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                                .addComponent(jCheckBoxPlus4StackArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jCheckBoxPlus4_300Area, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(381, Short.MAX_VALUE))
                    .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
                        .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxPlus4Ted, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4Kernal, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4_6529B_1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4_6529B_2, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4Acia, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanelPlus4CommLayout.setVerticalGroup(
            jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxPlus4ZeroPage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4StackArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4_200Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4_300Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4_400Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4_500Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4_600Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4_700Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4ColorArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4VideoArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4BasicRamP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4Luminance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4ColorBitmap)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4GraphicData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4BasicRamN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4BasicRom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4BasicExt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4Caracter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4Acia)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4_6529B_1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4_6529B_2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4Ted)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4Kernal)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPaneComm.addTab("Plus4", jPanelPlus4Comm);

        javax.swing.GroupLayout jPanelCommentLayout = new javax.swing.GroupLayout(jPanelComment);
        jPanelComment.setLayout(jPanelCommentLayout);
        jPanelCommentLayout.setHorizontalGroup(
            jPanelCommentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCommentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCommentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCommentLayout.createSequentialGroup()
                        .addComponent(jLabelautocomment, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTabbedPaneComm, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanelCommentLayout.setVerticalGroup(
            jPanelCommentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCommentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelautocomment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPaneComm, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPaneOption.addTab("Comments", jPanelComment);

        jLabelAutoComment.setText("Apply the output assembler syntax of:");

        jComboBoxAssembler.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxAssemblerItemStateChanged(evt);
            }
        });

        jScrollPaneDasm.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPaneDasm.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPaneDasm.setViewportView(jDasmPanel);

        jTabbedPaneAssembler.addTab("Dasm", jScrollPaneDasm);

        jScrollPaneTMPx.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPaneTMPx.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPaneTMPx.setViewportView(jTmpxPanel);

        jTabbedPaneAssembler.addTab("TMPx", jScrollPaneTMPx);

        jScrollPaneCa65.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPaneCa65.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPaneCa65.setViewportView(jCa65Panel);

        jTabbedPaneAssembler.addTab("Ca65", jScrollPaneCa65);

        jScrollPaneAcme.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPaneAcme.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPaneAcme.setViewportView(jAcmePanel);

        jTabbedPaneAssembler.addTab("Acme", jScrollPaneAcme);

        jScrollPaneKickAssembler.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPaneKickAssembler.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jLabelKickLabelDeclaration.setText("Label:");

        buttonGroupKickLabel.add(jRadioButtonKickLabelNameColon);
        jRadioButtonKickLabelNameColon.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickLabelNameColonItemStateChanged(evt);
            }
        });

        jScrollPaneKickLabelNameColon.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickLabelNameColon.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickLabelNameColon.setEditable(false);
        jTextPaneKickLabelNameColon.setContentType("text/html"); // NOI18N
        jTextPaneKickLabelNameColon.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <font color='black'>zzzz</font><b>:</b>\n    </p\n  </body>\n</html>\n");
        jScrollPaneKickLabelNameColon.setViewportView(jTextPaneKickLabelNameColon);

        jLabelKickByteDeclaration.setText("Byte:");

        buttonGroupKickByte.add(jRadioButtonKickDotByte);
        jRadioButtonKickDotByte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotByteItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotByte.setEditable(false);
        jTextPaneKickDotByte.setContentType("text/html"); // NOI18N
        jTextPaneKickDotByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .byte</b> <font color='red'>$xx</font><br>\n     <b> .byte</b> <font color='blue'>dd</font><br>\n     <b> .byte</b> <font color='green'>%bb</font><br>\n     <b> .byte</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotByte.setViewportView(jTextPaneKickDotByte);

        jLabelKickWordDeclaration.setText("Word:");

        buttonGroupKickWord.add(jRadioButtonKickDotWord);
        jRadioButtonKickDotWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotWordItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotWord.setEditable(false);
        jTextPaneKickDotWord.setContentType("text/html"); // NOI18N
        jTextPaneKickDotWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .word</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotWord.setViewportView(jTextPaneKickDotWord);

        jLabelKickStartingDeclaration.setText("Starting:");

        buttonGroupKickStarting.add(jRadioButtonKickDotCpuUndStarting);
        jRadioButtonKickDotCpuUndStarting.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotCpuUndStartingItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotCpuUndStarting.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotCpuUndStarting.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotCpuUndStarting.setEditable(false);
        jTextPaneKickDotCpuUndStarting.setContentType("text/html"); // NOI18N
        jTextPaneKickDotCpuUndStarting.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>.cpu</b> _6502\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotCpuUndStarting.setViewportView(jTextPaneKickDotCpuUndStarting);

        jLabelKickCommentDeclaration.setText("Comment:");

        buttonGroupKickComment.add(jRadioButtonKickDoubleBarComment);
        jRadioButtonKickDoubleBarComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDoubleBarCommentItemStateChanged(evt);
            }
        });

        jScrollPaneKickDoubleBarComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDoubleBarComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDoubleBarComment.setEditable(false);
        jTextPaneKickDoubleBarComment.setContentType("text/html"); // NOI18N
        jTextPaneKickDoubleBarComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>//</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDoubleBarComment.setViewportView(jTextPaneKickDoubleBarComment);

        jLabelKickOriginDeclaration.setText("Origin:");

        buttonGroupKickOrigin.add(jRadioButtonKickAsterixOrigin);
        jRadioButtonKickAsterixOrigin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickAsterixOriginItemStateChanged(evt);
            }
        });

        jScrollPaneKickAsterixOrigin.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickAsterixOrigin.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickAsterixOrigin.setEditable(false);
        jTextPaneKickAsterixOrigin.setContentType("text/html"); // NOI18N
        jTextPaneKickAsterixOrigin.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>*=</b>$xxyy\n    </p>\n  </body>\n</html>");
        jScrollPaneKickAsterixOrigin.setViewportView(jTextPaneKickAsterixOrigin);

        buttonGroupKickOrigin.add(jRadioButtonKickDotPcOrigin);
        jRadioButtonKickDotPcOrigin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotPcOriginItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotPcOrigin.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotPcOrigin.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotPcOrigin.setEditable(false);
        jTextPaneKickDotPcOrigin.setContentType("text/html"); // NOI18N
        jTextPaneKickDotPcOrigin.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>.pc</b> $xxyy\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotPcOrigin.setViewportView(jTextPaneKickDotPcOrigin);

        jLabelKickBlockCommentDeclaration.setText("Block Comment:");

        buttonGroupKickBlockComment.add(jRadioButtonKickDoubleBarBlockComment);
        jRadioButtonKickDoubleBarBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDoubleBarBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneKickDoubleBarBlockComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDoubleBarBlockComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDoubleBarBlockComment.setEditable(false);
        jTextPaneKickDoubleBarBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneKickDoubleBarBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>//</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDoubleBarBlockComment.setViewportView(jTextPaneKickDoubleBarBlockComment);

        buttonGroupKickBlockComment.add(jRadioButtonKickCstyleBlockComment);
        jRadioButtonKickCstyleBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickCstyleBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneKickCstyleBlockComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickCstyleBlockComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickCstyleBlockComment.setEditable(false);
        jTextPaneKickCstyleBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneKickCstyleBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>/*</b> xxx <b'>*/</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickCstyleBlockComment.setViewportView(jTextPaneKickCstyleBlockComment);

        buttonGroupKickBlockComment.add(jRadioButtonDasmSharpIfPBlockComment);
        jRadioButtonDasmSharpIfPBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmSharpIfPBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneDasmSharpIfPBlockComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmSharpIfPBlockComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmSharpIfPBlockComment.setEditable(false);
        jTextPaneDasmSharpIfPBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneDasmSharpIfPBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>#if </b> xxx <b>#endif</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmSharpIfPBlockComment.setViewportView(jTextPaneDasmSharpIfPBlockComment);

        jLabelKickMultiSpriteDeclaration.setText("Multicolor sprite:");

        jLabelKickMonoSpriteDeclaration.setText("Monocolor sprite:");

        buttonGroupKickMonoSprite.add(jRadioButtonKickByteHexMonoSprite);
        jRadioButtonKickByteHexMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickByteHexMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupKickMultiSprite.add(jRadioButtonKickByteHexMultiSprite);
        jRadioButtonKickByteHexMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickByteHexMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneKickByteHexMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickByteHexMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickByteHexMultiSprite.setEditable(false);
        jTextPaneKickByteHexMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickByteHexMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> [byte]</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickByteHexMultiSprite.setViewportView(jTextPaneKickByteHexMultiSprite);

        jScrollPaneKickByteHexMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickByteHexMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickByteHexMonoSprite.setEditable(false);
        jTextPaneKickByteHexMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickByteHexMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> [byte]</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickByteHexMonoSprite.setViewportView(jTextPaneKickByteHexMonoSprite);

        buttonGroupKickMonoSprite.add(jRadioButtonKickByteBinMonoSprite);
        jRadioButtonKickByteBinMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickByteBinMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupKickMultiSprite.add(jRadioButtonKickByteBinMultiSprite);
        jRadioButtonKickByteBinMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickByteBinMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneKickByteBinMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickByteBinMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickByteBinMultiSprite.setEditable(false);
        jTextPaneKickByteBinMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickByteBinMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[byte]</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickByteBinMultiSprite.setViewportView(jTextPaneKickByteBinMultiSprite);

        jScrollPaneKickByteBinMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickByteBinMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickByteBinMonoSprite.setEditable(false);
        jTextPaneKickByteBinMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickByteBinMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[byte]</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickByteBinMonoSprite.setViewportView(jTextPaneKickByteBinMonoSprite);

        buttonGroupKickMonoSprite.add(jRadioButtonKickMacroHexMonoSprite);
        jRadioButtonKickMacroHexMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroHexMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupKickMultiSprite.add(jRadioButtonKickMacroHexMultiSprite);
        jRadioButtonKickMacroHexMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroHexMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneKickMacroHexMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickMacroHexMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroHexMultiSprite.setEditable(false);
        jTextPaneKickMacroHexMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroHexMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.macro] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickMacroHexMultiSprite.setViewportView(jTextPaneKickMacroHexMultiSprite);

        jScrollPaneKickMacroHexMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickMacroHexMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroHexMonoSprite.setEditable(false);
        jTextPaneKickMacroHexMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroHexMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.macro] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickMacroHexMonoSprite.setViewportView(jTextPaneKickMacroHexMonoSprite);

        buttonGroupKickMonoSprite.add(jRadioButtonKickMacroBinMonoSprite);
        jRadioButtonKickMacroBinMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroBinMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupKickMultiSprite.add(jRadioButtonKickMacroBinMultiSprite);
        jRadioButtonKickMacroBinMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroBinMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPanekickMacroBinMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPanekickMacroBinMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroBinMultiSprite.setEditable(false);
        jTextPaneKickMacroBinMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroBinMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.macro] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPanekickMacroBinMultiSprite.setViewportView(jTextPaneKickMacroBinMultiSprite);

        jScrollPaneKickMacroBinMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickMacroBinMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroBinMonoSprite.setEditable(false);
        jTextPaneKickMacroBinMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroBinMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.macro] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickMacroBinMonoSprite.setViewportView(jTextPaneKickMacroBinMonoSprite);

        jLabelKickTribyteDeclaration.setText("Tribyte:");

        buttonGroupKickTribyte.add(jRadioButtonKickMacroTribyte);
        jRadioButtonKickMacroTribyte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroTribyteItemStateChanged(evt);
            }
        });

        jScrollPaneKickMacroTribyte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickMacroTribyte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroTribyte.setEditable(false);
        jTextPaneKickMacroTribyte.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroTribyte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac]</b> <font color='red'>$xxyyzz</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickMacroTribyte.setViewportView(jTextPaneKickMacroTribyte);

        jLabelKickLongDeclaration.setText("Long:");

        buttonGroupKickLong.add(jRadioButtonKickDwordLong);
        jRadioButtonKickDwordLong.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDwordLongItemStateChanged(evt);
            }
        });

        jScrollPaneKickDwordLong.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDwordLong.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDwordLong.setEditable(false);
        jTextPaneKickDwordLong.setContentType("text/html"); // NOI18N
        jTextPaneKickDwordLong.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .dword</b> <font color='red'>$xxyyzzkk</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDwordLong.setViewportView(jTextPaneKickDwordLong);

        jLabelKickWordSwappedDeclaration.setText("Word Swapped:");

        buttonGroupKickWordSwapped.add(jRadioButtonKickMacroWordSwapped);
        jRadioButtonKickMacroWordSwapped.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroWordSwappedItemStateChanged(evt);
            }
        });

        jScrollPaneKickMacroWordSwapped.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickMacroWordSwapped.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroWordSwapped.setEditable(false);
        jTextPaneKickMacroWordSwapped.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroWordSwapped.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac]</b> <font color='red'>$yyxx</font><br>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickMacroWordSwapped.setViewportView(jTextPaneKickMacroWordSwapped);

        jLabelKickTextDeclaration.setText("Text:");

        buttonGroupKickText.add(jRadioButtonKickDotText);
        jRadioButtonKickDotText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotTextItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotText.setEditable(false);
        jTextPaneKickDotText.setContentType("text/html"); // NOI18N
        jTextPaneKickDotText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotText.setViewportView(jTextPaneKickDotText);

        buttonGroupKickByte.add(jRadioButtonKickDotByByte);
        jRadioButtonKickDotByByte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotByByteItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotByByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotByByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotByByte.setEditable(false);
        jTextPaneKickDotByByte.setContentType("text/html"); // NOI18N
        jTextPaneKickDotByByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b> .by</b> <font color='red'>$xx</font><br>\n     <b> .by</b> <font color='blue'>dd</font><br>\n     <b> .by</b> <font color='green'>%bb</font><br>\n     <b> .by</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotByByte.setViewportView(jTextPaneKickDotByByte);

        buttonGroupKickWord.add(jRadioButtonKickDotWoWord);
        jRadioButtonKickDotWoWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotWoWordItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotWoWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotWoWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotWoWord.setEditable(false);
        jTextPaneKickDotWoWord.setContentType("text/html"); // NOI18N
        jTextPaneKickDotWoWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .wo</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotWoWord.setViewportView(jTextPaneKickDotWoWord);

        buttonGroupKickLong.add(jRadioButtonKickDotDwLong);
        jRadioButtonKickDotDwLong.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotDwLongItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotDwLong.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotDwLong.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotDwLong.setEditable(false);
        jTextPaneKickDotDwLong.setContentType("text/html"); // NOI18N
        jTextPaneKickDotDwLong.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .dw</b> <font color='red'>$xxyyzzkk</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotDwLong.setViewportView(jTextPaneKickDotDwLong);

        jCheckBoxKickColonMacro.setText("Call a macro with a colon before");
        jCheckBoxKickColonMacro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxKickColonMacroActionPerformed(evt);
            }
        });

        jLabelKickNumTextDeclaration.setText("Text #num chars:");

        buttonGroupKickNumText.add(jRadioButtonKickDotTextNumText);
        jRadioButtonKickDotTextNumText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotTextNumTextItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotTextNumText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotTextNumText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotTextNumText.setEditable(false);
        jTextPaneKickDotTextNumText.setContentType("text/html"); // NOI18N
        jTextPaneKickDotTextNumText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotTextNumText.setViewportView(jTextPaneKickDotTextNumText);

        jLabelKickZeroTextDeclaration.setText("Text 0 terminated:");

        buttonGroupKickZeroText.add(jRadioButtonKickDotTextZeroText);
        jRadioButtonKickDotTextZeroText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotTextZeroTextItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotTextZeroText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotTextZeroText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotTextZeroText.setEditable(false);
        jTextPaneKickDotTextZeroText.setContentType("text/html"); // NOI18N
        jTextPaneKickDotTextZeroText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotTextZeroText.setViewportView(jTextPaneKickDotTextZeroText);

        jLabelKickAddressDeclaration.setText("Address:");

        buttonGroupKickAddress.add(jRadioButtonKickDotWordAddress);
        jRadioButtonKickDotWordAddress.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotWordAddressItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotWordAddress.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotWordAddress.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotWordAddress.setEditable(false);
        jTextPaneKickDotWordAddress.setContentType("text/html"); // NOI18N
        jTextPaneKickDotWordAddress.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .word</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotWordAddress.setViewportView(jTextPaneKickDotWordAddress);

        buttonGroupKickAddress.add(jRadioButtonKickDotWoWordAddress);
        jRadioButtonKickDotWoWordAddress.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotWoWordAddressItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotWoWordAddress.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotWoWordAddress.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotWoWordAddress.setEditable(false);
        jTextPaneKickDotWoWordAddress.setContentType("text/html"); // NOI18N
        jTextPaneKickDotWoWordAddress.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .wo</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotWoWordAddress.setViewportView(jTextPaneKickDotWoWordAddress);

        jLabelKickStackWordDeclaration.setText("Stack Word:");

        buttonGroupKickStackWord.add(jRadioButtonKickMacroStackWord);
        jRadioButtonKickMacroStackWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroStackWordItemStateChanged(evt);
            }
        });

        jScrollPaneKickMacroStackWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickMacroStackWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroStackWord.setEditable(false);
        jTextPaneKickMacroStackWord.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroStackWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac]</b> <font color='red'>$yyxx</font><br>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickMacroStackWord.setViewportView(jTextPaneKickMacroStackWord);

        jLabelKickHighTextDeclaration.setText("Text '1' terminated:");

        buttonGroupKickHighText.add(jRadioButtonKickDotTextHighText);
        jRadioButtonKickDotTextHighText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotTextHighTextItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotTextHighText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotTextHighText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotTextHighText.setEditable(false);
        jTextPaneKickDotTextHighText.setContentType("text/html"); // NOI18N
        jTextPaneKickDotTextHighText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotTextHighText.setViewportView(jTextPaneKickDotTextHighText);

        jLabelKickShiftTextDeclaration.setText("Text left shifted:");

        buttonGroupKickShiftText.add(jRadioButtonKickDotTextShiftText);
        jRadioButtonKickDotTextShiftText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotTextShiftTextItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotTextShiftText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotTextShiftText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotTextShiftText.setEditable(false);
        jTextPaneKickDotTextShiftText.setContentType("text/html"); // NOI18N
        jTextPaneKickDotTextShiftText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotTextShiftText.setViewportView(jTextPaneKickDotTextShiftText);

        jLabelKickScreenTextDeclaration.setText("Text to screen code:");

        jLabelKickPetasciiTextDeclaration.setText("Text to petascii code:");

        buttonGroupKickScreenText.add(jRadioButtonKickDotTextScreenText);
        jRadioButtonKickDotTextScreenText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotTextScreenTextItemStateChanged(evt);
            }
        });

        buttonGroupKickPetasciiText.add(jRadioButtonKickDotTextPetasciiText);
        jRadioButtonKickDotTextPetasciiText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotTextPetasciiTextItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotTextScreenText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotTextScreenText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        ScreenjTextPaneKickDotTextScreenText.setEditable(false);
        ScreenjTextPaneKickDotTextScreenText.setContentType("text/html"); // NOI18N
        ScreenjTextPaneKickDotTextScreenText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotTextScreenText.setViewportView(ScreenjTextPaneKickDotTextScreenText);

        jScrollPaneKickDotTextPetasciiText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotTextPetasciiText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotTextPetasciiText.setEditable(false);
        jTextPaneKickDotTextPetasciiText.setContentType("text/html"); // NOI18N
        jTextPaneKickDotTextPetasciiText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotTextPetasciiText.setViewportView(jTextPaneKickDotTextPetasciiText);

        javax.swing.GroupLayout jPanelKickAssemblerLayout = new javax.swing.GroupLayout(jPanelKickAssembler);
        jPanelKickAssembler.setLayout(jPanelKickAssemblerLayout);
        jPanelKickAssemblerLayout.setHorizontalGroup(
            jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelKickStartingDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickOriginDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickCommentDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickBlockCommentDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickLabelDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickByteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickWordDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickWordSwappedDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickTribyteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickLongDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickStackWordDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickMonoSpriteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickMultiSpriteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickAddressDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickNumTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickZeroTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickHighTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickShiftTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickScreenTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickPetasciiTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonKickDotTextPetasciiText)
                    .addComponent(jRadioButtonKickDotTextScreenText)
                    .addComponent(jRadioButtonKickDotTextShiftText)
                    .addComponent(jRadioButtonKickDotTextHighText)
                    .addComponent(jRadioButtonKickDotTextZeroText)
                    .addComponent(jRadioButtonKickDotTextNumText)
                    .addComponent(jRadioButtonKickDotText)
                    .addComponent(jRadioButtonKickByteHexMultiSprite)
                    .addComponent(jRadioButtonKickByteHexMonoSprite)
                    .addComponent(jRadioButtonKickMacroStackWord)
                    .addComponent(jRadioButtonKickDotWordAddress)
                    .addComponent(jRadioButtonKickDwordLong)
                    .addComponent(jRadioButtonKickMacroTribyte)
                    .addComponent(jRadioButtonKickMacroWordSwapped)
                    .addComponent(jRadioButtonKickDotWord)
                    .addComponent(jRadioButtonKickDotByte)
                    .addComponent(jRadioButtonKickLabelNameColon)
                    .addComponent(jRadioButtonKickDoubleBarBlockComment)
                    .addComponent(jRadioButtonKickDoubleBarComment)
                    .addComponent(jRadioButtonKickAsterixOrigin)
                    .addComponent(jRadioButtonKickDotCpuUndStarting))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPaneKickDotTextScreenText, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotTextShiftText, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotTextHighText, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotTextZeroText, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotTextNumText, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotText, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickByteHexMultiSprite, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickByteHexMonoSprite, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickMacroStackWord, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotWordAddress, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDwordLong, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                    .addComponent(jScrollPaneKickMacroTribyte, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickMacroWordSwapped, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotWord, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotByte, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickLabelNameColon, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDoubleBarBlockComment, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDoubleBarComment, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotCpuUndStarting, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickAsterixOrigin, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotTextPetasciiText))
                .addGap(2, 2, 2)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonKickDotPcOrigin)
                    .addComponent(jRadioButtonKickCstyleBlockComment)
                    .addComponent(jRadioButtonKickDotByByte)
                    .addComponent(jRadioButtonKickDotWoWord)
                    .addComponent(jRadioButtonKickDotDwLong)
                    .addComponent(jRadioButtonKickDotWoWordAddress)
                    .addComponent(jRadioButtonKickByteBinMonoSprite)
                    .addComponent(jRadioButtonKickByteBinMultiSprite))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                        .addComponent(jScrollPaneKickDotPcOrigin)
                        .addGap(10, 10, 10))
                    .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPaneKickCstyleBlockComment)
                            .addComponent(jScrollPaneKickDotByByte, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneKickDotWoWord, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneKickDotWoWordAddress, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneKickByteBinMultiSprite, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneKickByteBinMonoSprite, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneKickDotDwLong, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonKickMacroHexMonoSprite)
                    .addComponent(jRadioButtonKickMacroHexMultiSprite)
                    .addComponent(jRadioButtonDasmSharpIfPBlockComment))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneDasmSharpIfPBlockComment)
                    .addComponent(jScrollPaneKickMacroHexMultiSprite)
                    .addComponent(jScrollPaneKickMacroHexMonoSprite))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonKickMacroBinMonoSprite)
                    .addComponent(jRadioButtonKickMacroBinMultiSprite))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPanekickMacroBinMultiSprite)
                    .addComponent(jScrollPaneKickMacroBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jCheckBoxKickColonMacro, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(465, Short.MAX_VALUE))
        );
        jPanelKickAssemblerLayout.setVerticalGroup(
            jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxKickColonMacro)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelKickStartingDeclaration)
                            .addComponent(jRadioButtonKickDotCpuUndStarting)
                            .addComponent(jScrollPaneKickDotCpuUndStarting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelKickOriginDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonKickAsterixOrigin)
                            .addComponent(jScrollPaneKickAsterixOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonKickDotPcOrigin))
                        .addGap(12, 12, 12)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelKickCommentDeclaration)
                            .addComponent(jRadioButtonKickDoubleBarComment)
                            .addComponent(jScrollPaneKickDoubleBarComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jScrollPaneKickDotPcOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(3, 3, 3)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickBlockCommentDeclaration)
                    .addComponent(jRadioButtonKickDoubleBarBlockComment)
                    .addComponent(jScrollPaneKickDoubleBarBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickCstyleBlockComment)
                    .addComponent(jScrollPaneKickCstyleBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmSharpIfPBlockComment)
                    .addComponent(jScrollPaneDasmSharpIfPBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickLabelDeclaration)
                    .addComponent(jRadioButtonKickLabelNameColon)
                    .addComponent(jScrollPaneKickLabelNameColon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickByteDeclaration)
                    .addComponent(jRadioButtonKickDotByte)
                    .addComponent(jScrollPaneKickDotByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickDotByByte)
                    .addComponent(jScrollPaneKickDotByByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickWordDeclaration)
                    .addComponent(jRadioButtonKickDotWord)
                    .addComponent(jScrollPaneKickDotWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickDotWoWord)
                    .addComponent(jScrollPaneKickDotWoWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickWordSwappedDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickMacroWordSwapped)
                    .addComponent(jScrollPaneKickMacroWordSwapped, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonKickMacroTribyte)
                            .addComponent(jScrollPaneKickMacroTribyte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabelKickTribyteDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickLongDeclaration)
                    .addComponent(jRadioButtonKickDwordLong)
                    .addComponent(jScrollPaneKickDwordLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickDotDwLong)
                    .addComponent(jScrollPaneKickDotDwLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickAddressDeclaration)
                    .addComponent(jRadioButtonKickDotWordAddress)
                    .addComponent(jScrollPaneKickDotWordAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickDotWoWordAddress)
                    .addComponent(jScrollPaneKickDotWoWordAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickStackWordDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickMacroStackWord)
                    .addComponent(jScrollPaneKickMacroStackWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickMonoSpriteDeclaration)
                    .addComponent(jRadioButtonKickByteHexMonoSprite)
                    .addComponent(jScrollPaneKickByteHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickByteBinMonoSprite)
                    .addComponent(jScrollPaneKickByteBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickMacroHexMonoSprite)
                    .addComponent(jScrollPaneKickMacroHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickMacroBinMonoSprite)
                    .addComponent(jScrollPaneKickMacroBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickMultiSpriteDeclaration)
                    .addComponent(jRadioButtonKickByteHexMultiSprite)
                    .addComponent(jScrollPaneKickByteHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickByteBinMultiSprite)
                    .addComponent(jScrollPaneKickByteBinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickMacroHexMultiSprite)
                    .addComponent(jScrollPaneKickMacroHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickMacroBinMultiSprite)
                    .addComponent(jScrollPanekickMacroBinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickTextDeclaration)
                    .addComponent(jRadioButtonKickDotText)
                    .addComponent(jScrollPaneKickDotText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickNumTextDeclaration)
                    .addComponent(jRadioButtonKickDotTextNumText)
                    .addComponent(jScrollPaneKickDotTextNumText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickZeroTextDeclaration)
                    .addComponent(jRadioButtonKickDotTextZeroText)
                    .addComponent(jScrollPaneKickDotTextZeroText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickHighTextDeclaration)
                    .addComponent(jRadioButtonKickDotTextHighText)
                    .addComponent(jScrollPaneKickDotTextHighText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickShiftTextDeclaration)
                    .addComponent(jRadioButtonKickDotTextShiftText)
                    .addComponent(jScrollPaneKickDotTextShiftText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickScreenTextDeclaration)
                    .addComponent(jRadioButtonKickDotTextScreenText)
                    .addComponent(jScrollPaneKickDotTextScreenText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickPetasciiTextDeclaration)
                    .addComponent(jRadioButtonKickDotTextPetasciiText)
                    .addComponent(jScrollPaneKickDotTextPetasciiText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jScrollPaneKickAssembler.setViewportView(jPanelKickAssembler);

        jTabbedPaneAssembler.addTab("KickAssembler", jScrollPaneKickAssembler);

        jScrollPaneTass64.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPaneTass64.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jLabelTass64StartingDeclaration.setText("Starting:");

        buttonGroupTass64Starting.add(jRadioButtonTass64DotCpuAStarting);
        jRadioButtonTass64DotCpuAStarting.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotCpuAStartingItemStateChanged(evt);
            }
        });

        jScrollPaneDasmTass64DotCpuAStarting.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmTass64DotCpuAStarting.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotCpuAStarting.setEditable(false);
        jTextPaneTass64DotCpuAStarting.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotCpuAStarting.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>.cpu</b> \"6502\"\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmTass64DotCpuAStarting.setViewportView(jTextPaneTass64DotCpuAStarting);

        jLabelTass64OriginDeclaration.setText("Origin:");

        buttonGroupTass64Origin.add(jRadioButtonTass64AsterixOrigin);
        jRadioButtonTass64AsterixOrigin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64AsterixOriginItemStateChanged(evt);
            }
        });

        jScrollPaneTass64ASterixOrigin.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64ASterixOrigin.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64AsterixOrigin.setEditable(false);
        jTextPaneTass64AsterixOrigin.setContentType("text/html"); // NOI18N
        jTextPaneTass64AsterixOrigin.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>*=</b>$xxyy\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64ASterixOrigin.setViewportView(jTextPaneTass64AsterixOrigin);

        jLabelTass64CommentDeclaration.setText("Comment:");

        buttonGroupTass64Comment.add(jRadioButtonTass64SemicolonComment);
        jRadioButtonTass64SemicolonComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64SemicolonCommentItemStateChanged(evt);
            }
        });

        jScrollPaneTass64SemicolonComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64SemicolonComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64SemicolonComment.setEditable(false);
        jTextPaneTass64SemicolonComment.setContentType("text/html"); // NOI18N
        jTextPaneTass64SemicolonComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>;</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64SemicolonComment.setViewportView(jTextPaneTass64SemicolonComment);

        jLabelTass64BlockCommentDeclaration.setText("Block Comment:");

        buttonGroupTass64BlockComment.add(jRadioButtonTass64SemicolonBlockComment);
        jRadioButtonTass64SemicolonBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64SemicolonBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneTass64SemicolonBlockComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64SemicolonBlockComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64SemicolonBlockComment.setEditable(false);
        jTextPaneTass64SemicolonBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneTass64SemicolonBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>;</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64SemicolonBlockComment.setViewportView(jTextPaneTass64SemicolonBlockComment);

        buttonGroupTass64BlockComment.add(jRadioButtontass64DotIfFiBlockComment);
        jRadioButtontass64DotIfFiBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtontass64DotIfFiBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotIfFiBlockComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotIfFiBlockComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass664DotIfFiBlockComment1.setEditable(false);
        jTextPaneTass664DotIfFiBlockComment1.setContentType("text/html"); // NOI18N
        jTextPaneTass664DotIfFiBlockComment1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>.if 0</b> xxx <b'>.fi</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotIfFiBlockComment.setViewportView(jTextPaneTass664DotIfFiBlockComment1);

        buttonGroupTass64BlockComment.add(jRadioButtonTass64DotCommentBlockComment);
        jRadioButtonTass64DotCommentBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotCommentBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotCommentBlockComment.setEditable(false);
        jTextPaneTass64DotCommentBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotCommentBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>.comment</b> xxx <b'>.endc</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotComment.setViewportView(jTextPaneTass64DotCommentBlockComment);

        jLabelTass64LabelDeclaration.setText("Label:");

        buttonGroupTass64Label.add(jRadioButtonTass64LabelNameColon);
        jRadioButtonTass64LabelNameColon.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64LabelNameColonItemStateChanged(evt);
            }
        });

        jScrollPaneTass64LabelName.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64LabelName.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64LabelNameColon.setEditable(false);
        jTextPaneTass64LabelNameColon.setContentType("text/html"); // NOI18N
        jTextPaneTass64LabelNameColon.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <font color='black'>zzzz</font><b>:</b>\n    </p\n  </body>\n</html>\n");
        jScrollPaneTass64LabelName.setViewportView(jTextPaneTass64LabelNameColon);

        jLabelTass64WordDeclaration.setText("Word:");

        jLabelTass64ByteDeclaration.setText("Byte:");

        buttonGroupTass64Byte.add(jRadioButtonTass64DotByte);
        jRadioButtonTass64DotByte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotByteItemStateChanged(evt);
            }
        });

        buttonGroupTass64Word.add(jRadioButtonTass64DotWord);
        jRadioButtonTass64DotWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotWordItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotWord.setEditable(false);
        jTextPaneTass64DotWord.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .word</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotWord.setViewportView(jTextPaneTass64DotWord);

        jScrollPaneTass64DotByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotByte.setEditable(false);
        jTextPaneTass64DotByte.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .byte</b> <font color='red'>$xx</font><br>\n     <b> .byte</b> <font color='blue'>dd</font><br>\n     <b> .byte</b> <font color='green'>%bb</font><br>\n     <b> .byte</b> <font color='purple'>'c</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotByte.setViewportView(jTextPaneTass64DotByte);

        buttonGroupTass64Byte.add(jRadioButtonTass64DotCharByte);
        jRadioButtonTass64DotCharByte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotCharByteItemStateChanged(evt);
            }
        });

        buttonGroupTass64Word.add(jRadioButtonTass64DotSintWord);
        jRadioButtonTass64DotSintWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotSintWordItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotSintWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotSintWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotSintWord.setEditable(false);
        jTextPaneTass64DotSintWord.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotSintWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .sint</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotSintWord.setViewportView(jTextPaneTass64DotSintWord);

        jScrollPaneTass64DotCharByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotCharByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotCharByte.setEditable(false);
        jTextPaneTass64DotCharByte.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotCharByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .char</b> <font color='red'>$xx</font><br>\n     <b> .char</b> <font color='blue'>dd</font><br>\n     <b> .char</b> <font color='green'>%bb</font><br>\n     <b> .char</b> <font color='purple'>'c</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotCharByte.setViewportView(jTextPaneTass64DotCharByte);

        jLabelTass64MonoSpriteDeclaration.setText("Monocolor sprite:");

        jLabelTass64MultiSpriteDeclaration.setText("Multicolor sprite:");

        buttonGroupTass64MonoSprite.add(jRadioButtonTass64ByteHexMonoSprite);
        jRadioButtonTass64ByteHexMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64ByteHexMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupTass64MultiSprite.add(jRadioButtonTass64ByteHexMultiSprite);
        jRadioButtonTass64ByteHexMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64ByteHexMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneTass64ByteHexMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64ByteHexMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        TmpxPaneTass64ByteHexMultiSprite.setEditable(false);
        TmpxPaneTass64ByteHexMultiSprite.setContentType("text/html"); // NOI18N
        TmpxPaneTass64ByteHexMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> [byte]</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64ByteHexMultiSprite.setViewportView(TmpxPaneTass64ByteHexMultiSprite);

        jScrollPaneTass64ByteHexMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64ByteHexMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64ByteHexMonoSprite.setEditable(false);
        jTextPaneTass64ByteHexMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneTass64ByteHexMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> [byte]</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64ByteHexMonoSprite.setViewportView(jTextPaneTass64ByteHexMonoSprite);

        buttonGroupTass64MonoSprite.add(jRadioButtonTass64ByteBinMonoSprite);
        jRadioButtonTass64ByteBinMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64ByteBinMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupTass64MultiSprite.add(jRadioButtonTass64ByteBinMultiSprite);
        jRadioButtonTass64ByteBinMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64ByteBinMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneTass64ByteBinMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64ByteBinMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64ByteBinMultiSprite.setEditable(false);
        jTextPaneTass64ByteBinMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneTass64ByteBinMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[byte]</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64ByteBinMultiSprite.setViewportView(jTextPaneTass64ByteBinMultiSprite);

        jScrollPaneTass64ByteBinMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64ByteBinMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64ByteBinMonoSprite.setEditable(false);
        jTextPaneTass64ByteBinMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneTass64ByteBinMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[byte]</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64ByteBinMonoSprite.setViewportView(jTextPaneTass64ByteBinMonoSprite);

        buttonGroupTass64MonoSprite.add(jRadioButtonTass64MacroHexMonoSprite);
        jRadioButtonTass64MacroHexMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64MacroHexMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupTass64MultiSprite.add(jRadioButtonTass64MacroHexMultiSprite);
        jRadioButtonTass64MacroHexMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64MacroHexMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneTass64MacroHexMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64MacroHexMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64MacroHexMultiSprite.setEditable(false);
        jTextPaneTass64MacroHexMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneTass64MacroHexMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64MacroHexMultiSprite.setViewportView(jTextPaneTass64MacroHexMultiSprite);

        jScrollPaneTass64MacroHexMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64MacroHexMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64MacroHexMonoSprite.setEditable(false);
        jTextPaneTass64MacroHexMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneTass64MacroHexMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64MacroHexMonoSprite.setViewportView(jTextPaneTass64MacroHexMonoSprite);

        buttonGroupTass64MonoSprite.add(jRadioButtonTass64MacroBinMonoSprite);
        jRadioButtonTass64MacroBinMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64MacroBinMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupTass64MultiSprite.add(jRadioButtonTass64MacroBinMultiSprite);
        jRadioButtonTass64MacroBinMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64MacroBinMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneTass64MacroBinMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64MacroBinMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64MacroBinMultiSprite.setEditable(false);
        jTextPaneTass64MacroBinMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneTass64MacroBinMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64MacroBinMultiSprite.setViewportView(jTextPaneTass64MacroBinMultiSprite);

        jScrollPaneTass64MacroBinMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64MacroBinMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64MacroBinMonoSprite.setEditable(false);
        jTextPaneTass64MacroBinMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneTass64MacroBinMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64MacroBinMonoSprite.setViewportView(jTextPaneTass64MacroBinMonoSprite);

        jLabelTass64TribyteDeclaration.setText("Tribyte:");

        buttonGroupTass64Tribyte.add(jRadioButtonTass64DotLongTribyte);
        jRadioButtonTass64DotLongTribyte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotLongTribyteItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotLongTribyte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotLongTribyte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotLongTribyte.setEditable(false);
        jTextPaneTass64DotLongTribyte.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotLongTribyte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .long</b> <font color='red'>$xxyyzz</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotLongTribyte.setViewportView(jTextPaneTass64DotLongTribyte);

        buttonGroupTass64Tribyte.add(jRadioButtonTass64DotLintTribyte);
        jRadioButtonTass64DotLintTribyte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotLintTribyteItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotLintTribyte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotLintTribyte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotLintTribyte.setEditable(false);
        jTextPaneTass64DotLintTribyte.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotLintTribyte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .lint</b> <font color='red'>$xxyyzz</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotLintTribyte.setViewportView(jTextPaneTass64DotLintTribyte);

        jLabelTass64LongDeclaration.setText("Long:");

        buttonGroupTass64Long.add(jRadioButtonTass64DotDwordLong);
        jRadioButtonTass64DotDwordLong.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotDwordLongItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotDwordLong.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotDwordLong.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotDwordLong.setEditable(false);
        jTextPaneTass64DotDwordLong.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotDwordLong.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .dword</b> <font color='red'>$xxyyzzkk</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotDwordLong.setViewportView(jTextPaneTass64DotDwordLong);

        buttonGroupTass64Long.add(jRadioButtonTass64DotDlintLong);
        jRadioButtonTass64DotDlintLong.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotDlintLongItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotDlintLong.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotDlintLong.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotDlintLong.setEditable(false);
        jTextPaneTass64DotDlintLong.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotDlintLong.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .dint</b> <font color='red'>$xxyyzzkk</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotDlintLong.setViewportView(jTextPaneTass64DotDlintLong);

        jLabelTass65WordSwappedDeclaration.setText("Word Swapped:");

        buttonGroupTass64WaordSwapped.add(jRadioButtonTass64MacroWordSwapped);
        jRadioButtonTass64MacroWordSwapped.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64MacroWordSwappedItemStateChanged(evt);
            }
        });

        jScrollPaneTass64MacroWordSwapped.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64MacroWordSwapped.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64MacroWordSwapped.setEditable(false);
        jTextPaneTass64MacroWordSwapped.setContentType("text/html"); // NOI18N
        jTextPaneTass64MacroWordSwapped.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac]</b> <font color='red'>$yyxx</font><br>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64MacroWordSwapped.setViewportView(jTextPaneTass64MacroWordSwapped);

        jLabelTass65TextDeclaration.setText("Text:");

        buttonGroupTass64Text.add(jRadioButtonTass64DotText);
        jRadioButtonTass64DotText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotTextItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotText.setEditable(false);
        jTextPaneTass64DotText.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>.text</b> <font color='red'>\"xxx\"</font><br>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotText.setViewportView(jTextPaneTass64DotText);

        jLabelTass64NumTextDeclaration.setText("Text #num chars:");

        buttonGroupTass64NumText.add(jRadioButtonTass64DotPTextNumText);
        jRadioButtonTass64DotPTextNumText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotPTextNumTextItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotPTextNumText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotPTextNumText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotPTextNumText.setEditable(false);
        jTextPaneTass64DotPTextNumText.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotPTextNumText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .ptext</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotPTextNumText.setViewportView(jTextPaneTass64DotPTextNumText);

        buttonGroupTass64NumText.add(jRadioButtonTass64DotTextPNumText);
        jRadioButtonTass64DotTextPNumText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotTextPNumTextItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotTextPNumChar.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotTextPNumChar.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotTextPNumChar.setEditable(false);
        jTextPaneTass64DotTextPNumChar.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotTextPNumChar.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text p</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotTextPNumChar.setViewportView(jTextPaneTass64DotTextPNumChar);

        jLabelTass64ZeroTextDeclaration.setText("Text 0 terminated:");

        buttonGroupTass64ZeroText.add(jRadioButtonTass64DotNullZeroText);
        jRadioButtonTass64DotNullZeroText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotNullZeroTextItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotNullZeroText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotNullZeroText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotNullZeroText.setEditable(false);
        jTextPaneTass64DotNullZeroText.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotNullZeroText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .null</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotNullZeroText.setViewportView(jTextPaneTass64DotNullZeroText);

        buttonGroupTass64ZeroText.add(jRadioButtonTass64DotTextNZeroText);
        jRadioButtonTass64DotTextNZeroText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotTextNZeroTextItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotTextNZeroText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotTextNZeroText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotTextNZeroText.setEditable(false);
        jTextPaneTass64DotTextNZeroText.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotTextNZeroText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text n</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotTextNZeroText.setViewportView(jTextPaneTass64DotTextNZeroText);

        jLabelTass64AddressDeclaration.setText("Address:");

        buttonGroupTass64Address.add(jRadioButtonTass64DotAddrAddress);
        jRadioButtonTass64DotAddrAddress.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotAddrAddressItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotAddrAddress.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotAddrAddress.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotAddrAddress.setEditable(false);
        jTextPaneTass64DotAddrAddress.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotAddrAddress.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .addr</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotAddrAddress.setViewportView(jTextPaneTass64DotAddrAddress);

        jLabelTass64StackWordDeclaration.setText("Stack Word:");

        buttonGroupTass64StackWord.add(jRadioButtonTass64DotRtaStackWord);
        jRadioButtonTass64DotRtaStackWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotRtaStackWordItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotRtaStackWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotRtaStackWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotRtaStackWord.setEditable(false);
        jTextPaneTass64DotRtaStackWord.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotRtaStackWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .addr</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotRtaStackWord.setViewportView(jTextPaneTass64DotRtaStackWord);

        jLabelTass64HighTextDeclaration.setText("Text '1' terminated:");

        buttonGroupTass64HighText.add(jRadioButtonTass64DotShiftHighText);
        jRadioButtonTass64DotShiftHighText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotShiftHighTextItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotShiftHighText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotShiftHighText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotShiftHighText.setEditable(false);
        jTextPaneTass64DotShiftHighText.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotShiftHighText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .shift</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotShiftHighText.setViewportView(jTextPaneTass64DotShiftHighText);

        buttonGroupTass64HighText.add(jRadioButtonTass64DotTextSHighText);
        jRadioButtonTass64DotTextSHighText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotTextSHighTextItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotTextSHighText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotTextSHighText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotTextSHighText.setEditable(false);
        jTextPaneTass64DotTextSHighText.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotTextSHighText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text s</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotTextSHighText.setViewportView(jTextPaneTass64DotTextSHighText);

        jLabelTass64ShiftTextDeclaration.setText("Text left shifted:");

        buttonGroupTass64ShiftText.add(jRadioButtonTass64DotShiftlShiftText);
        jRadioButtonTass64DotShiftlShiftText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotShiftlShiftTextItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotShiftlShiftText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotShiftlShiftText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotShiftlShiftText.setEditable(false);
        jTextPaneTass64DotShiftlShiftText.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotShiftlShiftText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .shiftl</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotShiftlShiftText.setViewportView(jTextPaneTass64DotShiftlShiftText);

        buttonGroupTass64ShiftText.add(jRadioButtonTass64DotTextLShiftText);
        jRadioButtonTass64DotTextLShiftText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotTextLShiftTextItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotTextLShiftText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotTextLShiftText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotTextLShiftText.setEditable(false);
        jTextPaneTass64DotTextLShiftText.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotTextLShiftText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text l</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotTextLShiftText.setViewportView(jTextPaneTass64DotTextLShiftText);

        jLabelTass65ScreenTextDeclaration.setText("Text to screen code:");

        buttonGroupTass64ScreenCode.add(jRadioButtonTass64DotTextScreenText);
        jRadioButtonTass64DotTextScreenText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotTextScreenTextItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotTextScreenText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotTextScreenText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotTextScreenText.setEditable(false);
        jTextPaneTass64DotTextScreenText.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotTextScreenText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>.text</b> <font color='red'>\"xxx\"</font><br>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotTextScreenText.setViewportView(jTextPaneTass64DotTextScreenText);

        jLabelTass65PetasciiTextDeclaration.setText("Text to petascii code:");

        buttonGroupTass64PetasciiText.add(jRadioButtonTass64DotTextPetasciiText);
        jRadioButtonTass64DotTextPetasciiText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotTextPetasciiTextItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotTextPetasciiText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotTextPetasciiText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotTextPetasciiText.setEditable(false);
        jTextPaneTass64DotTextPetasciiText.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotTextPetasciiText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>.text</b> <font color='red'>\"xxx\"</font><br>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotTextPetasciiText.setViewportView(jTextPaneTass64DotTextPetasciiText);

        javax.swing.GroupLayout jPanelTass64Layout = new javax.swing.GroupLayout(jPanelTass64);
        jPanelTass64.setLayout(jPanelTass64Layout);
        jPanelTass64Layout.setHorizontalGroup(
            jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTass64Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelTass65PetasciiTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64StartingDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64OriginDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64CommentDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64BlockCommentDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64LabelDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64ByteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64WordDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass65WordSwappedDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64TribyteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64LongDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64AddressDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64StackWordDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64MonoSpriteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64MultiSpriteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass65TextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64NumTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64ZeroTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64HighTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64ShiftTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass65ScreenTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonTass64DotCpuAStarting)
                    .addComponent(jRadioButtonTass64AsterixOrigin)
                    .addComponent(jRadioButtonTass64SemicolonComment)
                    .addComponent(jRadioButtonTass64SemicolonBlockComment)
                    .addComponent(jRadioButtonTass64LabelNameColon)
                    .addComponent(jRadioButtonTass64DotByte)
                    .addComponent(jRadioButtonTass64DotWord)
                    .addComponent(jRadioButtonTass64MacroWordSwapped)
                    .addComponent(jRadioButtonTass64DotLongTribyte)
                    .addComponent(jRadioButtonTass64DotDwordLong)
                    .addComponent(jRadioButtonTass64DotAddrAddress)
                    .addComponent(jRadioButtonTass64DotRtaStackWord)
                    .addComponent(jRadioButtonTass64ByteHexMonoSprite)
                    .addComponent(jRadioButtonTass64ByteHexMultiSprite)
                    .addComponent(jRadioButtonTass64DotText)
                    .addComponent(jRadioButtonTass64DotPTextNumText)
                    .addComponent(jRadioButtonTass64DotNullZeroText)
                    .addComponent(jRadioButtonTass64DotShiftHighText)
                    .addComponent(jRadioButtonTass64DotShiftlShiftText)
                    .addComponent(jRadioButtonTass64DotTextScreenText)
                    .addComponent(jRadioButtonTass64DotTextPetasciiText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneDasmTass64DotCpuAStarting)
                    .addComponent(jScrollPaneTass64ASterixOrigin)
                    .addComponent(jScrollPaneTass64SemicolonComment)
                    .addComponent(jScrollPaneTass64SemicolonBlockComment)
                    .addComponent(jScrollPaneTass64LabelName)
                    .addComponent(jScrollPaneTass64DotByte)
                    .addComponent(jScrollPaneTass64DotWord)
                    .addComponent(jScrollPaneTass64MacroWordSwapped)
                    .addComponent(jScrollPaneTass64DotLongTribyte, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                    .addComponent(jScrollPaneTass64DotDwordLong)
                    .addComponent(jScrollPaneTass64DotAddrAddress)
                    .addComponent(jScrollPaneTass64DotRtaStackWord)
                    .addComponent(jScrollPaneTass64ByteHexMonoSprite)
                    .addComponent(jScrollPaneTass64ByteHexMultiSprite)
                    .addComponent(jScrollPaneTass64DotText)
                    .addComponent(jScrollPaneTass64DotPTextNumText)
                    .addComponent(jScrollPaneTass64DotNullZeroText)
                    .addComponent(jScrollPaneTass64DotShiftHighText)
                    .addComponent(jScrollPaneTass64DotShiftlShiftText)
                    .addComponent(jScrollPaneTass64DotTextScreenText)
                    .addComponent(jScrollPaneTass64DotTextPetasciiText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonTass64DotCommentBlockComment)
                    .addComponent(jRadioButtonTass64DotCharByte)
                    .addComponent(jRadioButtonTass64DotSintWord)
                    .addComponent(jRadioButtonTass64DotLintTribyte)
                    .addComponent(jRadioButtonTass64DotDlintLong)
                    .addComponent(jRadioButtonTass64ByteBinMonoSprite)
                    .addComponent(jRadioButtonTass64ByteBinMultiSprite)
                    .addComponent(jRadioButtonTass64DotTextPNumText)
                    .addComponent(jRadioButtonTass64DotTextNZeroText)
                    .addComponent(jRadioButtonTass64DotTextSHighText)
                    .addComponent(jRadioButtonTass64DotTextLShiftText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelTass64Layout.createSequentialGroup()
                        .addComponent(jScrollPaneTass64DotComment, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtontass64DotIfFiBlockComment)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPaneTass64DotIfFiBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelTass64Layout.createSequentialGroup()
                        .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPaneTass64DotTextLShiftText, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneTass64DotTextSHighText, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneTass64DotTextNZeroText, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneTass64DotTextPNumChar, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneTass64DotCharByte)
                            .addComponent(jScrollPaneTass64DotSintWord, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneTass64DotLintTribyte, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneTass64DotDlintLong, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                            .addComponent(jScrollPaneTass64ByteBinMultiSprite, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneTass64ByteBinMonoSprite, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonTass64MacroHexMonoSprite)
                            .addComponent(jRadioButtonTass64MacroHexMultiSprite))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPaneTass64MacroHexMultiSprite, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                            .addComponent(jScrollPaneTass64MacroHexMonoSprite))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonTass64MacroBinMonoSprite)
                            .addComponent(jRadioButtonTass64MacroBinMultiSprite))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPaneTass64MacroBinMonoSprite)
                            .addComponent(jScrollPaneTass64MacroBinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39))))
        );
        jPanelTass64Layout.setVerticalGroup(
            jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTass64Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64StartingDeclaration)
                    .addComponent(jRadioButtonTass64DotCpuAStarting)
                    .addComponent(jScrollPaneDasmTass64DotCpuAStarting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64OriginDeclaration)
                    .addComponent(jRadioButtonTass64AsterixOrigin)
                    .addComponent(jScrollPaneTass64ASterixOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64CommentDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64SemicolonComment)
                    .addComponent(jScrollPaneTass64SemicolonComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64BlockCommentDeclaration)
                    .addComponent(jRadioButtonTass64SemicolonBlockComment)
                    .addComponent(jScrollPaneTass64SemicolonBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64DotCommentBlockComment)
                    .addComponent(jScrollPaneTass64DotComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtontass64DotIfFiBlockComment)
                    .addComponent(jScrollPaneTass64DotIfFiBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64LabelDeclaration)
                    .addComponent(jRadioButtonTass64LabelNameColon)
                    .addComponent(jScrollPaneTass64LabelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64ByteDeclaration)
                    .addComponent(jRadioButtonTass64DotByte)
                    .addComponent(jScrollPaneTass64DotByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64DotCharByte)
                    .addComponent(jScrollPaneTass64DotCharByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64WordDeclaration)
                    .addComponent(jRadioButtonTass64DotWord)
                    .addComponent(jScrollPaneTass64DotWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64DotSintWord)
                    .addComponent(jScrollPaneTass64DotSintWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass65WordSwappedDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64MacroWordSwapped)
                    .addComponent(jScrollPaneTass64MacroWordSwapped, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64TribyteDeclaration)
                    .addComponent(jRadioButtonTass64DotLongTribyte)
                    .addComponent(jScrollPaneTass64DotLongTribyte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64DotLintTribyte)
                    .addComponent(jScrollPaneTass64DotLintTribyte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64LongDeclaration)
                    .addComponent(jRadioButtonTass64DotDwordLong)
                    .addComponent(jScrollPaneTass64DotDwordLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64DotDlintLong)
                    .addComponent(jScrollPaneTass64DotDlintLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64AddressDeclaration)
                    .addComponent(jRadioButtonTass64DotAddrAddress)
                    .addComponent(jScrollPaneTass64DotAddrAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64StackWordDeclaration)
                    .addComponent(jRadioButtonTass64DotRtaStackWord)
                    .addComponent(jScrollPaneTass64DotRtaStackWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64MonoSpriteDeclaration)
                    .addComponent(jRadioButtonTass64ByteHexMonoSprite)
                    .addComponent(jScrollPaneTass64ByteHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64ByteBinMonoSprite)
                    .addComponent(jScrollPaneTass64ByteBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64MacroHexMonoSprite)
                    .addComponent(jScrollPaneTass64MacroHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64MacroBinMonoSprite)
                    .addComponent(jScrollPaneTass64MacroBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64MultiSpriteDeclaration)
                    .addComponent(jRadioButtonTass64ByteHexMultiSprite)
                    .addComponent(jScrollPaneTass64ByteHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64ByteBinMultiSprite)
                    .addComponent(jScrollPaneTass64ByteBinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64MacroHexMultiSprite)
                    .addComponent(jScrollPaneTass64MacroHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64MacroBinMultiSprite)
                    .addComponent(jScrollPaneTass64MacroBinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass65TextDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64DotText)
                    .addComponent(jScrollPaneTass64DotText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64NumTextDeclaration)
                    .addComponent(jRadioButtonTass64DotPTextNumText)
                    .addComponent(jScrollPaneTass64DotPTextNumText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64DotTextPNumText)
                    .addComponent(jScrollPaneTass64DotTextPNumChar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64ZeroTextDeclaration)
                    .addComponent(jRadioButtonTass64DotNullZeroText)
                    .addComponent(jScrollPaneTass64DotNullZeroText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64DotTextNZeroText)
                    .addComponent(jScrollPaneTass64DotTextNZeroText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64HighTextDeclaration)
                    .addComponent(jRadioButtonTass64DotShiftHighText)
                    .addComponent(jScrollPaneTass64DotShiftHighText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64DotTextSHighText)
                    .addComponent(jScrollPaneTass64DotTextSHighText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64ShiftTextDeclaration)
                    .addComponent(jRadioButtonTass64DotShiftlShiftText)
                    .addComponent(jScrollPaneTass64DotShiftlShiftText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64DotTextLShiftText)
                    .addComponent(jScrollPaneTass64DotTextLShiftText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass65ScreenTextDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64DotTextScreenText)
                    .addComponent(jScrollPaneTass64DotTextScreenText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass65PetasciiTextDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64DotTextPetasciiText)
                    .addComponent(jScrollPaneTass64DotTextPetasciiText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        jScrollPaneTass64.setViewportView(jPanelTass64);

        jTabbedPaneAssembler.addTab("Tass64", jScrollPaneTass64);

        jScrollPaneGlass.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPaneGlass.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jLabelGlassLabelDeclaration.setText("Label:");

        jScrollPaneGlassByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneGlassByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneGlassLabelName.setEditable(false);
        jTextPaneGlassLabelName.setContentType("text/html"); // NOI18N
        jTextPaneGlassLabelName.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <font color='black'>zzzz</font>\n    </p\n  </body>\n</html>\n");
        jScrollPaneGlassByte.setViewportView(jTextPaneGlassLabelName);

        jLabelGlassByteDeclaration.setText("Byte:");

        jScrollPaneGlassWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneGlassWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxDotByte1.setEditable(false);
        jTextPaneTmpxDotByte1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxDotByte1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .byte</b> <font color='red'>$xx</font><br>\n     <b> .byte</b> <font color='blue'>dd</font><br>\n     <b> .byte</b> <font color='green'>%bb</font><br>\n     <b> .byte</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneGlassWord.setViewportView(jTextPaneTmpxDotByte1);

        jLabelTmpxWordDeclaration1.setText("Word:");

        jRadioButtonTmpxDotWord1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxDotWord1ItemStateChanged(evt);
            }
        });

        jScrollPaneGlassDotWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneGlassDotWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxDotWord1.setEditable(false);
        jTextPaneTmpxDotWord1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxDotWord1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .word</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneGlassDotWord.setViewportView(jTextPaneTmpxDotWord1);

        jLabelGlassCommentDeclaration.setText("Comment:");

        jRadioButtonTmpxSemicolonComment1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxSemicolonComment1ItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxSemicolonComment1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxSemicolonComment1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxSemicolonComment1.setEditable(false);
        jTextPaneTmpxSemicolonComment1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxSemicolonComment1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>;</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxSemicolonComment1.setViewportView(jTextPaneTmpxSemicolonComment1);

        jLabelTmpxBlockCommentDeclaration1.setText("Block Comment:");

        jRadioButtonTmpxSemicolonBlockComment1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxSemicolonBlockComment1ItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxSemicolonBlockComment1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxSemicolonBlockComment1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxSemicolonBlockComment1.setEditable(false);
        jTextPaneTmpxSemicolonBlockComment1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxSemicolonBlockComment1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>;</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxSemicolonBlockComment1.setViewportView(jTextPaneTmpxSemicolonBlockComment1);

        jLabelGlassOriginDeclaration.setText("Origin:");

        jRadioButtonGlassAsterixOrigin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonGlassAsterixOriginItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxAsterixOrigin1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxAsterixOrigin1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneGlassAsterixOrigin.setEditable(false);
        jTextPaneGlassAsterixOrigin.setContentType("text/html"); // NOI18N
        jTextPaneGlassAsterixOrigin.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>*=</b>$xxyy\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxAsterixOrigin1.setViewportView(jTextPaneGlassAsterixOrigin);

        jRadioButtonTmpxDotIfBlockComment1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxDotIfBlockComment1ItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxDotIfBlockComment1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxDotIfBlockComment1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxDotIfBlockComment1.setEditable(false);
        jTextPaneTmpxDotIfBlockComment1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxDotIfBlockComment1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>if 0</b> xxx <b'>endif</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxDotIfBlockComment1.setViewportView(jTextPaneTmpxDotIfBlockComment1);

        jLabelGlassStartingDeclaration.setText("Starting:");

        buttonGroupGlassStarting.add(jRadioButtonGlassFakeStarting);
        jRadioButtonGlassFakeStarting.setSelected(true);
        jRadioButtonGlassFakeStarting.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonGlassFakeStartingItemStateChanged(evt);
            }
        });

        jScrollPaneGlassFakeStarting.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneGlassFakeStarting.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneGlassFakeStarting.setEditable(false);
        jTextPaneGlassFakeStarting.setContentType("text/html"); // NOI18N
        jTextPaneGlassFakeStarting.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>cpu</b>  equ 80\n    </p>\n  </body>\n</html>\n");
        jScrollPaneGlassFakeStarting.setViewportView(jTextPaneGlassFakeStarting);

        jLabelTmpxMonoSpriteDeclaration1.setText("Monocolor sprite:");

        jLabelTmpxMultiSpriteDeclaration1.setText("Multicolor sprite:");

        jRadioButtonTmpxByteHexMonoSprite1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxByteHexMonoSprite1ItemStateChanged(evt);
            }
        });

        jRadioButtonTmpxByteHexMultiSprite1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxByteHexMultiSprite1ItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxByteHexMultiSprite1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxByteHexMultiSprite1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        TmpxPaneTmpxByteHexMultiSprite1.setEditable(false);
        TmpxPaneTmpxByteHexMultiSprite1.setContentType("text/html"); // NOI18N
        TmpxPaneTmpxByteHexMultiSprite1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> [byte]</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxByteHexMultiSprite1.setViewportView(TmpxPaneTmpxByteHexMultiSprite1);

        jScrollPaneTmpxByteHexMonoSprite1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxByteHexMonoSprite1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxByteHexMonoSprite1.setEditable(false);
        jTextPaneTmpxByteHexMonoSprite1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxByteHexMonoSprite1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> [byte]</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxByteHexMonoSprite1.setViewportView(jTextPaneTmpxByteHexMonoSprite1);

        jRadioButtonTmpxByteBinMonoSprite1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxByteBinMonoSprite1ItemStateChanged(evt);
            }
        });

        jRadioButtonTmpxByteBinMultiSprite1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxByteBinMultiSprite1ItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxByteBinMultiSprite1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxByteBinMultiSprite1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxByteBinMultiSprite1.setEditable(false);
        jTextPaneTmpxByteBinMultiSprite1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxByteBinMultiSprite1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[byte]</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxByteBinMultiSprite1.setViewportView(jTextPaneTmpxByteBinMultiSprite1);

        jScrollPaneTmpxByteBinMonoSprite1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxByteBinMonoSprite1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxByteBinMonoSprite1.setEditable(false);
        jTextPaneTmpxByteBinMonoSprite1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxByteBinMonoSprite1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[byte]</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxByteBinMonoSprite1.setViewportView(jTextPaneTmpxByteBinMonoSprite1);

        jRadioButtonTmpxMacroHexMonoSprite1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxMacroHexMonoSprite1ItemStateChanged(evt);
            }
        });

        jRadioButtonTmpxMacroHexMultiSprite1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxMacroHexMultiSprite1ItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxMacroHexMultiSprite1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxMacroHexMultiSprite1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxMacroHexMultiSprite1.setEditable(false);
        jTextPaneTmpxMacroHexMultiSprite1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxMacroHexMultiSprite1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxMacroHexMultiSprite1.setViewportView(jTextPaneTmpxMacroHexMultiSprite1);

        jScrollPaneTmpxMacroHexMonoSprite1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxMacroHexMonoSprite1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxMacroHexMonoSprite1.setEditable(false);
        jTextPaneTmpxMacroHexMonoSprite1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxMacroHexMonoSprite1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxMacroHexMonoSprite1.setViewportView(jTextPaneTmpxMacroHexMonoSprite1);

        jRadioButtonTmpxMacroBinMonoSprite1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxMacroBinMonoSprite1ItemStateChanged(evt);
            }
        });

        jRadioButtonTmpxMacroBinMultiSprite1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxMacroBinMultiSprite1ItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxMacroBinMultiSprite1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxMacroBinMultiSprite1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxMacroBinMultiSprite1.setEditable(false);
        jTextPaneTmpxMacroBinMultiSprite1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxMacroBinMultiSprite1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxMacroBinMultiSprite1.setViewportView(jTextPaneTmpxMacroBinMultiSprite1);

        jScrollPaneTmpxMacroBinMonoSprite1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxMacroBinMonoSprite1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxMacroBinMonoSprite1.setEditable(false);
        jTextPaneTmpxMacroBinMonoSprite1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxMacroBinMonoSprite1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxMacroBinMonoSprite1.setViewportView(jTextPaneTmpxMacroBinMonoSprite1);

        jLabelTmpxTribyteDeclaration1.setText("Tribyte:");

        jRadioButtonTmpxMacroTribyte1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxMacroTribyte1ItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxMacroTribyte1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxMacroTribyte1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxMacroTribyte1.setEditable(false);
        jTextPaneTmpxMacroTribyte1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxMacroTribyte1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac]</b> <font color='red'>$xxyyzz</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxMacroTribyte1.setViewportView(jTextPaneTmpxMacroTribyte1);

        jLabelTmpxLongDeclaration1.setText("Long:");

        jRadioButtonTmpxMacroLong1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxMacroLong1ItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxMacroLong1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxMacroLong1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxMacroLong1.setEditable(false);
        jTextPaneTmpxMacroLong1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxMacroLong1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac]</b> <font color='red'>$xxyyzzkk</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxMacroLong1.setViewportView(jTextPaneTmpxMacroLong1);

        jLabelTmpxWordSwappedDeclaration1.setText("Word Swapped:");

        jRadioButtonTmpxMacroWordSwapped1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxMacroWordSwapped1ItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxMacroWordSwapped1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxMacroWordSwapped1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxMacroWordSwapped1.setEditable(false);
        jTextPaneTmpxMacroWordSwapped1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxMacroWordSwapped1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac]</b> <font color='red'>$yyxx</font><br>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxMacroWordSwapped1.setViewportView(jTextPaneTmpxMacroWordSwapped1);

        jLabelTmpxTextDeclaration1.setText("Text:");

        jRadioButtonTmpxDotText1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxDotText1ItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxDotText1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxDotText1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxDotText1.setEditable(false);
        jTextPaneTmpxDotText1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxDotText1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxDotText1.setViewportView(jTextPaneTmpxDotText1);

        jLabelTmpxNumTextDeclaration1.setText("Text #num chars:");

        jRadioButtonTmpxPTextNumText1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxPTextNumText1ItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxDotTextNumText1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxDotTextNumText1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxDotTextNumText1.setEditable(false);
        jTextPaneTmpxDotTextNumText1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxDotTextNumText1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .ptext</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jTextPaneTmpxDotTextNumText1.setPreferredSize(new java.awt.Dimension(66, 20));
        jScrollPaneTmpxDotTextNumText1.setViewportView(jTextPaneTmpxDotTextNumText1);

        jLabelTmpxZeroTextDeclaration1.setText("Text 0 terminated:");

        jRadioButtonTmpxDotNullZeroText1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxDotNullZeroText1ItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxDotNullZeroText1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxDotNullZeroText1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxDotNullZeroText1.setEditable(false);
        jTextPaneTmpxDotNullZeroText1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxDotNullZeroText1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .null</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxDotNullZeroText1.setViewportView(jTextPaneTmpxDotNullZeroText1);

        jLabelTmpxAddressDeclaration1.setText("Address:");

        jRadioButtonTmpxDotAddrAddress1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxDotAddrAddress1ItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxDotAddrAddress1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxDotAddrAddress1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxDotAddrAddress1.setEditable(false);
        jTextPaneTmpxDotAddrAddress1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxDotAddrAddress1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .addr</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxDotAddrAddress1.setViewportView(jTextPaneTmpxDotAddrAddress1);

        jLabelTmpxStackWordDeclaration1.setText("Stack Word:");

        jRadioButtonTmpxDotRdaStackWord1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxDotRdaStackWord1ItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxDotRtaStackWord1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxDotRtaStackWord1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxDotRtaStackWord1.setEditable(false);
        jTextPaneTmpxDotRtaStackWord1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxDotRtaStackWord1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .rta</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxDotRtaStackWord1.setViewportView(jTextPaneTmpxDotRtaStackWord1);

        jLabelTmpxHighTextDeclaration1.setText("Text '1' terminated:");

        jRadioButtonTmpxDotShiftHighText1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxDotShiftHighText1ItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxDotShiftHighText1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxDotShiftHighText1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxDotShiftHighText1.setEditable(false);
        jTextPaneTmpxDotShiftHighText1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxDotShiftHighText1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .shift</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jTextPaneTmpxDotShiftHighText1.setPreferredSize(new java.awt.Dimension(66, 20));
        jScrollPaneTmpxDotShiftHighText1.setViewportView(jTextPaneTmpxDotShiftHighText1);

        jLabelTmpxShiftTextDeclaration1.setText("Text left shifted:");

        jRadioButtonTmpxDotShiflShiftText1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxDotShiflShiftText1ItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxDotShiftlShiftText1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxDotShiftlShiftText1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxDotShiflShiftText1.setEditable(false);
        jTextPaneTmpxDotShiflShiftText1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxDotShiflShiftText1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .shiftl</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jTextPaneTmpxDotShiflShiftText1.setPreferredSize(new java.awt.Dimension(66, 20));
        jScrollPaneTmpxDotShiftlShiftText1.setViewportView(jTextPaneTmpxDotShiflShiftText1);

        jLabelTmpxScreenTextDeclaration1.setText("Text to screen code:");

        jRadioButtonTmpxDotScreenText1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxDotScreenText1ItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxDotScreenText1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxDotScreenText1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxDotScreenText1.setEditable(false);
        jTextPaneTmpxDotScreenText1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxDotScreenText1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .screen</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxDotScreenText1.setViewportView(jTextPaneTmpxDotScreenText1);

        jLabelTmpxPetasciiTextDeclaration1.setText("Text to petascii code:");

        jRadioButtonTmpxDotPetasciiText1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxDotPetasciiText1ItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxDotPetasciiText1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxDotPetasciiText1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxDotPetasciiText1.setEditable(false);
        jTextPaneTmpxDotPetasciiText1.setContentType("text/html"); // NOI18N
        jTextPaneTmpxDotPetasciiText1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxDotPetasciiText1.setViewportView(jTextPaneTmpxDotPetasciiText1);

        javax.swing.GroupLayout jPanelGlassLayout = new javax.swing.GroupLayout(jPanelGlass);
        jPanelGlass.setLayout(jPanelGlassLayout);
        jPanelGlassLayout.setHorizontalGroup(
            jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGlassLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelGlassStartingDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelGlassOriginDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelGlassCommentDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTmpxBlockCommentDeclaration1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTmpxHighTextDeclaration1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTmpxShiftTextDeclaration1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTmpxScreenTextDeclaration1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelGlassLabelDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelGlassByteDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTmpxWordDeclaration1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTmpxWordSwappedDeclaration1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTmpxTribyteDeclaration1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTmpxLongDeclaration1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTmpxAddressDeclaration1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTmpxStackWordDeclaration1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTmpxMonoSpriteDeclaration1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTmpxMultiSpriteDeclaration1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTmpxTextDeclaration1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTmpxNumTextDeclaration1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTmpxZeroTextDeclaration1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTmpxPetasciiTextDeclaration1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonGlassFakeStarting)
                    .addComponent(jRadioButtonGlassAsterixOrigin)
                    .addComponent(jRadioButtonTmpxSemicolonComment1)
                    .addComponent(jRadioButtonTmpxSemicolonBlockComment1)
                    .addComponent(jRadioButtonGlassLabelName)
                    .addComponent(jRadioButtonGlassDotByte)
                    .addComponent(jRadioButtonTmpxDotWord1)
                    .addComponent(jRadioButtonTmpxMacroWordSwapped1)
                    .addComponent(jRadioButtonTmpxMacroTribyte1)
                    .addComponent(jRadioButtonTmpxMacroLong1)
                    .addComponent(jRadioButtonTmpxDotAddrAddress1)
                    .addComponent(jRadioButtonTmpxDotRdaStackWord1)
                    .addComponent(jRadioButtonTmpxByteHexMonoSprite1)
                    .addComponent(jRadioButtonTmpxByteHexMultiSprite1)
                    .addComponent(jRadioButtonTmpxDotText1)
                    .addComponent(jRadioButtonTmpxPTextNumText1)
                    .addComponent(jRadioButtonTmpxDotNullZeroText1)
                    .addComponent(jRadioButtonTmpxDotShiftHighText1)
                    .addComponent(jRadioButtonTmpxDotShiflShiftText1)
                    .addComponent(jRadioButtonTmpxDotScreenText1)
                    .addComponent(jRadioButtonTmpxDotPetasciiText1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneGlassFakeStarting)
                    .addComponent(jScrollPaneTmpxAsterixOrigin1)
                    .addComponent(jScrollPaneTmpxSemicolonComment1)
                    .addComponent(jScrollPaneTmpxSemicolonBlockComment1)
                    .addComponent(jScrollPaneGlassByte)
                    .addComponent(jScrollPaneGlassWord)
                    .addComponent(jScrollPaneGlassDotWord)
                    .addComponent(jScrollPaneTmpxMacroWordSwapped1)
                    .addComponent(jScrollPaneTmpxMacroTribyte1)
                    .addComponent(jScrollPaneTmpxMacroLong1, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                    .addComponent(jScrollPaneTmpxDotAddrAddress1)
                    .addComponent(jScrollPaneTmpxDotRtaStackWord1)
                    .addComponent(jScrollPaneTmpxByteHexMonoSprite1)
                    .addComponent(jScrollPaneTmpxByteHexMultiSprite1)
                    .addComponent(jScrollPaneTmpxDotText1)
                    .addComponent(jScrollPaneTmpxDotTextNumText1)
                    .addComponent(jScrollPaneTmpxDotNullZeroText1)
                    .addComponent(jScrollPaneTmpxDotShiftHighText1)
                    .addComponent(jScrollPaneTmpxDotShiftlShiftText1)
                    .addComponent(jScrollPaneTmpxDotScreenText1)
                    .addComponent(jScrollPaneTmpxDotPetasciiText1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonTmpxDotIfBlockComment1)
                    .addComponent(jRadioButtonTmpxByteBinMonoSprite1)
                    .addComponent(jRadioButtonTmpxByteBinMultiSprite1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPaneTmpxByteBinMonoSprite1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneTmpxDotIfBlockComment1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addComponent(jScrollPaneTmpxByteBinMultiSprite1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonTmpxMacroHexMonoSprite1)
                    .addComponent(jRadioButtonTmpxMacroHexMultiSprite1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneTmpxMacroHexMonoSprite1)
                    .addComponent(jScrollPaneTmpxMacroHexMultiSprite1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelGlassLayout.createSequentialGroup()
                        .addComponent(jRadioButtonTmpxMacroBinMultiSprite1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneTmpxMacroBinMultiSprite1))
                    .addGroup(jPanelGlassLayout.createSequentialGroup()
                        .addComponent(jRadioButtonTmpxMacroBinMonoSprite1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneTmpxMacroBinMonoSprite1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25))
        );
        jPanelGlassLayout.setVerticalGroup(
            jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelGlassLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelGlassStartingDeclaration)
                    .addComponent(jRadioButtonGlassFakeStarting)
                    .addComponent(jScrollPaneGlassFakeStarting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelGlassOriginDeclaration)
                    .addComponent(jRadioButtonGlassAsterixOrigin)
                    .addComponent(jScrollPaneTmpxAsterixOrigin1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelGlassCommentDeclaration)
                    .addComponent(jRadioButtonTmpxSemicolonComment1)
                    .addComponent(jScrollPaneTmpxSemicolonComment1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelGlassLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jRadioButtonTmpxDotIfBlockComment1)
                            .addComponent(jScrollPaneTmpxDotIfBlockComment1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelGlassLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelTmpxBlockCommentDeclaration1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonTmpxSemicolonBlockComment1)
                            .addComponent(jScrollPaneTmpxSemicolonBlockComment1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelGlassLabelDeclaration)
                            .addComponent(jRadioButtonGlassLabelName)
                            .addComponent(jScrollPaneGlassByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelGlassByteDeclaration)
                            .addComponent(jRadioButtonGlassDotByte)
                            .addComponent(jScrollPaneGlassWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelTmpxWordDeclaration1)
                            .addComponent(jRadioButtonTmpxDotWord1)
                            .addComponent(jScrollPaneGlassDotWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelTmpxWordSwappedDeclaration1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonTmpxMacroWordSwapped1)
                            .addComponent(jScrollPaneTmpxMacroWordSwapped1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelTmpxTribyteDeclaration1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonTmpxMacroTribyte1)
                            .addComponent(jScrollPaneTmpxMacroTribyte1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelTmpxLongDeclaration1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonTmpxMacroLong1)
                            .addComponent(jScrollPaneTmpxMacroLong1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelTmpxAddressDeclaration1)
                            .addComponent(jRadioButtonTmpxDotAddrAddress1)
                            .addComponent(jScrollPaneTmpxDotAddrAddress1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelTmpxStackWordDeclaration1)
                            .addComponent(jRadioButtonTmpxDotRdaStackWord1)
                            .addComponent(jScrollPaneTmpxDotRtaStackWord1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxMonoSpriteDeclaration1)
                    .addComponent(jRadioButtonTmpxByteHexMonoSprite1)
                    .addComponent(jScrollPaneTmpxByteHexMonoSprite1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTmpxByteBinMonoSprite1)
                    .addComponent(jScrollPaneTmpxByteBinMonoSprite1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTmpxMacroHexMonoSprite1)
                    .addComponent(jScrollPaneTmpxMacroHexMonoSprite1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTmpxMacroBinMonoSprite1)
                    .addComponent(jScrollPaneTmpxMacroBinMonoSprite1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxMultiSpriteDeclaration1)
                    .addComponent(jRadioButtonTmpxByteHexMultiSprite1)
                    .addComponent(jScrollPaneTmpxByteHexMultiSprite1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTmpxByteBinMultiSprite1)
                    .addComponent(jScrollPaneTmpxByteBinMultiSprite1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTmpxMacroHexMultiSprite1)
                    .addComponent(jScrollPaneTmpxMacroHexMultiSprite1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTmpxMacroBinMultiSprite1)
                    .addComponent(jScrollPaneTmpxMacroBinMultiSprite1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxTextDeclaration1)
                    .addComponent(jRadioButtonTmpxDotText1)
                    .addComponent(jScrollPaneTmpxDotText1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxNumTextDeclaration1)
                    .addComponent(jRadioButtonTmpxPTextNumText1)
                    .addComponent(jScrollPaneTmpxDotTextNumText1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxZeroTextDeclaration1)
                    .addComponent(jRadioButtonTmpxDotNullZeroText1)
                    .addComponent(jScrollPaneTmpxDotNullZeroText1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxHighTextDeclaration1)
                    .addComponent(jRadioButtonTmpxDotShiftHighText1)
                    .addComponent(jScrollPaneTmpxDotShiftHighText1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxShiftTextDeclaration1)
                    .addComponent(jRadioButtonTmpxDotShiflShiftText1)
                    .addComponent(jScrollPaneTmpxDotShiftlShiftText1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxScreenTextDeclaration1)
                    .addComponent(jRadioButtonTmpxDotScreenText1)
                    .addComponent(jScrollPaneTmpxDotScreenText1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelGlassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxPetasciiTextDeclaration1)
                    .addComponent(jRadioButtonTmpxDotPetasciiText1)
                    .addComponent(jScrollPaneTmpxDotPetasciiText1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        jScrollPaneGlass.setViewportView(jPanelGlass);

        jTabbedPaneAssembler.addTab("Glass", jScrollPaneGlass);

        javax.swing.GroupLayout jPanelDisassemblerLayout = new javax.swing.GroupLayout(jPanelDisassembler);
        jPanelDisassembler.setLayout(jPanelDisassemblerLayout);
        jPanelDisassemblerLayout.setHorizontalGroup(
            jPanelDisassemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDisassemblerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelAutoComment, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxAssembler, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDisassemblerLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jTabbedPaneAssembler, javax.swing.GroupLayout.PREFERRED_SIZE, 814, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelDisassemblerLayout.setVerticalGroup(
            jPanelDisassemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDisassemblerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDisassemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAutoComment)
                    .addComponent(jComboBoxAssembler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPaneAssembler, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE))
        );

        jTabbedPaneOption.addTab("Disassembler", jPanelDisassembler);

        buttonGroupLook.add(jRadioButtonLookJava);
        jRadioButtonLookJava.setText("Java");
        jRadioButtonLookJava.setEnabled(false);
        jRadioButtonLookJava.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookJavaItemStateChanged(evt);
            }
        });

        buttonGroupLook.add(jRadioButtonLookMac);
        jRadioButtonLookMac.setText("Machintosh");
        jRadioButtonLookMac.setEnabled(false);
        jRadioButtonLookMac.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookMacItemStateChanged(evt);
            }
        });

        buttonGroupLook.add(jRadioButtonLookMetal);
        jRadioButtonLookMetal.setText("Metal");
        jRadioButtonLookMetal.setEnabled(false);
        jRadioButtonLookMetal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookMetalItemStateChanged(evt);
            }
        });

        buttonGroupLook.add(jRadioButtonLookWin);
        jRadioButtonLookWin.setText("Windows style");
        jRadioButtonLookWin.setEnabled(false);
        jRadioButtonLookWin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookWinItemStateChanged(evt);
            }
        });

        buttonGroupLook.add(jRadioButtonLookGtk);
        jRadioButtonLookGtk.setText("GTK style");
        jRadioButtonLookGtk.setEnabled(false);
        jRadioButtonLookGtk.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookGtkItemStateChanged(evt);
            }
        });

        buttonGroupLook.add(jRadioButtonLookNimbus);
        jRadioButtonLookNimbus.setText("Nimbus");
        jRadioButtonLookNimbus.setEnabled(false);
        jRadioButtonLookNimbus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookNimbusItemStateChanged(evt);
            }
        });

        jLabelLook.setText("Look & Feel:");

        jLabelTheme.setText("Theme:");

        buttonGroupTheme.add(jRadioButtonOcean);
        jRadioButtonOcean.setText("Ocean");
        jRadioButtonOcean.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonOceanItemStateChanged(evt);
            }
        });

        buttonGroupTheme.add(jRadioButtonSteel);
        jRadioButtonSteel.setText("Steel");
        jRadioButtonSteel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonSteelItemStateChanged(evt);
            }
        });

        buttonGroupTheme.add(jRadioButtonAqua);
        jRadioButtonAqua.setText("Aqua");
        jRadioButtonAqua.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAquaItemStateChanged(evt);
            }
        });

        buttonGroupTheme.add(jRadioButtonCharcoal);
        jRadioButtonCharcoal.setText("Charcoal");
        jRadioButtonCharcoal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCharcoalItemStateChanged(evt);
            }
        });

        buttonGroupTheme.add(jRadioButtonHighContrast);
        jRadioButtonHighContrast.setText("High Contrast");
        jRadioButtonHighContrast.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonHighContrastItemStateChanged(evt);
            }
        });

        buttonGroupTheme.add(jRadioButtonEmerald);
        jRadioButtonEmerald.setText("Emerald");
        jRadioButtonEmerald.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonEmeraldItemStateChanged(evt);
            }
        });

        buttonGroupTheme.add(jRadioButtonRuby);
        jRadioButtonRuby.setText("Ruby");
        jRadioButtonRuby.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonRubyItemStateChanged(evt);
            }
        });

        buttonGroupLook.add(jRadioButtonLookCWin);
        jRadioButtonLookCWin.setText("Windows classic style");
        jRadioButtonLookCWin.setEnabled(false);
        jRadioButtonLookCWin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookCWinItemStateChanged(evt);
            }
        });

        jLabelBracket.setFont(new java.awt.Font("Tahoma", 0, 64)); // NOI18N
        jLabelBracket.setText("{");

        buttonGroupLook.add(jRadioButtonLookSynth);
        jRadioButtonLookSynth.setText("Synth based");
        jRadioButtonLookSynth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookSynthItemStateChanged(evt);
            }
        });

        jLabelArrow.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabelArrow.setText("----------------->");

        jListLaf.setModel(listModel);
        jListLaf.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListLaf.setEnabled(false);
        jListLaf.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListLafValueChanged(evt);
            }
        });
        jScrollPaneList.setViewportView(jListLaf);

        jLabelFlatLaf.setText("Flat laf look & feel:");

        javax.swing.GroupLayout jPanelLookLayout = new javax.swing.GroupLayout(jPanelLook);
        jPanelLook.setLayout(jPanelLookLayout);
        jPanelLookLayout.setHorizontalGroup(
            jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLookLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelLookLayout.createSequentialGroup()
                        .addComponent(jRadioButtonLookCWin, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelBracket)
                        .addGap(13, 13, 13)
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelTheme, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonOcean, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonSteel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonCharcoal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonAqua, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonHighContrast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonEmerald, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonRuby, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelLookLayout.createSequentialGroup()
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jRadioButtonLookSynth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelLook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonLookJava, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonLookMac, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonLookMetal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonLookWin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                            .addComponent(jRadioButtonLookNimbus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonLookGtk, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelArrow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPaneList, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabelFlatLaf, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE))
                .addContainerGap(247, Short.MAX_VALUE))
        );
        jPanelLookLayout.setVerticalGroup(
            jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLookLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLookLayout.createSequentialGroup()
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelTheme)
                            .addComponent(jLabelFlatLaf))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelLookLayout.createSequentialGroup()
                                .addComponent(jRadioButtonOcean)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonSteel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonAqua)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonCharcoal)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPaneList)))
                    .addGroup(jPanelLookLayout.createSequentialGroup()
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanelLookLayout.createSequentialGroup()
                                .addComponent(jLabelLook)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButtonLookJava)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonLookMac)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonLookMetal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonLookWin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jRadioButtonLookCWin)
                                    .addComponent(jRadioButtonHighContrast)))
                            .addComponent(jLabelBracket, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButtonLookGtk)
                            .addComponent(jRadioButtonEmerald))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButtonLookNimbus)
                            .addComponent(jRadioButtonRuby))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonLookSynth))
                        .addContainerGap(389, Short.MAX_VALUE))))
        );

        jTabbedPaneOption.addTab("Look & Feel", jPanelLook);

        jPanelOption.add(jTabbedPaneOption, java.awt.BorderLayout.CENTER);

        jButtonLoad.setText("Load");
        jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadActionPerformed(evt);
            }
        });
        jPanelDn.add(jButtonLoad);

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        jPanelDn.add(jButtonSave);

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });
        jPanelDn.add(jButtonClose);

        jPanelOption.add(jPanelDn, java.awt.BorderLayout.SOUTH);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 19, Short.MAX_VALUE)
                .addComponent(jPanelOption, javax.swing.GroupLayout.PREFERRED_SIZE, 817, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jPanelOption, javax.swing.GroupLayout.DEFAULT_SIZE, 907, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed
      if(!FileManager.instance.readOptionFile(FileManager.OPTION_FILE, option)) {
        JOptionPane.showMessageDialog(this, "Error reading the option file", "Loading error", JOptionPane.ERROR_MESSAGE);
      } else {
          JOptionPane.showMessageDialog(this, "Loading done", "Loading options", JOptionPane.INFORMATION_MESSAGE);
          applyOption();          
        }
    }//GEN-LAST:event_jButtonLoadActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
      option.custom=jTextAreaHeather.getText(); 
      if (!FileManager.instance.writeOptionFile(FileManager.OPTION_FILE, option)) {
        JOptionPane.showMessageDialog(this, "Error writing the option file", "Saving error", JOptionPane.ERROR_MESSAGE);
      } else JOptionPane.showMessageDialog(this, "Saving done", "Saving options", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
      option.custom=jTextAreaHeather.getText();
      SwingUtilities.invokeLater(new Runnable() {
        public void run() {
          model.fireTableDataChanged();  
        }
      });
       
      setVisible(false);
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void jCheckBoxErasePlusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxErasePlusItemStateChanged
        option.erasePlus=jCheckBoxErasePlus.isSelected();
    }//GEN-LAST:event_jCheckBoxErasePlusItemStateChanged

    private void jCheckBoxOpcodeFormattingSourceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxOpcodeFormattingSourceItemStateChanged
        option.opcodeUpperCaseSource=jCheckBoxOpcodeFormattingSource.isSelected();
    }//GEN-LAST:event_jCheckBoxOpcodeFormattingSourceItemStateChanged

    private void jTextFieldSidFreqHiFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldSidFreqHiFocusLost
        String txt=jTextFieldSidFreqHi.getText();
        txt=txt.replaceAll(" ", "");
        if ("".equals(txt)) option.sidFreqHiLabel="frequencyHi";
        else option.sidFreqHiLabel=txt;
    }//GEN-LAST:event_jTextFieldSidFreqHiFocusLost

    private void jTextFieldSidFreqLoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldSidFreqLoFocusLost
        String txt=jTextFieldSidFreqLo.getText();
        txt=txt.replaceAll(" ", "");
        if ("".equals(txt)) option.sidFreqLoLabel="frequencyLo";
        else option.sidFreqLoLabel=txt;
    }//GEN-LAST:event_jTextFieldSidFreqLoFocusLost

    private void jTextFieldPlaySoundFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldPlaySoundFocusLost
        String txt=jTextFieldPlaySound.getText();
        txt=txt.replaceAll(" ", "");
        if ("".equals(txt)) option.psidPlaySoundsLabel="playSound";
        else option.psidPlaySoundsLabel=txt;
    }//GEN-LAST:event_jTextFieldPlaySoundFocusLost

    private void jTextFieldInitSongsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldInitSongsFocusLost
        String txt=jTextFieldInitSongs.getText();
        txt=txt.replaceAll(" ", "");
        if ("".equals(txt)) option.psidInitSongsLabel="initSongs";
        else option.psidInitSongsLabel=txt;
    }//GEN-LAST:event_jTextFieldInitSongsFocusLost

    private void jSpinnerMaxByteAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxByteAggregateStateChanged
        option.maxByteAggregate=(Integer)jSpinnerMaxByteAggregate.getValue();
    }//GEN-LAST:event_jSpinnerMaxByteAggregateStateChanged

    private void jSpinnerMaxLengthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxLengthStateChanged
        option.maxLabelLength=(Integer)jSpinnerMaxLength.getValue();
    }//GEN-LAST:event_jSpinnerMaxLengthStateChanged

    private void jCheckBoxUndefinedCodeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxUndefinedCodeItemStateChanged
        option.useAsCode=jCheckBoxUndefinedCode.isSelected();
    }//GEN-LAST:event_jCheckBoxUndefinedCodeItemStateChanged

    private void jCheckBoxOpcodeFormattingPreviewItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxOpcodeFormattingPreviewItemStateChanged
        option.opcodeUpperCasePreview=jCheckBoxOpcodeFormattingPreview.isSelected();
    }//GEN-LAST:event_jCheckBoxOpcodeFormattingPreviewItemStateChanged

    private void jCheckBoxEraseDCommItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxEraseDCommItemStateChanged
        option.eraseDComm=jCheckBoxEraseDComm.isSelected();
    }//GEN-LAST:event_jCheckBoxEraseDCommItemStateChanged

    private void jRadioButtonLangItalianItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLangItalianItemStateChanged
        option.commentLanguage=C64Dasm.LANG_ITALIAN;
    }//GEN-LAST:event_jRadioButtonLangItalianItemStateChanged

    private void jRadioButtonLangEnglishItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLangEnglishItemStateChanged
        option.commentLanguage=C64Dasm.LANG_ENGLISH;
    }//GEN-LAST:event_jRadioButtonLangEnglishItemStateChanged

    private void jRadioButtonStyle3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonStyle3ItemStateChanged
        option.illegalOpcodeMode=M6510Dasm.MODE3;
    }//GEN-LAST:event_jRadioButtonStyle3ItemStateChanged

    private void jRadioButtonStyle2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonStyle2ItemStateChanged
        option.illegalOpcodeMode=M6510Dasm.MODE2;
    }//GEN-LAST:event_jRadioButtonStyle2ItemStateChanged

    private void jRadioButtonStyle1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonStyle1ItemStateChanged
        option.illegalOpcodeMode=M6510Dasm.MODE1;
    }//GEN-LAST:event_jRadioButtonStyle1ItemStateChanged

    private void jRadioButtonLookJavaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookJavaItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_MOTIF; 
        option.setLafName(actualLEF);
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);  
      }
    }//GEN-LAST:event_jRadioButtonLookJavaItemStateChanged

    private void jRadioButtonLookMacItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookMacItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_MAC;
        option.setLafName(actualLEF);   
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookMacItemStateChanged

    private void jRadioButtonLookMetalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookMetalItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_METAL;
        option.setLafName(actualLEF);    
        enableTheme();
        selectedTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme); 
      }
    }//GEN-LAST:event_jRadioButtonLookMetalItemStateChanged

    private void jRadioButtonLookWinItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookWinItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_WINDOWS;
        option.setLafName(actualLEF);    
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookWinItemStateChanged

    private void jRadioButtonLookGtkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookGtkItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_GTK;  
        option.setLafName(actualLEF);  
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookGtkItemStateChanged

    private void jRadioButtonLookNimbusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookNimbusItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_NIMBUS;
        option.setLafName(actualLEF);
        option.setTheme(Option.THEME_NULL);
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookNimbusItemStateChanged

    private void jRadioButtonLookCWinItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookCWinItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_CWINDOWS;
        option.setLafName(actualLEF);    
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookCWinItemStateChanged

    private void jRadioButtonLookSynthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookSynthItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_SYNTH;  
        option.setLafName(actualLEF);  
        disableTheme();
        jListLaf.setEnabled(true);
        
        actualLaf=(String)listModel.getElementAt(jListLaf.getSelectedIndex());
        option.setFlatLaf(actualLaf);
        Option.useLookAndFeel(actualLaf);
      }
    }//GEN-LAST:event_jRadioButtonLookSynthItemStateChanged

    private void jListLafValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListLafValueChanged
      if (!goFlat) return;
        
      if (evt != null && evt.getValueIsAdjusting()) {
        return;
      }
      if (evt == null) {
        return;
      }
      
      actualLaf=(String)listModel.getElementAt(jListLaf.getSelectedIndex());
      option.setFlatLaf(actualLaf);
      Option.useLookAndFeel(actualLaf);
    }//GEN-LAST:event_jListLafValueChanged

    private void jRadioButtonOceanItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonOceanItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_OCEAN);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonOceanItemStateChanged

    private void jRadioButtonSteelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonSteelItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_STEEL);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonSteelItemStateChanged

    private void jRadioButtonAquaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAquaItemStateChanged
     if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_AQUA);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }      
    }//GEN-LAST:event_jRadioButtonAquaItemStateChanged

    private void jRadioButtonCharcoalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCharcoalItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_CHARCOAL);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }    
    }//GEN-LAST:event_jRadioButtonCharcoalItemStateChanged

    private void jRadioButtonHighContrastItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonHighContrastItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_CONTRAST);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }      
    }//GEN-LAST:event_jRadioButtonHighContrastItemStateChanged

    private void jRadioButtonEmeraldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonEmeraldItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_EMERALD);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }     
    }//GEN-LAST:event_jRadioButtonEmeraldItemStateChanged

    private void jRadioButtonRubyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonRubyItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_RUBY);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      } 
    }//GEN-LAST:event_jRadioButtonRubyItemStateChanged

    private void jCheckBoxC64ZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64ZeroPageItemStateChanged
      option.commentC64ZeroPage=jCheckBoxC64ZeroPage.isSelected();
    }//GEN-LAST:event_jCheckBoxC64ZeroPageItemStateChanged

    private void jCheckBoxC64StackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64StackAreaItemStateChanged
      option.commentC64StackArea=jCheckBoxC64StackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxC64StackAreaItemStateChanged

    private void jCheckBoxC64_200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64_200AreaItemStateChanged
      option.commentC64_200Area=jCheckBoxC64_200Area.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC64_200AreaItemStateChanged

    private void jCheckBoxC64_300AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64_300AreaItemStateChanged
      option.commentC64_300Area=jCheckBoxC64_300Area.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC64_300AreaItemStateChanged

    private void jCheckBoxC64FreeAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64FreeAreaItemStateChanged
      option.commentC64BasicFreeArea=jCheckBoxC64FreeArea.isSelected();
    }//GEN-LAST:event_jCheckBoxC64FreeAreaItemStateChanged

    private void jCheckBoxC64BasicRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64BasicRomItemStateChanged
      option.commentC64BasicRom=jCheckBoxC64BasicRom.isSelected();
    }//GEN-LAST:event_jCheckBoxC64BasicRomItemStateChanged

    private void jCheckBoxC64FreeRamItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64FreeRamItemStateChanged
      option.commentC64FreeRam=jCheckBoxC64FreeRam.isSelected();
    }//GEN-LAST:event_jCheckBoxC64FreeRamItemStateChanged

    private void jCheckC64BoxVicIIItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckC64BoxVicIIItemStateChanged
      option.commentC64VicII=jCheckC64BoxVicII.isSelected();
    }//GEN-LAST:event_jCheckC64BoxVicIIItemStateChanged

    private void jCheckC64BoxSidItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckC64BoxSidItemStateChanged
      option.commentC64Sid=jCheckC64BoxSid.isSelected();
    }//GEN-LAST:event_jCheckC64BoxSidItemStateChanged

    private void jCheckBoxC64ColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64ColorItemStateChanged
      option.commentC64ColorArea=jCheckBoxC64Color.isSelected();
    }//GEN-LAST:event_jCheckBoxC64ColorItemStateChanged

    private void jCheckBoxC64Cia1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64Cia1ItemStateChanged
      option.commentC64Cia1=jCheckBoxC64Cia1.isSelected();
    }//GEN-LAST:event_jCheckBoxC64Cia1ItemStateChanged

    private void jCheckBoxC64Cia2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64Cia2ItemStateChanged
      option.commentC64Cia2=jCheckBoxC64Cia2.isSelected();
    }//GEN-LAST:event_jCheckBoxC64Cia2ItemStateChanged

    private void jCheckBoxC64KernalRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64KernalRomItemStateChanged
      option.commentC64KernalRom=jCheckBoxC64KernalRom.isSelected();
    }//GEN-LAST:event_jCheckBoxC64KernalRomItemStateChanged

    private void jCheckBoxC64ScreenAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64ScreenAreaItemStateChanged
      option.commentC64ScreenArea=jCheckBoxC64ScreenArea.isSelected();
    }//GEN-LAST:event_jCheckBoxC64ScreenAreaItemStateChanged

    private void jCheckBoxC1541ZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541ZeroPageItemStateChanged
      option.commentC1541ZeroPage=jCheckBoxC1541ZeroPage.isShowing();
    }//GEN-LAST:event_jCheckBoxC1541ZeroPageItemStateChanged

    private void jCheckBoxC1541StackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541StackAreaItemStateChanged
      option.commentC1541StackArea=jCheckBoxC64StackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541StackAreaItemStateChanged

    private void jCheckBoxC1541_200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541_200AreaItemStateChanged
      option.commentC1541_200Area=jCheckBoxC1541_200Area.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541_200AreaItemStateChanged

    private void jCheckBoxC1541Via1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Via1ItemStateChanged
      option.commentC1541Via1=jCheckBoxC1541Via1.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541Via1ItemStateChanged

    private void jCheckBoxC1541Via2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Via2ItemStateChanged
      option.commentC1541Via2=jCheckBoxC1541Via2.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541Via2ItemStateChanged

    private void jCheckBoxC1541KernalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541KernalItemStateChanged
     option.commentC1541Kernal=jCheckBoxC1541Kernal.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541KernalItemStateChanged

    private void jCheckBoxC1541Buffer0ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer0ItemStateChanged
      option.commentC1541Buffer0=jCheckBoxC1541Buffer0.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541Buffer0ItemStateChanged

    private void jCheckBoxC1541Buffer1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer1ItemStateChanged
      option.commentC1541Buffer1=jCheckBoxC1541Buffer1.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC1541Buffer1ItemStateChanged

    private void jCheckBoxC1541Buffer2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer2ItemStateChanged
      option.commentC1541Buffer2=jCheckBoxC1541Buffer2.isSelected();  
    }//GEN-LAST:event_jCheckBoxC1541Buffer2ItemStateChanged

    private void jCheckBoxC1541Buffer3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer3ItemStateChanged
      option.commentC1541Buffer3=jCheckBoxC1541Buffer3.isSelected();  
    }//GEN-LAST:event_jCheckBoxC1541Buffer3ItemStateChanged

    private void jCheckBoxC1541Buffer4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer4ItemStateChanged
      option.commentC1541Buffer4=jCheckBoxC1541Buffer4.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC1541Buffer4ItemStateChanged

    private void jCheckBoxPlus4ZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4ZeroPageItemStateChanged
      option.commentPlus4ZeroPage=jCheckBoxPlus4ZeroPage.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4ZeroPageItemStateChanged

    private void jCheckBoxPlus4StackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4StackAreaItemStateChanged
      option.commentPlus4StackArea=jCheckBoxPlus4StackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4StackAreaItemStateChanged

    private void jCheckBoxPlus4_200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_200AreaItemStateChanged
      option.commentPlus4_200Area=jCheckBoxPlus4_200Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_200AreaItemStateChanged

    private void jCheckBoxPlus4_300AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_300AreaItemStateChanged
      option.commentPlus4_300Area=jCheckBoxPlus4_300Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_300AreaItemStateChanged

    private void jCheckBoxPlus4_400AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_400AreaItemStateChanged
      option.commentPlus4_400Area=jCheckBoxPlus4_400Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_400AreaItemStateChanged

    private void jCheckBoxPlus4_500AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_500AreaItemStateChanged
      option.commentPlus4_500Area=jCheckBoxPlus4_500Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_500AreaItemStateChanged

    private void jCheckBoxPlus4_600AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_600AreaItemStateChanged
      option.commentPlus4_600Area=jCheckBoxPlus4_600Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_600AreaItemStateChanged

    private void jCheckBoxPlus4_700AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_700AreaItemStateChanged
      option.commentPlus4_700Area=jCheckBoxPlus4_700Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_700AreaItemStateChanged

    private void jCheckBoxPlus4ColorAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4ColorAreaItemStateChanged
      option.commentPlus4ColorArea=jCheckBoxPlus4ColorArea.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4ColorAreaItemStateChanged

    private void jCheckBoxPlus4VideoAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4VideoAreaItemStateChanged
      option.commentPlus4VideoArea=jCheckBoxPlus4VideoArea.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4VideoAreaItemStateChanged

    private void jCheckBoxPlus4BasicRamPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4BasicRamPItemStateChanged
      option.commentPlus4BasicRamP=jCheckBoxPlus4BasicRamP.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4BasicRamPItemStateChanged

    private void jCheckBoxPlus4LuminanceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4LuminanceItemStateChanged
      option.commentPlus4Luminance=jCheckBoxPlus4Luminance.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4LuminanceItemStateChanged

    private void jCheckBoxPlus4ColorBitmapItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4ColorBitmapItemStateChanged
      option.commentPlus4ColorBitmap=jCheckBoxPlus4ColorBitmap.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4ColorBitmapItemStateChanged

    private void jCheckBoxPlus4GraphicDataItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4GraphicDataItemStateChanged
      option.commentPlus4GraphicData=jCheckBoxPlus4GraphicData.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4GraphicDataItemStateChanged

    private void jCheckBoxPlus4BasicRamNItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4BasicRamNItemStateChanged
      option.commentPlus4BasicRamN=jCheckBoxPlus4BasicRamN.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4BasicRamNItemStateChanged

    private void jCheckBoxPlus4BasicRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4BasicRomItemStateChanged
      option.commentPlus4BasicRom=jCheckBoxPlus4BasicRom.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4BasicRomItemStateChanged

    private void jCheckBoxPlus4BasicExtItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4BasicExtItemStateChanged
      option.commentPlus4BasicExt=jCheckBoxPlus4BasicExt.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4BasicExtItemStateChanged

    private void jCheckBoxPlus4CaracterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4CaracterItemStateChanged
      option.commentPlus4Caracter=jCheckBoxPlus4Caracter.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4CaracterItemStateChanged

    private void jCheckBoxPlus4AciaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4AciaItemStateChanged
      option.commentPlus4Acia=jCheckBoxPlus4Acia.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4AciaItemStateChanged

    private void jCheckBoxPlus4_6529B_1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_6529B_1ItemStateChanged
      option.commentPlus4_6529B_1=jCheckBoxPlus4_6529B_1.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_6529B_1ItemStateChanged

    private void jCheckBoxPlus4_6529B_2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_6529B_2ItemStateChanged
      option.commentPlus4_6529B_2=jCheckBoxPlus4_6529B_2.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_6529B_2ItemStateChanged

    private void jCheckBoxPlus4TedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4TedItemStateChanged
      option.commentPlus4Ted=jCheckBoxPlus4Ted.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4TedItemStateChanged

    private void jCheckBoxPlus4KernalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4KernalItemStateChanged
      option.commentPlus4Kernal=jCheckBoxPlus4Kernal.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4KernalItemStateChanged

    private void jCheckBoxVic20StackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20StackAreaItemStateChanged
      option.commentVic20StackArea=jCheckBoxVic20StackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20StackAreaItemStateChanged

    private void jCheckBoxVic20ZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20ZeroPageItemStateChanged
      option.commentVic20ZeroPage=jCheckBoxVic20ZeroPage.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20ZeroPageItemStateChanged

    private void jCheckBoxVic20_200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_200AreaItemStateChanged
      option.commentVic20_200Area=jCheckBoxVic20_200Area.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20_200AreaItemStateChanged

    private void jCheckBoxVic20_300AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_300AreaItemStateChanged
      option.commentVic20_300Area=jCheckBoxVic20_300Area.isSelected();  
    }//GEN-LAST:event_jCheckBoxVic20_300AreaItemStateChanged

    private void jCheckBoxVic20_400AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_400AreaItemStateChanged
      option.commentVic20_400Area=jCheckBoxVic20_400Area.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20_400AreaItemStateChanged

    private void jCheckBoxVic20VicItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20VicItemStateChanged
      option.commentVic20Vic=jCheckBoxVic20Vic.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20VicItemStateChanged

    private void jCheckBoxVic20Via1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Via1ItemStateChanged
      option.commentVic20Via1=jCheckBoxVic20Via1.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20Via1ItemStateChanged

    private void jCheckBoxVic20Via2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Via2ItemStateChanged
      option.commentVic20Via2=jCheckBoxVic20Via2.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20Via2ItemStateChanged

    private void jCheckBoxVic20UserBasicItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20UserBasicItemStateChanged
      option.commentVic20UserBasic=jCheckBoxVic20UserBasic.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20UserBasicItemStateChanged

    private void jCheckBoxVic20ScreenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20ScreenItemStateChanged
      option.commentVic20Screen=jCheckBoxVic20Screen.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20ScreenItemStateChanged

    private void jCheckBoxVic20_8kExp1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_8kExp1ItemStateChanged
      option.commentVic20_8kExp1=jCheckBoxVic20_8kExp1.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20_8kExp1ItemStateChanged

    private void jCheckBoxVic20_8kExp2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_8kExp2ItemStateChanged
      option.commentVic20_8kExp2=jCheckBoxVic20_8kExp2.isSelected();    
    }//GEN-LAST:event_jCheckBoxVic20_8kExp2ItemStateChanged

    private void jCheckBoxVic20_8kExp3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_8kExp3ItemStateChanged
      option.commentVic20_8kExp3=jCheckBoxVic20_8kExp3.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20_8kExp3ItemStateChanged

    private void jCheckBoxVic20CharacterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20CharacterItemStateChanged
      option.commentVic20Character=jCheckBoxVic20Character.isSelected();  
    }//GEN-LAST:event_jCheckBoxVic20CharacterItemStateChanged

    private void jCheckBoxVic20ColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20ColorItemStateChanged
      option.commentVic20Color=jCheckBoxVic20Color.isSelected();   
    }//GEN-LAST:event_jCheckBoxVic20ColorItemStateChanged

    private void jCheckBoxVic20Block2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Block2ItemStateChanged
      option.commentVic20Block2=jCheckBoxVic20Block2.isSelected();  
    }//GEN-LAST:event_jCheckBoxVic20Block2ItemStateChanged

    private void jCheckBoxVic20Block3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Block3ItemStateChanged
      option.commentVic20Block3=jCheckBoxVic20Block3.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20Block3ItemStateChanged

    private void jCheckBoxVic20Block4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Block4ItemStateChanged
      option.commentVic20Block4=jCheckBoxVic20Block4.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20Block4ItemStateChanged

    private void jCheckBoxVic20BasicRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20BasicRomItemStateChanged
      option.commentVic20BasicRom=jCheckBoxVic20BasicRom.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20BasicRomItemStateChanged

    private void jCheckBoxVic20KernalRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20KernalRomItemStateChanged
      option.commentVic20KernalRom=jCheckBoxVic20KernalRom.isSelected();  
    }//GEN-LAST:event_jCheckBoxVic20KernalRomItemStateChanged

    private void jSpinnerInstrSpacesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerInstrSpacesStateChanged
      int num=(Integer)((JSpinner) evt.getSource()).getValue();
      if (num+option.numInstrTabs==0) jSpinnerInstrSpaces.setValue(1);
      else option.numInstrSpaces=num;      
    }//GEN-LAST:event_jSpinnerInstrSpacesStateChanged

    private void jSpinnerInstrTabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerInstrTabsStateChanged
      int num=(Integer)((JSpinner) evt.getSource()).getValue();
      if (num+option.numInstrSpaces==0) jSpinnerInstrTabs.setValue(1);
      else option.numInstrTabs=num;       
    }//GEN-LAST:event_jSpinnerInstrTabsStateChanged

    private void jSpinnerDataSpacesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerDataSpacesStateChanged
      int num=(Integer)((JSpinner) evt.getSource()).getValue();
      if (num+option.numDataTabs==0) jSpinnerDataSpaces.setValue(1);
      else option.numDataSpaces=num;         
    }//GEN-LAST:event_jSpinnerDataSpacesStateChanged

    private void jSpinnerDataTabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerDataTabsStateChanged
      int num=(Integer)((JSpinner) evt.getSource()).getValue();
      if (num+option.numDataSpaces==0) jSpinnerDataTabs.setValue(1);
      else option.numDataTabs=num;       
    }//GEN-LAST:event_jSpinnerDataTabsStateChanged

    private void jCheckBoxLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxLabelActionPerformed
      option.labelOnSepLine=jCheckBoxLabel.isSelected();
    }//GEN-LAST:event_jCheckBoxLabelActionPerformed

    private void jComboBoxAssemblerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxAssemblerItemStateChanged
      String str=(String)jComboBoxAssembler.getSelectedItem();
      
      for (Assembler.Name name: Assembler.Name.values()) {
        if (name.getName().equals(str)) {
          option.assembler=name;  
          return;
        }
      }
      
      
    }//GEN-LAST:event_jComboBoxAssemblerItemStateChanged

    private void jSpinnerMaxWordAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxWordAggregateStateChanged
      option.maxWordAggregate=(Integer)jSpinnerMaxWordAggregate.getValue();
    }//GEN-LAST:event_jSpinnerMaxWordAggregateStateChanged

    private void jSpinnerMaxTribyteAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxTribyteAggregateStateChanged
      option.maxTribyteAggregate=(Integer)jSpinnerMaxTribyteAggregate.getValue();
    }//GEN-LAST:event_jSpinnerMaxTribyteAggregateStateChanged

    private void jSpinnerMaxLongAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxLongAggregateStateChanged
      option.maxLongAggregate=(Integer)jSpinnerMaxLongAggregate.getValue();
    }//GEN-LAST:event_jSpinnerMaxLongAggregateStateChanged

    private void jCheckBoxC128ZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128ZeroPageItemStateChanged
      option.commentC128ZeroPage=jCheckBoxC128ZeroPage.isSelected();     
    }//GEN-LAST:event_jCheckBoxC128ZeroPageItemStateChanged

    private void jCheckBoxC128StackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128StackAreaItemStateChanged
      option.commentC128StackArea=jCheckBoxC128StackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxC128StackAreaItemStateChanged

    private void jCheckBoxC128_300AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128_300AreaItemStateChanged
      option.commentC128_300Area=jCheckBoxC128_300Area.isShowing();
    }//GEN-LAST:event_jCheckBoxC128_300AreaItemStateChanged

    private void jCheckBoxC128_200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128_200AreaItemStateChanged
      option.commentC128_200Area=jCheckBoxC128_200Area.isShowing();
    }//GEN-LAST:event_jCheckBoxC128_200AreaItemStateChanged

    private void jCheckBoxC128ScreenAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128ScreenAreaItemStateChanged
      option.commentC128ScreenArea=jCheckBoxC128ScreenArea.isSelected();       
    }//GEN-LAST:event_jCheckBoxC128ScreenAreaItemStateChanged

    private void jCheckBoxC128UserBasicItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128UserBasicItemStateChanged
      option.commentC128UserBasic=jCheckBoxC128UserBasic.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC128UserBasicItemStateChanged

    private void jCheckBoxC128AppProgAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128AppProgAreaItemStateChanged
      option.commentC128AppProgArea=jCheckBoxC128AppProgArea.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC128AppProgAreaItemStateChanged

    private void jCheckBoxC128VideoColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128VideoColorItemStateChanged
      option.commentC128VideoColor=jCheckBoxC128VideoColor.isSelected();
    }//GEN-LAST:event_jCheckBoxC128VideoColorItemStateChanged

    private void jCheckBoxC128ScreenMemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128ScreenMemItemStateChanged
      option.commentC128ScreenMem=jCheckBoxC128ScreenMem.isSelected();
    }//GEN-LAST:event_jCheckBoxC128ScreenMemItemStateChanged

    private void jCheckBoxC128ColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128ColorItemStateChanged
      option.commentC128Color=jCheckBoxC128Color.isSelected();
    }//GEN-LAST:event_jCheckBoxC128ColorItemStateChanged

    private void jCheckBoxC128BasicRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128BasicRomItemStateChanged
      option.commentC128BasicRom=jCheckBoxC128BasicRom.isSelected();
    }//GEN-LAST:event_jCheckBoxC128BasicRomItemStateChanged

    private void jCheckBoxC128VicIIItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128VicIIItemStateChanged
      option.commentC128VicII=jCheckBoxC128VicII.isSelected();
    }//GEN-LAST:event_jCheckBoxC128VicIIItemStateChanged

    private void jCheckBoxC128SidItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128SidItemStateChanged
      option.commentC128Sid=jCheckBoxC128Sid.isSelected();
    }//GEN-LAST:event_jCheckBoxC128SidItemStateChanged

    private void jCheckBoxC128MMUItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128MMUItemStateChanged
      option.commentC128MMU=jCheckBoxC128MMU.isSelected();
    }//GEN-LAST:event_jCheckBoxC128MMUItemStateChanged

    private void jCheckBoxC128VDCItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128VDCItemStateChanged
      option.commentC128VDC=jCheckBoxC128VDC.isSelected();
    }//GEN-LAST:event_jCheckBoxC128VDCItemStateChanged

    private void jCheckBoxC128Cia1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128Cia1ItemStateChanged
      option.commentC128Cia1=jCheckBoxC128Cia1.isSelected();
    }//GEN-LAST:event_jCheckBoxC128Cia1ItemStateChanged

    private void jCheckBoxC128Cia2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128Cia2ItemStateChanged
      option.commentC128Cia2=jCheckBoxC128Cia2.isSelected();
    }//GEN-LAST:event_jCheckBoxC128Cia2ItemStateChanged

    private void jCheckBoxC128DMAItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128DMAItemStateChanged
      option.commentC128DMA=jCheckBoxC128DMA.isSelected();
    }//GEN-LAST:event_jCheckBoxC128DMAItemStateChanged

    private void jCheckBoxC128KernalRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128KernalRomItemStateChanged
      option.commentC128KernalRom=jCheckBoxC128KernalRom.isSelected();
    }//GEN-LAST:event_jCheckBoxC128KernalRomItemStateChanged

    private void jRadioButtonTass64DotCpuAStartingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotCpuAStartingItemStateChanged
      option.tass64Starting=Assembler.Starting.DOT_CPU_A;
    }//GEN-LAST:event_jRadioButtonTass64DotCpuAStartingItemStateChanged

    private void jRadioButtonTass64AsterixOriginItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64AsterixOriginItemStateChanged
      option.tass64Origin=Assembler.Origin.ASTERISK;
    }//GEN-LAST:event_jRadioButtonTass64AsterixOriginItemStateChanged

    private void jRadioButtonTass64SemicolonCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64SemicolonCommentItemStateChanged
      option.tass64Comment=Assembler.Comment.SEMICOLON;
    }//GEN-LAST:event_jRadioButtonTass64SemicolonCommentItemStateChanged

    private void jRadioButtonTass64SemicolonBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64SemicolonBlockCommentItemStateChanged
      option.tass64BlockComment=Assembler.BlockComment.SEMICOLON;
    }//GEN-LAST:event_jRadioButtonTass64SemicolonBlockCommentItemStateChanged

    private void jRadioButtontass64DotIfFiBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtontass64DotIfFiBlockCommentItemStateChanged
      option.tass64BlockComment=Assembler.BlockComment.DOT_IF_FI;
    }//GEN-LAST:event_jRadioButtontass64DotIfFiBlockCommentItemStateChanged

    private void jRadioButtonTass64DotCommentBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotCommentBlockCommentItemStateChanged
      option.tass64BlockComment=Assembler.BlockComment.DOT_COMMENT;
    }//GEN-LAST:event_jRadioButtonTass64DotCommentBlockCommentItemStateChanged

    private void jRadioButtonTass64LabelNameColonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64LabelNameColonItemStateChanged
      option.tass64Label=Assembler.Label.NAME_COLON; 
    }//GEN-LAST:event_jRadioButtonTass64LabelNameColonItemStateChanged

    private void jRadioButtonTass64DotByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotByteItemStateChanged
      option.tass64Byte=Assembler.Byte.DOT_BYTE;
    }//GEN-LAST:event_jRadioButtonTass64DotByteItemStateChanged

    private void jRadioButtonTass64DotWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotWordItemStateChanged
      option.tass64Word=Assembler.Word.DOT_WORD;
    }//GEN-LAST:event_jRadioButtonTass64DotWordItemStateChanged

    private void jRadioButtonTass64DotCharByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotCharByteItemStateChanged
      option.tass64Byte=Assembler.Byte.DOT_CHAR;
    }//GEN-LAST:event_jRadioButtonTass64DotCharByteItemStateChanged

    private void jRadioButtonTass64DotSintWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotSintWordItemStateChanged
      option.tass64Word=Assembler.Word.DOT_SINT;
    }//GEN-LAST:event_jRadioButtonTass64DotSintWordItemStateChanged
      
    private void jRadioButtonTass64ByteHexMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64ByteHexMonoSpriteItemStateChanged
      option.tass64MonoSprite=Assembler.MonoSprite.BYTE_HEX;
    }//GEN-LAST:event_jRadioButtonTass64ByteHexMonoSpriteItemStateChanged

    private void jRadioButtonTass64ByteHexMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64ByteHexMultiSpriteItemStateChanged
      option.tass64MultiSprite=Assembler.MultiSprite.BYTE_HEX;  
    }//GEN-LAST:event_jRadioButtonTass64ByteHexMultiSpriteItemStateChanged

    private void jRadioButtonTass64ByteBinMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64ByteBinMonoSpriteItemStateChanged
      option.tass64MonoSprite=Assembler.MonoSprite.BYTE_BIN;
    }//GEN-LAST:event_jRadioButtonTass64ByteBinMonoSpriteItemStateChanged

    private void jRadioButtonTass64ByteBinMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64ByteBinMultiSpriteItemStateChanged
      option.tass64MultiSprite=Assembler.MultiSprite.BYTE_BIN; 
    }//GEN-LAST:event_jRadioButtonTass64ByteBinMultiSpriteItemStateChanged

    private void jRadioButtonTass64MacroHexMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64MacroHexMonoSpriteItemStateChanged
      option.tass64MonoSprite=Assembler.MonoSprite.MACRO4_HEX; 
    }//GEN-LAST:event_jRadioButtonTass64MacroHexMonoSpriteItemStateChanged

    private void jRadioButtonTass64MacroHexMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64MacroHexMultiSpriteItemStateChanged
      option.tass64MultiSprite=Assembler.MultiSprite.MACRO4_HEX;  
    }//GEN-LAST:event_jRadioButtonTass64MacroHexMultiSpriteItemStateChanged

    private void jRadioButtonTass64MacroBinMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64MacroBinMonoSpriteItemStateChanged
      option.tass64MonoSprite=Assembler.MonoSprite.MACRO4_BIN; 
    }//GEN-LAST:event_jRadioButtonTass64MacroBinMonoSpriteItemStateChanged

    private void jRadioButtonTass64MacroBinMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64MacroBinMultiSpriteItemStateChanged
      option.tass64MultiSprite=Assembler.MultiSprite.MACRO4_BIN; 
    }//GEN-LAST:event_jRadioButtonTass64MacroBinMultiSpriteItemStateChanged

    private void jRadioButtonTass64DotLongTribyteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotLongTribyteItemStateChanged
      option.tass64Tribyte=Assembler.Tribyte.DOT_LONG_TRIBYTE; 
    }//GEN-LAST:event_jRadioButtonTass64DotLongTribyteItemStateChanged

    private void jRadioButtonTass64DotLintTribyteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotLintTribyteItemStateChanged
      option.tass64Tribyte=Assembler.Tribyte.DOT_LINT_TRIBYTE; 
    }//GEN-LAST:event_jRadioButtonTass64DotLintTribyteItemStateChanged

    private void jRadioButtonTass64DotDwordLongItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotDwordLongItemStateChanged
      option.tass64Long=Assembler.Long.DOT_DWORD_LONG; 
    }//GEN-LAST:event_jRadioButtonTass64DotDwordLongItemStateChanged

    private void jRadioButtonTass64DotDlintLongItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotDlintLongItemStateChanged
      option.tass64Long=Assembler.Long.DOT_DLINT_LONG; 
    }//GEN-LAST:event_jRadioButtonTass64DotDlintLongItemStateChanged

    private void jButtonBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseActionPerformed
      if (chooserDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION) {
        option.tmpPath=chooserDir.getSelectedFile().getPath();
        jTextFieldTmpPath.setText(option.tmpPath);
      }
    }//GEN-LAST:event_jButtonBrowseActionPerformed

    private void jRadioButtonTass64MacroWordSwappedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64MacroWordSwappedItemStateChanged
      option.tass64WordSwapped=Assembler.WordSwapped.MACRO4_WORD_SWAPPED;
    }//GEN-LAST:event_jRadioButtonTass64MacroWordSwappedItemStateChanged

    private void jSpinnerMaxSwappedAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxSwappedAggregateStateChanged
      option.maxSwappedAggregate=(Integer)jSpinnerMaxSwappedAggregate.getValue();     
    }//GEN-LAST:event_jSpinnerMaxSwappedAggregateStateChanged

    private void jSpinnerMaxTextAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxTextAggregateStateChanged
      option.maxTextAggregate=(Integer)jSpinnerMaxTextAggregate.getValue();
    }//GEN-LAST:event_jSpinnerMaxTextAggregateStateChanged

    private void jRadioButtonKickDotDwLongItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotDwLongItemStateChanged
       option.kickLong=Assembler.Long.DOT_DW_LONG; 
    }//GEN-LAST:event_jRadioButtonKickDotDwLongItemStateChanged

    private void jRadioButtonKickDotWoWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotWoWordItemStateChanged
        option.kickWord=Assembler.Word.DOT_WO_WORD;
    }//GEN-LAST:event_jRadioButtonKickDotWoWordItemStateChanged

    private void jRadioButtonKickDotByByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotByByteItemStateChanged
        option.kickByte=Assembler.Byte.DOT_BY_BYTE;
    }//GEN-LAST:event_jRadioButtonKickDotByByteItemStateChanged

    private void jRadioButtonKickDotTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotTextItemStateChanged
        option.kickText=Assembler.Text.DOT_TEXT;
    }//GEN-LAST:event_jRadioButtonKickDotTextItemStateChanged

    private void jRadioButtonKickMacroWordSwappedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroWordSwappedItemStateChanged
        option.kickWordSwapped=Assembler.WordSwapped.MACRO1_WORD_SWAPPED;
    }//GEN-LAST:event_jRadioButtonKickMacroWordSwappedItemStateChanged

    private void jRadioButtonKickDwordLongItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDwordLongItemStateChanged
       option.kickLong=Assembler.Long.DOT_DWORD_LONG;
    }//GEN-LAST:event_jRadioButtonKickDwordLongItemStateChanged

    private void jRadioButtonKickMacroTribyteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroTribyteItemStateChanged
        option.kickTribyte=Assembler.Tribyte.MACRO1_TRIBYTE;
    }//GEN-LAST:event_jRadioButtonKickMacroTribyteItemStateChanged

    private void jRadioButtonKickMacroBinMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroBinMultiSpriteItemStateChanged
        option.kickMultiSprite=Assembler.MultiSprite.MACRO1_BIN;
    }//GEN-LAST:event_jRadioButtonKickMacroBinMultiSpriteItemStateChanged

    private void jRadioButtonKickMacroBinMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroBinMonoSpriteItemStateChanged
        option.kickMonoSprite=Assembler.MonoSprite.MACRO1_BIN;
    }//GEN-LAST:event_jRadioButtonKickMacroBinMonoSpriteItemStateChanged

    private void jRadioButtonKickMacroHexMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroHexMultiSpriteItemStateChanged
        option.kickMultiSprite=Assembler.MultiSprite.MACRO1_HEX;
    }//GEN-LAST:event_jRadioButtonKickMacroHexMultiSpriteItemStateChanged

    private void jRadioButtonKickMacroHexMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroHexMonoSpriteItemStateChanged
        option.kickMonoSprite=Assembler.MonoSprite.MACRO1_HEX;
    }//GEN-LAST:event_jRadioButtonKickMacroHexMonoSpriteItemStateChanged

    private void jRadioButtonKickByteBinMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickByteBinMultiSpriteItemStateChanged
        option.kickMultiSprite=Assembler.MultiSprite.BYTE_BIN;
    }//GEN-LAST:event_jRadioButtonKickByteBinMultiSpriteItemStateChanged

    private void jRadioButtonKickByteBinMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickByteBinMonoSpriteItemStateChanged
        option.kickMonoSprite=Assembler.MonoSprite.BYTE_BIN;
    }//GEN-LAST:event_jRadioButtonKickByteBinMonoSpriteItemStateChanged

    private void jRadioButtonKickByteHexMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickByteHexMultiSpriteItemStateChanged
        option.kickMultiSprite=Assembler.MultiSprite.BYTE_HEX;
    }//GEN-LAST:event_jRadioButtonKickByteHexMultiSpriteItemStateChanged

    private void jRadioButtonKickByteHexMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickByteHexMonoSpriteItemStateChanged
        option.kickMonoSprite=Assembler.MonoSprite.BYTE_HEX;
    }//GEN-LAST:event_jRadioButtonKickByteHexMonoSpriteItemStateChanged

    private void jRadioButtonDasmSharpIfPBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmSharpIfPBlockCommentItemStateChanged
        option.kickBlockComment=Assembler.BlockComment.SHARP_IF;
    }//GEN-LAST:event_jRadioButtonDasmSharpIfPBlockCommentItemStateChanged

    private void jRadioButtonKickCstyleBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickCstyleBlockCommentItemStateChanged
        option.kickBlockComment=Assembler.BlockComment.CSTYLE;
    }//GEN-LAST:event_jRadioButtonKickCstyleBlockCommentItemStateChanged

    private void jRadioButtonKickDoubleBarBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDoubleBarBlockCommentItemStateChanged
        option.kickBlockComment=Assembler.BlockComment.DOUBLE_BAR;
    }//GEN-LAST:event_jRadioButtonKickDoubleBarBlockCommentItemStateChanged

    private void jRadioButtonKickDotPcOriginItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotPcOriginItemStateChanged
        option.kickOrigin=Assembler.Origin.DOT_PC;
    }//GEN-LAST:event_jRadioButtonKickDotPcOriginItemStateChanged

    private void jRadioButtonKickAsterixOriginItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickAsterixOriginItemStateChanged
        option.kickOrigin=Assembler.Origin.ASTERISK;
    }//GEN-LAST:event_jRadioButtonKickAsterixOriginItemStateChanged

    private void jRadioButtonKickDoubleBarCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDoubleBarCommentItemStateChanged
        option.kickComment=Assembler.Comment.DOUBLE_BAR;
    }//GEN-LAST:event_jRadioButtonKickDoubleBarCommentItemStateChanged

    private void jRadioButtonKickDotCpuUndStartingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotCpuUndStartingItemStateChanged
        option.kickStarting=Assembler.Starting.DOT_CPU_UND;
    }//GEN-LAST:event_jRadioButtonKickDotCpuUndStartingItemStateChanged

    private void jRadioButtonKickDotWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotWordItemStateChanged
        option.kickWord=Assembler.Word.DOT_WORD;
    }//GEN-LAST:event_jRadioButtonKickDotWordItemStateChanged

    private void jRadioButtonKickDotByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotByteItemStateChanged
        option.kickByte=Assembler.Byte.DOT_BYTE;
    }//GEN-LAST:event_jRadioButtonKickDotByteItemStateChanged

    private void jRadioButtonKickLabelNameColonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickLabelNameColonItemStateChanged
        option.kickLabel=Assembler.Label.NAME_COLON;
    }//GEN-LAST:event_jRadioButtonKickLabelNameColonItemStateChanged

    private void jRadioButtonTass64DotTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotTextItemStateChanged
        option.tass64Text=Assembler.Text.DOT_TEXT;
    }//GEN-LAST:event_jRadioButtonTass64DotTextItemStateChanged

    private void jCheckBoxKickColonMacroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxKickColonMacroActionPerformed
        option.kickColonMacro=jCheckBoxKickColonMacro.isSelected();       
    }//GEN-LAST:event_jCheckBoxKickColonMacroActionPerformed

    private void jRadioButtonKickDotTextNumTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotTextNumTextItemStateChanged
      option.kickNumText=Assembler.NumText.DOT_TEXT_NUMTEXT;   
    }//GEN-LAST:event_jRadioButtonKickDotTextNumTextItemStateChanged

    private void jRadioButtonKickDotTextZeroTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotTextZeroTextItemStateChanged
      option.kickZeroText=Assembler.ZeroText.DOT_TEXT_ZEROTEXT; 
    }//GEN-LAST:event_jRadioButtonKickDotTextZeroTextItemStateChanged

    private void jRadioButtonTass64DotPTextNumTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotPTextNumTextItemStateChanged
      option.tass64NumText=Assembler.NumText.DOT_PTEXT_NUMTEXT;          
    }//GEN-LAST:event_jRadioButtonTass64DotPTextNumTextItemStateChanged

    private void jRadioButtonTass64DotTextPNumTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotTextPNumTextItemStateChanged
      option.tass64NumText=Assembler.NumText.DOT_TEXT_P_NUMTEXT; 
    }//GEN-LAST:event_jRadioButtonTass64DotTextPNumTextItemStateChanged

    private void jRadioButtonTass64DotNullZeroTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotNullZeroTextItemStateChanged
      option.tass64ZeroText=Assembler.ZeroText.DOT_NULL_ZEROTEXT; 
    }//GEN-LAST:event_jRadioButtonTass64DotNullZeroTextItemStateChanged

    private void jRadioButtonTass64DotTextNZeroTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotTextNZeroTextItemStateChanged
      option.tass64ZeroText=Assembler.ZeroText.DOT_TEXT_N_ZEROTEXT;
    }//GEN-LAST:event_jRadioButtonTass64DotTextNZeroTextItemStateChanged

    private void jRadioButtonKickDotWordAddressItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotWordAddressItemStateChanged
      option.kickAddress=Assembler.Address.DOT_WORD_ADDR;  
    }//GEN-LAST:event_jRadioButtonKickDotWordAddressItemStateChanged

    private void jRadioButtonKickDotWoWordAddressItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotWoWordAddressItemStateChanged
      option.kickAddress=Assembler.Address.DOT_WO_WORD_ADDR;  
    }//GEN-LAST:event_jRadioButtonKickDotWoWordAddressItemStateChanged

    private void jRadioButtonTass64DotAddrAddressItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotAddrAddressItemStateChanged
      option.tass64Address=Assembler.Address.DOT_ADDR_ADDR;
    }//GEN-LAST:event_jRadioButtonTass64DotAddrAddressItemStateChanged

    private void jSpinnerMaxAddressAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxAddressAggregateStateChanged
      option.maxAddressAggregate=(Integer)jSpinnerMaxAddressAggregate.getValue();       
    }//GEN-LAST:event_jSpinnerMaxAddressAggregateStateChanged

    private void jSpinnerMaxStackWordAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxStackWordAggregateStateChanged
      option.maxStackWordAggregate=(Integer)jSpinnerMaxStackWordAggregate.getValue();  
    }//GEN-LAST:event_jSpinnerMaxStackWordAggregateStateChanged

    private void jRadioButtonTass64DotRtaStackWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotRtaStackWordItemStateChanged
      option.tass64StackWord=Assembler.StackWord.DOT_RTA_STACKWORD;
    }//GEN-LAST:event_jRadioButtonTass64DotRtaStackWordItemStateChanged

    private void jRadioButtonKickMacroStackWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroStackWordItemStateChanged
      option.kickStackWord=Assembler.StackWord.MACRO1_STACKWORD;  
    }//GEN-LAST:event_jRadioButtonKickMacroStackWordItemStateChanged

    private void jRadioButtonKickDotTextHighTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotTextHighTextItemStateChanged
      option.kickHighText=Assembler.HighText.DOT_TEXT_HIGHTEXT;  
    }//GEN-LAST:event_jRadioButtonKickDotTextHighTextItemStateChanged

    private void jRadioButtonTass64DotShiftHighTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotShiftHighTextItemStateChanged
      option.tass64HighText=Assembler.HighText.DOT_SHIFT_HIGHTEXT;
    }//GEN-LAST:event_jRadioButtonTass64DotShiftHighTextItemStateChanged

    private void jRadioButtonTass64DotTextSHighTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotTextSHighTextItemStateChanged
      option.tass64HighText=Assembler.HighText.DOT_TEXT_S_HIGHTEXT;
    }//GEN-LAST:event_jRadioButtonTass64DotTextSHighTextItemStateChanged

    private void jRadioButtonKickDotTextShiftTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotTextShiftTextItemStateChanged
      option.kickShiftText=Assembler.ShiftText.DOT_TEXT_SHIFTTEXT;
    }//GEN-LAST:event_jRadioButtonKickDotTextShiftTextItemStateChanged

    private void jRadioButtonTass64DotShiftlShiftTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotShiftlShiftTextItemStateChanged
      option.tass64ShiftText=Assembler.ShiftText.DOT_SHIFTL_SHIFTTEXT;
    }//GEN-LAST:event_jRadioButtonTass64DotShiftlShiftTextItemStateChanged

    private void jRadioButtonTass64DotTextLShiftTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotTextLShiftTextItemStateChanged
      option.tass64ShiftText=Assembler.ShiftText.DOT_TEXT_L_SHIFTTEXT;
    }//GEN-LAST:event_jRadioButtonTass64DotTextLShiftTextItemStateChanged

    private void jRadioButtonKickDotTextScreenTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotTextScreenTextItemStateChanged
      option.kickScreenText=Assembler.ScreenText.DOT_TEXT_SCREENTEXT;
    }//GEN-LAST:event_jRadioButtonKickDotTextScreenTextItemStateChanged

    private void jRadioButtonKickDotTextPetasciiTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotTextPetasciiTextItemStateChanged
      option.kickPetasciiText=Assembler.PetasciiText.DOT_TEXT_PETASCIITEXT; 
    }//GEN-LAST:event_jRadioButtonKickDotTextPetasciiTextItemStateChanged

    private void jRadioButtonTass64DotTextScreenTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotTextScreenTextItemStateChanged
      option.tass64ScreenText=Assembler.ScreenText.DOT_TEXT_SCREENTEXT; 
    }//GEN-LAST:event_jRadioButtonTass64DotTextScreenTextItemStateChanged

    private void jRadioButtonTass64DotTextPetasciiTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotTextPetasciiTextItemStateChanged
      option.tass64PetasciiText=Assembler.PetasciiText.DOT_TEXT_PETASCIITEXT;
    }//GEN-LAST:event_jRadioButtonTass64DotTextPetasciiTextItemStateChanged

    private void jCheckBoxUbEditItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxUbEditItemStateChanged
      option.clickUbEdit=jCheckBoxUbEdit.isSelected();
    }//GEN-LAST:event_jCheckBoxUbEditItemStateChanged

    private void jCheckBoxUcEditItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxUcEditItemStateChanged
      option.clickUcEdit=jCheckBoxUcEdit.isSelected(); 
    }//GEN-LAST:event_jCheckBoxUcEditItemStateChanged

    private void jCheckBoxUlEditItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxUlEditItemStateChanged
      option.clickUlEdit=jCheckBoxUlEdit.isSelected(); 
    }//GEN-LAST:event_jCheckBoxUlEditItemStateChanged

    private void jCheckBoxDcEraseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxDcEraseItemStateChanged
      option.clickDcErase=jCheckBoxDcErase.isSelected(); 
    }//GEN-LAST:event_jCheckBoxDcEraseItemStateChanged

    private void jCheckBoxDlEraseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxDlEraseItemStateChanged
      option.clickDlErase=jCheckBoxDlErase.isSelected();  
    }//GEN-LAST:event_jCheckBoxDlEraseItemStateChanged

    private void jCheckBoxForceCompilationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxForceCompilationActionPerformed
      option.forceCompilation=jCheckBoxForceCompilation.isSelected();
    }//GEN-LAST:event_jCheckBoxForceCompilationActionPerformed

    private void jRadioButtonMemoryValueHexItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonMemoryValueHexItemStateChanged
      option.memoryValue=DataTableModelMemory.MOD_HEX;
    }//GEN-LAST:event_jRadioButtonMemoryValueHexItemStateChanged

    private void jRadioButtonMemoryValueCharItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonMemoryValueCharItemStateChanged
      option.memoryValue=DataTableModelMemory.MOD_CHAR;
    }//GEN-LAST:event_jRadioButtonMemoryValueCharItemStateChanged

    private void jSpinnerInstrCSpacesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerInstrCSpacesStateChanged
      option.numInstrCSpaces=(Integer)((JSpinner) evt.getSource()).getValue();
    }//GEN-LAST:event_jSpinnerInstrCSpacesStateChanged

    private void jSpinnerInstrCTabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerInstrCTabsStateChanged
      option.numInstrCTabs=(Integer)((JSpinner) evt.getSource()).getValue();;
    }//GEN-LAST:event_jSpinnerInstrCTabsStateChanged

    private void jSpinnerDataCSpacesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerDataCSpacesStateChanged
      option.numDataCSpaces=(Integer)((JSpinner) evt.getSource()).getValue(); 
    }//GEN-LAST:event_jSpinnerDataCSpacesStateChanged

    private void jSpinnerDataCTabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerDataCTabsStateChanged
      option.numDataCTabs=(Integer)((JSpinner) evt.getSource()).getValue();  
    }//GEN-LAST:event_jSpinnerDataCTabsStateChanged

    private void jCheckBoxAllowUtfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAllowUtfActionPerformed
      option.allowUtf=jCheckBoxAllowUtf.isSelected();
    }//GEN-LAST:event_jCheckBoxAllowUtfActionPerformed

    private void jCheckBoxAllowSIDFreqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAllowSIDFreqActionPerformed
      option.useSidFreq=jCheckBoxAllowSIDFreq.isSelected();
      jCheckBoxMarkMemory.setEnabled(option.useSidFreq);
      jCheckBoxSetLabels.setEnabled(option.useSidFreq);
      jCheckBoxSetComment.setEnabled(option.useSidFreq);
    }//GEN-LAST:event_jCheckBoxAllowSIDFreqActionPerformed

    private void jCheckBoxMarkMemoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMarkMemoryActionPerformed
      option.sidFreqMarkMem=jCheckBoxMarkMemory.isSelected();
    }//GEN-LAST:event_jCheckBoxMarkMemoryActionPerformed

    private void jCheckBoxSetLabelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSetLabelsActionPerformed
       option.sidFreqCreateLabel=jCheckBoxSetLabels.isSelected();
    }//GEN-LAST:event_jCheckBoxSetLabelsActionPerformed

    private void jCheckBoxSetCommentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSetCommentActionPerformed
      option.sidFreqCreateComment=jCheckBoxSetComment.isSelected();
    }//GEN-LAST:event_jCheckBoxSetCommentActionPerformed

    private void jCheckBoxNotUsePSIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxNotUsePSIDActionPerformed
      option.notMarkPSID=jCheckBoxNotUsePSID.isSelected();
    }//GEN-LAST:event_jCheckBoxNotUsePSIDActionPerformed

    private void jCheckBoxCreatePSIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxCreatePSIDActionPerformed
      option.createPSID=jCheckBoxCreatePSID.isSelected();
      jCheckBoxNotUsePSID.setEnabled(option.createPSID);
    }//GEN-LAST:event_jCheckBoxCreatePSIDActionPerformed

    private void jRadioButtonStandardItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonStandardItemStateChanged
      option.heather=Option.HEATHER_STANDARD;
    }//GEN-LAST:event_jRadioButtonStandardItemStateChanged

    private void jRadioButtonNoneItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonNoneItemStateChanged
      option.heather=Option.HEATHER_NONE;
    }//GEN-LAST:event_jRadioButtonNoneItemStateChanged

    private void jRadioButtonCustomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCustomItemStateChanged
      option.heather=Option.HEATHER_CUSTOM;
    }//GEN-LAST:event_jRadioButtonCustomItemStateChanged

    private void jCheckBoxRepositionateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxRepositionateActionPerformed
      option.repositionate=jCheckBoxRepositionate.isSelected();
    }//GEN-LAST:event_jCheckBoxRepositionateActionPerformed

    private void jCheckBoxPedanticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxPedanticActionPerformed
      option.pedantic=jCheckBoxPedantic.isShowing();
    }//GEN-LAST:event_jCheckBoxPedanticActionPerformed

    private void jCheckBoxVlPatchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVlPatchItemStateChanged
      option.clickVlPatch=jCheckBoxVlPatch.isSelected();
    }//GEN-LAST:event_jCheckBoxVlPatchItemStateChanged

    private void jRadioButtonTmpxDotWord1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxDotWord1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxDotWord1ItemStateChanged

    private void jRadioButtonTmpxSemicolonComment1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxSemicolonComment1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxSemicolonComment1ItemStateChanged

    private void jRadioButtonTmpxSemicolonBlockComment1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxSemicolonBlockComment1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxSemicolonBlockComment1ItemStateChanged

    private void jRadioButtonGlassAsterixOriginItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonGlassAsterixOriginItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonGlassAsterixOriginItemStateChanged

    private void jRadioButtonTmpxDotIfBlockComment1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxDotIfBlockComment1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxDotIfBlockComment1ItemStateChanged

    private void jRadioButtonGlassFakeStartingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonGlassFakeStartingItemStateChanged
      option.glassStarting=Assembler.Starting.FAKEZ;
    }//GEN-LAST:event_jRadioButtonGlassFakeStartingItemStateChanged

    private void jRadioButtonTmpxByteHexMonoSprite1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxByteHexMonoSprite1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxByteHexMonoSprite1ItemStateChanged

    private void jRadioButtonTmpxByteHexMultiSprite1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxByteHexMultiSprite1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxByteHexMultiSprite1ItemStateChanged

    private void jRadioButtonTmpxByteBinMonoSprite1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxByteBinMonoSprite1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxByteBinMonoSprite1ItemStateChanged

    private void jRadioButtonTmpxByteBinMultiSprite1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxByteBinMultiSprite1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxByteBinMultiSprite1ItemStateChanged

    private void jRadioButtonTmpxMacroHexMonoSprite1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxMacroHexMonoSprite1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxMacroHexMonoSprite1ItemStateChanged

    private void jRadioButtonTmpxMacroHexMultiSprite1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxMacroHexMultiSprite1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxMacroHexMultiSprite1ItemStateChanged

    private void jRadioButtonTmpxMacroBinMonoSprite1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxMacroBinMonoSprite1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxMacroBinMonoSprite1ItemStateChanged

    private void jRadioButtonTmpxMacroBinMultiSprite1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxMacroBinMultiSprite1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxMacroBinMultiSprite1ItemStateChanged

    private void jRadioButtonTmpxMacroTribyte1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxMacroTribyte1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxMacroTribyte1ItemStateChanged

    private void jRadioButtonTmpxMacroLong1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxMacroLong1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxMacroLong1ItemStateChanged

    private void jRadioButtonTmpxMacroWordSwapped1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxMacroWordSwapped1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxMacroWordSwapped1ItemStateChanged

    private void jRadioButtonTmpxDotText1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxDotText1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxDotText1ItemStateChanged

    private void jRadioButtonTmpxPTextNumText1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxPTextNumText1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxPTextNumText1ItemStateChanged

    private void jRadioButtonTmpxDotNullZeroText1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxDotNullZeroText1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxDotNullZeroText1ItemStateChanged

    private void jRadioButtonTmpxDotAddrAddress1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxDotAddrAddress1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxDotAddrAddress1ItemStateChanged

    private void jRadioButtonTmpxDotRdaStackWord1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxDotRdaStackWord1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxDotRdaStackWord1ItemStateChanged

    private void jRadioButtonTmpxDotShiftHighText1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxDotShiftHighText1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxDotShiftHighText1ItemStateChanged

    private void jRadioButtonTmpxDotShiflShiftText1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxDotShiflShiftText1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxDotShiflShiftText1ItemStateChanged

    private void jRadioButtonTmpxDotScreenText1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxDotScreenText1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxDotScreenText1ItemStateChanged

    private void jRadioButtonTmpxDotPetasciiText1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxDotPetasciiText1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonTmpxDotPetasciiText1ItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JOptionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JOptionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JOptionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JOptionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JOptionDialog dialog = new JOptionDialog(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane ScreenjTextPaneKickDotTextScreenText;
    private javax.swing.JTextPane TmpxPaneTass64ByteHexMultiSprite;
    private javax.swing.JTextPane TmpxPaneTmpxByteHexMultiSprite1;
    private javax.swing.ButtonGroup buttonGroupCodeData;
    private javax.swing.ButtonGroup buttonGroupGlassStarting;
    private javax.swing.ButtonGroup buttonGroupHeather;
    private javax.swing.ButtonGroup buttonGroupIllegalOpcodeStyle;
    private javax.swing.ButtonGroup buttonGroupKickAddress;
    private javax.swing.ButtonGroup buttonGroupKickBlockComment;
    private javax.swing.ButtonGroup buttonGroupKickByte;
    private javax.swing.ButtonGroup buttonGroupKickComment;
    private javax.swing.ButtonGroup buttonGroupKickHighText;
    private javax.swing.ButtonGroup buttonGroupKickLabel;
    private javax.swing.ButtonGroup buttonGroupKickLong;
    private javax.swing.ButtonGroup buttonGroupKickMonoSprite;
    private javax.swing.ButtonGroup buttonGroupKickMultiSprite;
    private javax.swing.ButtonGroup buttonGroupKickNumText;
    private javax.swing.ButtonGroup buttonGroupKickOrigin;
    private javax.swing.ButtonGroup buttonGroupKickPetasciiText;
    private javax.swing.ButtonGroup buttonGroupKickScreenText;
    private javax.swing.ButtonGroup buttonGroupKickShiftText;
    private javax.swing.ButtonGroup buttonGroupKickStackWord;
    private javax.swing.ButtonGroup buttonGroupKickStarting;
    private javax.swing.ButtonGroup buttonGroupKickText;
    private javax.swing.ButtonGroup buttonGroupKickTribyte;
    private javax.swing.ButtonGroup buttonGroupKickWord;
    private javax.swing.ButtonGroup buttonGroupKickWordSwapped;
    private javax.swing.ButtonGroup buttonGroupKickZeroText;
    private javax.swing.ButtonGroup buttonGroupLanguage;
    private javax.swing.ButtonGroup buttonGroupLook;
    private javax.swing.ButtonGroup buttonGroupMemoryValue;
    private javax.swing.ButtonGroup buttonGroupOpcodeFormatting;
    private javax.swing.ButtonGroup buttonGroupTass64Address;
    private javax.swing.ButtonGroup buttonGroupTass64BlockComment;
    private javax.swing.ButtonGroup buttonGroupTass64Byte;
    private javax.swing.ButtonGroup buttonGroupTass64Comment;
    private javax.swing.ButtonGroup buttonGroupTass64HighText;
    private javax.swing.ButtonGroup buttonGroupTass64Label;
    private javax.swing.ButtonGroup buttonGroupTass64Long;
    private javax.swing.ButtonGroup buttonGroupTass64MonoSprite;
    private javax.swing.ButtonGroup buttonGroupTass64MultiSprite;
    private javax.swing.ButtonGroup buttonGroupTass64NumText;
    private javax.swing.ButtonGroup buttonGroupTass64Origin;
    private javax.swing.ButtonGroup buttonGroupTass64PetasciiText;
    private javax.swing.ButtonGroup buttonGroupTass64ScreenCode;
    private javax.swing.ButtonGroup buttonGroupTass64ShiftText;
    private javax.swing.ButtonGroup buttonGroupTass64StackWord;
    private javax.swing.ButtonGroup buttonGroupTass64Starting;
    private javax.swing.ButtonGroup buttonGroupTass64Text;
    private javax.swing.ButtonGroup buttonGroupTass64Tribyte;
    private javax.swing.ButtonGroup buttonGroupTass64WaordSwapped;
    private javax.swing.ButtonGroup buttonGroupTass64Word;
    private javax.swing.ButtonGroup buttonGroupTass64WordSwapped;
    private javax.swing.ButtonGroup buttonGroupTass64ZeroText;
    private javax.swing.ButtonGroup buttonGroupTheme;
    private sw_emulator.swing.JAcmePanel jAcmePanel;
    private javax.swing.JButton jButtonBrowse;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JButton jButtonSave;
    private sw_emulator.swing.JCa65Panel jCa65Panel;
    private javax.swing.JCheckBox jCheckBoxAllowSIDFreq;
    private javax.swing.JCheckBox jCheckBoxAllowUtf;
    private javax.swing.JCheckBox jCheckBoxC128AppProgArea;
    private javax.swing.JCheckBox jCheckBoxC128BasicRom;
    private javax.swing.JCheckBox jCheckBoxC128Cia1;
    private javax.swing.JCheckBox jCheckBoxC128Cia2;
    private javax.swing.JCheckBox jCheckBoxC128Color;
    private javax.swing.JCheckBox jCheckBoxC128DMA;
    private javax.swing.JCheckBox jCheckBoxC128KernalRom;
    private javax.swing.JCheckBox jCheckBoxC128MMU;
    private javax.swing.JCheckBox jCheckBoxC128ScreenArea;
    private javax.swing.JCheckBox jCheckBoxC128ScreenMem;
    private javax.swing.JCheckBox jCheckBoxC128Sid;
    private javax.swing.JCheckBox jCheckBoxC128StackArea;
    private javax.swing.JCheckBox jCheckBoxC128UserBasic;
    private javax.swing.JCheckBox jCheckBoxC128VDC;
    private javax.swing.JCheckBox jCheckBoxC128VicII;
    private javax.swing.JCheckBox jCheckBoxC128VideoColor;
    private javax.swing.JCheckBox jCheckBoxC128ZeroPage;
    private javax.swing.JCheckBox jCheckBoxC128_200Area;
    private javax.swing.JCheckBox jCheckBoxC128_300Area;
    private javax.swing.JCheckBox jCheckBoxC1541Buffer0;
    private javax.swing.JCheckBox jCheckBoxC1541Buffer1;
    private javax.swing.JCheckBox jCheckBoxC1541Buffer2;
    private javax.swing.JCheckBox jCheckBoxC1541Buffer3;
    private javax.swing.JCheckBox jCheckBoxC1541Buffer4;
    private javax.swing.JCheckBox jCheckBoxC1541Kernal;
    private javax.swing.JCheckBox jCheckBoxC1541StackArea;
    private javax.swing.JCheckBox jCheckBoxC1541Via1;
    private javax.swing.JCheckBox jCheckBoxC1541Via2;
    private javax.swing.JCheckBox jCheckBoxC1541ZeroPage;
    private javax.swing.JCheckBox jCheckBoxC1541_200Area;
    private javax.swing.JCheckBox jCheckBoxC64BasicRom;
    private javax.swing.JCheckBox jCheckBoxC64Cia1;
    private javax.swing.JCheckBox jCheckBoxC64Cia2;
    private javax.swing.JCheckBox jCheckBoxC64Color;
    private javax.swing.JCheckBox jCheckBoxC64FreeArea;
    private javax.swing.JCheckBox jCheckBoxC64FreeRam;
    private javax.swing.JCheckBox jCheckBoxC64KernalRom;
    private javax.swing.JCheckBox jCheckBoxC64ScreenArea;
    private javax.swing.JCheckBox jCheckBoxC64StackArea;
    private javax.swing.JCheckBox jCheckBoxC64ZeroPage;
    private javax.swing.JCheckBox jCheckBoxC64_200Area;
    private javax.swing.JCheckBox jCheckBoxC64_300Area;
    private javax.swing.JCheckBox jCheckBoxCreatePSID;
    private javax.swing.JCheckBox jCheckBoxDcErase;
    private javax.swing.JCheckBox jCheckBoxDlErase;
    private javax.swing.JCheckBox jCheckBoxEraseDComm;
    private javax.swing.JCheckBox jCheckBoxErasePlus;
    private javax.swing.JCheckBox jCheckBoxForceCompilation;
    private javax.swing.JCheckBox jCheckBoxKickColonMacro;
    private javax.swing.JCheckBox jCheckBoxLabel;
    private javax.swing.JCheckBox jCheckBoxMarkMemory;
    private javax.swing.JCheckBox jCheckBoxNotUsePSID;
    private javax.swing.JCheckBox jCheckBoxOpcodeFormattingPreview;
    private javax.swing.JCheckBox jCheckBoxOpcodeFormattingSource;
    private javax.swing.JCheckBox jCheckBoxPedantic;
    private javax.swing.JCheckBox jCheckBoxPlus4Acia;
    private javax.swing.JCheckBox jCheckBoxPlus4BasicExt;
    private javax.swing.JCheckBox jCheckBoxPlus4BasicRamN;
    private javax.swing.JCheckBox jCheckBoxPlus4BasicRamP;
    private javax.swing.JCheckBox jCheckBoxPlus4BasicRom;
    private javax.swing.JCheckBox jCheckBoxPlus4Caracter;
    private javax.swing.JCheckBox jCheckBoxPlus4ColorArea;
    private javax.swing.JCheckBox jCheckBoxPlus4ColorBitmap;
    private javax.swing.JCheckBox jCheckBoxPlus4GraphicData;
    private javax.swing.JCheckBox jCheckBoxPlus4Kernal;
    private javax.swing.JCheckBox jCheckBoxPlus4Luminance;
    private javax.swing.JCheckBox jCheckBoxPlus4StackArea;
    private javax.swing.JCheckBox jCheckBoxPlus4Ted;
    private javax.swing.JCheckBox jCheckBoxPlus4VideoArea;
    private javax.swing.JCheckBox jCheckBoxPlus4ZeroPage;
    private javax.swing.JCheckBox jCheckBoxPlus4_200Area;
    private javax.swing.JCheckBox jCheckBoxPlus4_300Area;
    private javax.swing.JCheckBox jCheckBoxPlus4_400Area;
    private javax.swing.JCheckBox jCheckBoxPlus4_500Area;
    private javax.swing.JCheckBox jCheckBoxPlus4_600Area;
    private javax.swing.JCheckBox jCheckBoxPlus4_6529B_1;
    private javax.swing.JCheckBox jCheckBoxPlus4_6529B_2;
    private javax.swing.JCheckBox jCheckBoxPlus4_700Area;
    private javax.swing.JCheckBox jCheckBoxRepositionate;
    private javax.swing.JCheckBox jCheckBoxSetComment;
    private javax.swing.JCheckBox jCheckBoxSetLabels;
    private javax.swing.JCheckBox jCheckBoxUbEdit;
    private javax.swing.JCheckBox jCheckBoxUcEdit;
    private javax.swing.JCheckBox jCheckBoxUlEdit;
    private javax.swing.JCheckBox jCheckBoxUndefinedCode;
    private javax.swing.JCheckBox jCheckBoxVic20BasicRom;
    private javax.swing.JCheckBox jCheckBoxVic20Block2;
    private javax.swing.JCheckBox jCheckBoxVic20Block3;
    private javax.swing.JCheckBox jCheckBoxVic20Block4;
    private javax.swing.JCheckBox jCheckBoxVic20Character;
    private javax.swing.JCheckBox jCheckBoxVic20Color;
    private javax.swing.JCheckBox jCheckBoxVic20KernalRom;
    private javax.swing.JCheckBox jCheckBoxVic20Screen;
    private javax.swing.JCheckBox jCheckBoxVic20StackArea;
    private javax.swing.JCheckBox jCheckBoxVic20UserBasic;
    private javax.swing.JCheckBox jCheckBoxVic20Via1;
    private javax.swing.JCheckBox jCheckBoxVic20Via2;
    private javax.swing.JCheckBox jCheckBoxVic20Vic;
    private javax.swing.JCheckBox jCheckBoxVic20ZeroPage;
    private javax.swing.JCheckBox jCheckBoxVic20_200Area;
    private javax.swing.JCheckBox jCheckBoxVic20_300Area;
    private javax.swing.JCheckBox jCheckBoxVic20_400Area;
    private javax.swing.JCheckBox jCheckBoxVic20_8kExp1;
    private javax.swing.JCheckBox jCheckBoxVic20_8kExp2;
    private javax.swing.JCheckBox jCheckBoxVic20_8kExp3;
    private javax.swing.JCheckBox jCheckBoxVlPatch;
    private javax.swing.JCheckBox jCheckC64BoxSid;
    private javax.swing.JCheckBox jCheckC64BoxVicII;
    private javax.swing.JComboBox<String> jComboBoxAssembler;
    private sw_emulator.swing.JDasmPanel jDasmPanel;
    private javax.swing.JLabel jLabelAggregate;
    private javax.swing.JLabel jLabelArrow;
    private javax.swing.JLabel jLabelAutoComment;
    private javax.swing.JLabel jLabelBracket;
    private javax.swing.JLabel jLabelDataCSep;
    private javax.swing.JLabel jLabelDataCSpace;
    private javax.swing.JLabel jLabelDataCTabs;
    private javax.swing.JLabel jLabelDataSep;
    private javax.swing.JLabel jLabelDataSpace;
    private javax.swing.JLabel jLabelDataTabs;
    private javax.swing.JLabel jLabelFlatLaf;
    private javax.swing.JLabel jLabelGlassByteDeclaration;
    private javax.swing.JLabel jLabelGlassCommentDeclaration;
    private javax.swing.JLabel jLabelGlassLabelDeclaration;
    private javax.swing.JLabel jLabelGlassOriginDeclaration;
    private javax.swing.JLabel jLabelGlassStartingDeclaration;
    private javax.swing.JLabel jLabelHeather;
    private javax.swing.JLabel jLabelIllegalOpcodeStyle;
    private javax.swing.JLabel jLabelInstrCSep;
    private javax.swing.JLabel jLabelInstrCSpace;
    private javax.swing.JLabel jLabelInstrCTabs;
    private javax.swing.JLabel jLabelInstrSep;
    private javax.swing.JLabel jLabelInstrSpace;
    private javax.swing.JLabel jLabelInstrTabs;
    private javax.swing.JLabel jLabelKickAddressDeclaration;
    private javax.swing.JLabel jLabelKickBlockCommentDeclaration;
    private javax.swing.JLabel jLabelKickByteDeclaration;
    private javax.swing.JLabel jLabelKickCommentDeclaration;
    private javax.swing.JLabel jLabelKickHighTextDeclaration;
    private javax.swing.JLabel jLabelKickLabelDeclaration;
    private javax.swing.JLabel jLabelKickLongDeclaration;
    private javax.swing.JLabel jLabelKickMonoSpriteDeclaration;
    private javax.swing.JLabel jLabelKickMultiSpriteDeclaration;
    private javax.swing.JLabel jLabelKickNumTextDeclaration;
    private javax.swing.JLabel jLabelKickOriginDeclaration;
    private javax.swing.JLabel jLabelKickPetasciiTextDeclaration;
    private javax.swing.JLabel jLabelKickScreenTextDeclaration;
    private javax.swing.JLabel jLabelKickShiftTextDeclaration;
    private javax.swing.JLabel jLabelKickStackWordDeclaration;
    private javax.swing.JLabel jLabelKickStartingDeclaration;
    private javax.swing.JLabel jLabelKickTextDeclaration;
    private javax.swing.JLabel jLabelKickTribyteDeclaration;
    private javax.swing.JLabel jLabelKickWordDeclaration;
    private javax.swing.JLabel jLabelKickWordSwappedDeclaration;
    private javax.swing.JLabel jLabelKickZeroTextDeclaration;
    private javax.swing.JLabel jLabelLanguage;
    private javax.swing.JLabel jLabelLanguage1;
    private javax.swing.JLabel jLabelLook;
    private javax.swing.JLabel jLabelMaxAddress;
    private javax.swing.JLabel jLabelMaxByte;
    private javax.swing.JLabel jLabelMaxLength;
    private javax.swing.JLabel jLabelMaxLong;
    private javax.swing.JLabel jLabelMaxStackWord;
    private javax.swing.JLabel jLabelMaxSwapped;
    private javax.swing.JLabel jLabelMaxText;
    private javax.swing.JLabel jLabelMaxTribyte;
    private javax.swing.JLabel jLabelMaxWord;
    private javax.swing.JLabel jLabelPSIDinitsong;
    private javax.swing.JLabel jLabelPSIDplaysound;
    private javax.swing.JLabel jLabelSIDfreqHi;
    private javax.swing.JLabel jLabelSIDfreqLo;
    private javax.swing.JLabel jLabelTass64AddressDeclaration;
    private javax.swing.JLabel jLabelTass64BlockCommentDeclaration;
    private javax.swing.JLabel jLabelTass64ByteDeclaration;
    private javax.swing.JLabel jLabelTass64CommentDeclaration;
    private javax.swing.JLabel jLabelTass64HighTextDeclaration;
    private javax.swing.JLabel jLabelTass64LabelDeclaration;
    private javax.swing.JLabel jLabelTass64LongDeclaration;
    private javax.swing.JLabel jLabelTass64MonoSpriteDeclaration;
    private javax.swing.JLabel jLabelTass64MultiSpriteDeclaration;
    private javax.swing.JLabel jLabelTass64NumTextDeclaration;
    private javax.swing.JLabel jLabelTass64OriginDeclaration;
    private javax.swing.JLabel jLabelTass64ShiftTextDeclaration;
    private javax.swing.JLabel jLabelTass64StackWordDeclaration;
    private javax.swing.JLabel jLabelTass64StartingDeclaration;
    private javax.swing.JLabel jLabelTass64TribyteDeclaration;
    private javax.swing.JLabel jLabelTass64WordDeclaration;
    private javax.swing.JLabel jLabelTass64ZeroTextDeclaration;
    private javax.swing.JLabel jLabelTass65PetasciiTextDeclaration;
    private javax.swing.JLabel jLabelTass65ScreenTextDeclaration;
    private javax.swing.JLabel jLabelTass65TextDeclaration;
    private javax.swing.JLabel jLabelTass65WordSwappedDeclaration;
    private javax.swing.JLabel jLabelTheme;
    private javax.swing.JLabel jLabelTmpPath;
    private javax.swing.JLabel jLabelTmpxAddressDeclaration1;
    private javax.swing.JLabel jLabelTmpxBlockCommentDeclaration1;
    private javax.swing.JLabel jLabelTmpxHighTextDeclaration1;
    private javax.swing.JLabel jLabelTmpxLongDeclaration1;
    private javax.swing.JLabel jLabelTmpxMonoSpriteDeclaration1;
    private javax.swing.JLabel jLabelTmpxMultiSpriteDeclaration1;
    private javax.swing.JLabel jLabelTmpxNumTextDeclaration1;
    private javax.swing.JLabel jLabelTmpxPetasciiTextDeclaration1;
    private javax.swing.JLabel jLabelTmpxScreenTextDeclaration1;
    private javax.swing.JLabel jLabelTmpxShiftTextDeclaration1;
    private javax.swing.JLabel jLabelTmpxStackWordDeclaration1;
    private javax.swing.JLabel jLabelTmpxTextDeclaration1;
    private javax.swing.JLabel jLabelTmpxTribyteDeclaration1;
    private javax.swing.JLabel jLabelTmpxWordDeclaration1;
    private javax.swing.JLabel jLabelTmpxWordSwappedDeclaration1;
    private javax.swing.JLabel jLabelTmpxZeroTextDeclaration1;
    private javax.swing.JLabel jLabelautocomment;
    private javax.swing.JList<String> jListLaf;
    private javax.swing.JPanel jPanelC128Comm;
    private javax.swing.JPanel jPanelC1541Comm;
    private javax.swing.JPanel jPanelC64Comm;
    private javax.swing.JPanel jPanelComment;
    private javax.swing.JPanel jPanelDisassembler;
    private javax.swing.JPanel jPanelDn;
    private javax.swing.JPanel jPanelGlass;
    private javax.swing.JPanel jPanelKickAssembler;
    private javax.swing.JPanel jPanelLook;
    private javax.swing.JPanel jPanelOption;
    private javax.swing.JPanel jPanelPlus4Comm;
    private javax.swing.JPanel jPanelPreview;
    private javax.swing.JPanel jPanelTass64;
    private javax.swing.JPanel jPanelVic20Comm;
    private javax.swing.JRadioButton jRadioButtonAqua;
    private javax.swing.JRadioButton jRadioButtonCharcoal;
    private javax.swing.JRadioButton jRadioButtonCustom;
    private javax.swing.JRadioButton jRadioButtonDasmSharpIfPBlockComment;
    private javax.swing.JRadioButton jRadioButtonEmerald;
    private javax.swing.JRadioButton jRadioButtonGlassAsterixOrigin;
    private javax.swing.JRadioButton jRadioButtonGlassDotByte;
    private javax.swing.JRadioButton jRadioButtonGlassFakeStarting;
    private javax.swing.JRadioButton jRadioButtonGlassLabelName;
    private javax.swing.JRadioButton jRadioButtonHighContrast;
    private javax.swing.JRadioButton jRadioButtonKickAsterixOrigin;
    private javax.swing.JRadioButton jRadioButtonKickByteBinMonoSprite;
    private javax.swing.JRadioButton jRadioButtonKickByteBinMultiSprite;
    private javax.swing.JRadioButton jRadioButtonKickByteHexMonoSprite;
    private javax.swing.JRadioButton jRadioButtonKickByteHexMultiSprite;
    private javax.swing.JRadioButton jRadioButtonKickCstyleBlockComment;
    private javax.swing.JRadioButton jRadioButtonKickDotByByte;
    private javax.swing.JRadioButton jRadioButtonKickDotByte;
    private javax.swing.JRadioButton jRadioButtonKickDotCpuUndStarting;
    private javax.swing.JRadioButton jRadioButtonKickDotDwLong;
    private javax.swing.JRadioButton jRadioButtonKickDotPcOrigin;
    private javax.swing.JRadioButton jRadioButtonKickDotText;
    private javax.swing.JRadioButton jRadioButtonKickDotTextHighText;
    private javax.swing.JRadioButton jRadioButtonKickDotTextNumText;
    private javax.swing.JRadioButton jRadioButtonKickDotTextPetasciiText;
    private javax.swing.JRadioButton jRadioButtonKickDotTextScreenText;
    private javax.swing.JRadioButton jRadioButtonKickDotTextShiftText;
    private javax.swing.JRadioButton jRadioButtonKickDotTextZeroText;
    private javax.swing.JRadioButton jRadioButtonKickDotWoWord;
    private javax.swing.JRadioButton jRadioButtonKickDotWoWordAddress;
    private javax.swing.JRadioButton jRadioButtonKickDotWord;
    private javax.swing.JRadioButton jRadioButtonKickDotWordAddress;
    private javax.swing.JRadioButton jRadioButtonKickDoubleBarBlockComment;
    private javax.swing.JRadioButton jRadioButtonKickDoubleBarComment;
    private javax.swing.JRadioButton jRadioButtonKickDwordLong;
    private javax.swing.JRadioButton jRadioButtonKickLabelNameColon;
    private javax.swing.JRadioButton jRadioButtonKickMacroBinMonoSprite;
    private javax.swing.JRadioButton jRadioButtonKickMacroBinMultiSprite;
    private javax.swing.JRadioButton jRadioButtonKickMacroHexMonoSprite;
    private javax.swing.JRadioButton jRadioButtonKickMacroHexMultiSprite;
    private javax.swing.JRadioButton jRadioButtonKickMacroStackWord;
    private javax.swing.JRadioButton jRadioButtonKickMacroTribyte;
    private javax.swing.JRadioButton jRadioButtonKickMacroWordSwapped;
    private javax.swing.JRadioButton jRadioButtonLangEnglish;
    private javax.swing.JRadioButton jRadioButtonLangItalian;
    private javax.swing.JRadioButton jRadioButtonLookCWin;
    private javax.swing.JRadioButton jRadioButtonLookGtk;
    private javax.swing.JRadioButton jRadioButtonLookJava;
    private javax.swing.JRadioButton jRadioButtonLookMac;
    private javax.swing.JRadioButton jRadioButtonLookMetal;
    private javax.swing.JRadioButton jRadioButtonLookNimbus;
    private javax.swing.JRadioButton jRadioButtonLookSynth;
    private javax.swing.JRadioButton jRadioButtonLookWin;
    private javax.swing.JRadioButton jRadioButtonMemoryValueChar;
    private javax.swing.JRadioButton jRadioButtonMemoryValueHex;
    private javax.swing.JRadioButton jRadioButtonNone;
    private javax.swing.JRadioButton jRadioButtonOcean;
    private javax.swing.JRadioButton jRadioButtonRuby;
    private javax.swing.JRadioButton jRadioButtonStandard;
    private javax.swing.JRadioButton jRadioButtonSteel;
    private javax.swing.JRadioButton jRadioButtonStyle1;
    private javax.swing.JRadioButton jRadioButtonStyle2;
    private javax.swing.JRadioButton jRadioButtonStyle3;
    private javax.swing.JRadioButton jRadioButtonTass64AsterixOrigin;
    private javax.swing.JRadioButton jRadioButtonTass64ByteBinMonoSprite;
    private javax.swing.JRadioButton jRadioButtonTass64ByteBinMultiSprite;
    private javax.swing.JRadioButton jRadioButtonTass64ByteHexMonoSprite;
    private javax.swing.JRadioButton jRadioButtonTass64ByteHexMultiSprite;
    private javax.swing.JRadioButton jRadioButtonTass64DotAddrAddress;
    private javax.swing.JRadioButton jRadioButtonTass64DotByte;
    private javax.swing.JRadioButton jRadioButtonTass64DotCharByte;
    private javax.swing.JRadioButton jRadioButtonTass64DotCommentBlockComment;
    private javax.swing.JRadioButton jRadioButtonTass64DotCpuAStarting;
    private javax.swing.JRadioButton jRadioButtonTass64DotDlintLong;
    private javax.swing.JRadioButton jRadioButtonTass64DotDwordLong;
    private javax.swing.JRadioButton jRadioButtonTass64DotLintTribyte;
    private javax.swing.JRadioButton jRadioButtonTass64DotLongTribyte;
    private javax.swing.JRadioButton jRadioButtonTass64DotNullZeroText;
    private javax.swing.JRadioButton jRadioButtonTass64DotPTextNumText;
    private javax.swing.JRadioButton jRadioButtonTass64DotRtaStackWord;
    private javax.swing.JRadioButton jRadioButtonTass64DotShiftHighText;
    private javax.swing.JRadioButton jRadioButtonTass64DotShiftlShiftText;
    private javax.swing.JRadioButton jRadioButtonTass64DotSintWord;
    private javax.swing.JRadioButton jRadioButtonTass64DotText;
    private javax.swing.JRadioButton jRadioButtonTass64DotTextLShiftText;
    private javax.swing.JRadioButton jRadioButtonTass64DotTextNZeroText;
    private javax.swing.JRadioButton jRadioButtonTass64DotTextPNumText;
    private javax.swing.JRadioButton jRadioButtonTass64DotTextPetasciiText;
    private javax.swing.JRadioButton jRadioButtonTass64DotTextSHighText;
    private javax.swing.JRadioButton jRadioButtonTass64DotTextScreenText;
    private javax.swing.JRadioButton jRadioButtonTass64DotWord;
    private javax.swing.JRadioButton jRadioButtonTass64LabelNameColon;
    private javax.swing.JRadioButton jRadioButtonTass64MacroBinMonoSprite;
    private javax.swing.JRadioButton jRadioButtonTass64MacroBinMultiSprite;
    private javax.swing.JRadioButton jRadioButtonTass64MacroHexMonoSprite;
    private javax.swing.JRadioButton jRadioButtonTass64MacroHexMultiSprite;
    private javax.swing.JRadioButton jRadioButtonTass64MacroWordSwapped;
    private javax.swing.JRadioButton jRadioButtonTass64SemicolonBlockComment;
    private javax.swing.JRadioButton jRadioButtonTass64SemicolonComment;
    private javax.swing.JRadioButton jRadioButtonTmpxByteBinMonoSprite1;
    private javax.swing.JRadioButton jRadioButtonTmpxByteBinMultiSprite1;
    private javax.swing.JRadioButton jRadioButtonTmpxByteHexMonoSprite1;
    private javax.swing.JRadioButton jRadioButtonTmpxByteHexMultiSprite1;
    private javax.swing.JRadioButton jRadioButtonTmpxDotAddrAddress1;
    private javax.swing.JRadioButton jRadioButtonTmpxDotIfBlockComment1;
    private javax.swing.JRadioButton jRadioButtonTmpxDotNullZeroText1;
    private javax.swing.JRadioButton jRadioButtonTmpxDotPetasciiText1;
    private javax.swing.JRadioButton jRadioButtonTmpxDotRdaStackWord1;
    private javax.swing.JRadioButton jRadioButtonTmpxDotScreenText1;
    private javax.swing.JRadioButton jRadioButtonTmpxDotShiflShiftText1;
    private javax.swing.JRadioButton jRadioButtonTmpxDotShiftHighText1;
    private javax.swing.JRadioButton jRadioButtonTmpxDotText1;
    private javax.swing.JRadioButton jRadioButtonTmpxDotWord1;
    private javax.swing.JRadioButton jRadioButtonTmpxMacroBinMonoSprite1;
    private javax.swing.JRadioButton jRadioButtonTmpxMacroBinMultiSprite1;
    private javax.swing.JRadioButton jRadioButtonTmpxMacroHexMonoSprite1;
    private javax.swing.JRadioButton jRadioButtonTmpxMacroHexMultiSprite1;
    private javax.swing.JRadioButton jRadioButtonTmpxMacroLong1;
    private javax.swing.JRadioButton jRadioButtonTmpxMacroTribyte1;
    private javax.swing.JRadioButton jRadioButtonTmpxMacroWordSwapped1;
    private javax.swing.JRadioButton jRadioButtonTmpxPTextNumText1;
    private javax.swing.JRadioButton jRadioButtonTmpxSemicolonBlockComment1;
    private javax.swing.JRadioButton jRadioButtonTmpxSemicolonComment1;
    private javax.swing.JRadioButton jRadioButtontass64DotIfFiBlockComment;
    private javax.swing.JScrollPane jScrollPaneAcme;
    private javax.swing.JScrollPane jScrollPaneCa65;
    private javax.swing.JScrollPane jScrollPaneDasm;
    private javax.swing.JScrollPane jScrollPaneDasmSharpIfPBlockComment;
    private javax.swing.JScrollPane jScrollPaneDasmTass64DotCpuAStarting;
    private javax.swing.JScrollPane jScrollPaneGlass;
    private javax.swing.JScrollPane jScrollPaneGlassByte;
    private javax.swing.JScrollPane jScrollPaneGlassDotWord;
    private javax.swing.JScrollPane jScrollPaneGlassFakeStarting;
    private javax.swing.JScrollPane jScrollPaneGlassWord;
    private javax.swing.JScrollPane jScrollPaneHeather;
    private javax.swing.JScrollPane jScrollPaneKickAssembler;
    private javax.swing.JScrollPane jScrollPaneKickAsterixOrigin;
    private javax.swing.JScrollPane jScrollPaneKickByteBinMonoSprite;
    private javax.swing.JScrollPane jScrollPaneKickByteBinMultiSprite;
    private javax.swing.JScrollPane jScrollPaneKickByteHexMonoSprite;
    private javax.swing.JScrollPane jScrollPaneKickByteHexMultiSprite;
    private javax.swing.JScrollPane jScrollPaneKickCstyleBlockComment;
    private javax.swing.JScrollPane jScrollPaneKickDotByByte;
    private javax.swing.JScrollPane jScrollPaneKickDotByte;
    private javax.swing.JScrollPane jScrollPaneKickDotCpuUndStarting;
    private javax.swing.JScrollPane jScrollPaneKickDotDwLong;
    private javax.swing.JScrollPane jScrollPaneKickDotPcOrigin;
    private javax.swing.JScrollPane jScrollPaneKickDotText;
    private javax.swing.JScrollPane jScrollPaneKickDotTextHighText;
    private javax.swing.JScrollPane jScrollPaneKickDotTextNumText;
    private javax.swing.JScrollPane jScrollPaneKickDotTextPetasciiText;
    private javax.swing.JScrollPane jScrollPaneKickDotTextScreenText;
    private javax.swing.JScrollPane jScrollPaneKickDotTextShiftText;
    private javax.swing.JScrollPane jScrollPaneKickDotTextZeroText;
    private javax.swing.JScrollPane jScrollPaneKickDotWoWord;
    private javax.swing.JScrollPane jScrollPaneKickDotWoWordAddress;
    private javax.swing.JScrollPane jScrollPaneKickDotWord;
    private javax.swing.JScrollPane jScrollPaneKickDotWordAddress;
    private javax.swing.JScrollPane jScrollPaneKickDoubleBarBlockComment;
    private javax.swing.JScrollPane jScrollPaneKickDoubleBarComment;
    private javax.swing.JScrollPane jScrollPaneKickDwordLong;
    private javax.swing.JScrollPane jScrollPaneKickLabelNameColon;
    private javax.swing.JScrollPane jScrollPaneKickMacroBinMonoSprite;
    private javax.swing.JScrollPane jScrollPaneKickMacroHexMonoSprite;
    private javax.swing.JScrollPane jScrollPaneKickMacroHexMultiSprite;
    private javax.swing.JScrollPane jScrollPaneKickMacroStackWord;
    private javax.swing.JScrollPane jScrollPaneKickMacroTribyte;
    private javax.swing.JScrollPane jScrollPaneKickMacroWordSwapped;
    private javax.swing.JScrollPane jScrollPaneList;
    private javax.swing.JScrollPane jScrollPanePreview;
    private javax.swing.JScrollPane jScrollPaneTMPx;
    private javax.swing.JScrollPane jScrollPaneTass64;
    private javax.swing.JScrollPane jScrollPaneTass64ASterixOrigin;
    private javax.swing.JScrollPane jScrollPaneTass64ByteBinMonoSprite;
    private javax.swing.JScrollPane jScrollPaneTass64ByteBinMultiSprite;
    private javax.swing.JScrollPane jScrollPaneTass64ByteHexMonoSprite;
    private javax.swing.JScrollPane jScrollPaneTass64ByteHexMultiSprite;
    private javax.swing.JScrollPane jScrollPaneTass64DotAddrAddress;
    private javax.swing.JScrollPane jScrollPaneTass64DotByte;
    private javax.swing.JScrollPane jScrollPaneTass64DotCharByte;
    private javax.swing.JScrollPane jScrollPaneTass64DotComment;
    private javax.swing.JScrollPane jScrollPaneTass64DotDlintLong;
    private javax.swing.JScrollPane jScrollPaneTass64DotDwordLong;
    private javax.swing.JScrollPane jScrollPaneTass64DotIfFiBlockComment;
    private javax.swing.JScrollPane jScrollPaneTass64DotLintTribyte;
    private javax.swing.JScrollPane jScrollPaneTass64DotLongTribyte;
    private javax.swing.JScrollPane jScrollPaneTass64DotNullZeroText;
    private javax.swing.JScrollPane jScrollPaneTass64DotPTextNumText;
    private javax.swing.JScrollPane jScrollPaneTass64DotRtaStackWord;
    private javax.swing.JScrollPane jScrollPaneTass64DotShiftHighText;
    private javax.swing.JScrollPane jScrollPaneTass64DotShiftlShiftText;
    private javax.swing.JScrollPane jScrollPaneTass64DotSintWord;
    private javax.swing.JScrollPane jScrollPaneTass64DotText;
    private javax.swing.JScrollPane jScrollPaneTass64DotTextLShiftText;
    private javax.swing.JScrollPane jScrollPaneTass64DotTextNZeroText;
    private javax.swing.JScrollPane jScrollPaneTass64DotTextPNumChar;
    private javax.swing.JScrollPane jScrollPaneTass64DotTextPetasciiText;
    private javax.swing.JScrollPane jScrollPaneTass64DotTextSHighText;
    private javax.swing.JScrollPane jScrollPaneTass64DotTextScreenText;
    private javax.swing.JScrollPane jScrollPaneTass64DotWord;
    private javax.swing.JScrollPane jScrollPaneTass64LabelName;
    private javax.swing.JScrollPane jScrollPaneTass64MacroBinMonoSprite;
    private javax.swing.JScrollPane jScrollPaneTass64MacroBinMultiSprite;
    private javax.swing.JScrollPane jScrollPaneTass64MacroHexMonoSprite;
    private javax.swing.JScrollPane jScrollPaneTass64MacroHexMultiSprite;
    private javax.swing.JScrollPane jScrollPaneTass64MacroWordSwapped;
    private javax.swing.JScrollPane jScrollPaneTass64SemicolonBlockComment;
    private javax.swing.JScrollPane jScrollPaneTass64SemicolonComment;
    private javax.swing.JScrollPane jScrollPaneTmpxAsterixOrigin1;
    private javax.swing.JScrollPane jScrollPaneTmpxByteBinMonoSprite1;
    private javax.swing.JScrollPane jScrollPaneTmpxByteBinMultiSprite1;
    private javax.swing.JScrollPane jScrollPaneTmpxByteHexMonoSprite1;
    private javax.swing.JScrollPane jScrollPaneTmpxByteHexMultiSprite1;
    private javax.swing.JScrollPane jScrollPaneTmpxDotAddrAddress1;
    private javax.swing.JScrollPane jScrollPaneTmpxDotIfBlockComment1;
    private javax.swing.JScrollPane jScrollPaneTmpxDotNullZeroText1;
    private javax.swing.JScrollPane jScrollPaneTmpxDotPetasciiText1;
    private javax.swing.JScrollPane jScrollPaneTmpxDotRtaStackWord1;
    private javax.swing.JScrollPane jScrollPaneTmpxDotScreenText1;
    private javax.swing.JScrollPane jScrollPaneTmpxDotShiftHighText1;
    private javax.swing.JScrollPane jScrollPaneTmpxDotShiftlShiftText1;
    private javax.swing.JScrollPane jScrollPaneTmpxDotText1;
    private javax.swing.JScrollPane jScrollPaneTmpxDotTextNumText1;
    private javax.swing.JScrollPane jScrollPaneTmpxMacroBinMonoSprite1;
    private javax.swing.JScrollPane jScrollPaneTmpxMacroBinMultiSprite1;
    private javax.swing.JScrollPane jScrollPaneTmpxMacroHexMonoSprite1;
    private javax.swing.JScrollPane jScrollPaneTmpxMacroHexMultiSprite1;
    private javax.swing.JScrollPane jScrollPaneTmpxMacroLong1;
    private javax.swing.JScrollPane jScrollPaneTmpxMacroTribyte1;
    private javax.swing.JScrollPane jScrollPaneTmpxMacroWordSwapped1;
    private javax.swing.JScrollPane jScrollPaneTmpxSemicolonBlockComment1;
    private javax.swing.JScrollPane jScrollPaneTmpxSemicolonComment1;
    private javax.swing.JScrollPane jScrollPanekickMacroBinMultiSprite;
    private javax.swing.JSpinner jSpinnerDataCSpaces;
    private javax.swing.JSpinner jSpinnerDataCTabs;
    private javax.swing.JSpinner jSpinnerDataSpaces;
    private javax.swing.JSpinner jSpinnerDataTabs;
    private javax.swing.JSpinner jSpinnerInstrCSpaces;
    private javax.swing.JSpinner jSpinnerInstrCTabs;
    private javax.swing.JSpinner jSpinnerInstrSpaces;
    private javax.swing.JSpinner jSpinnerInstrTabs;
    private javax.swing.JSpinner jSpinnerMaxAddressAggregate;
    private javax.swing.JSpinner jSpinnerMaxByteAggregate;
    private javax.swing.JSpinner jSpinnerMaxLength;
    private javax.swing.JSpinner jSpinnerMaxLongAggregate;
    private javax.swing.JSpinner jSpinnerMaxStackWordAggregate;
    private javax.swing.JSpinner jSpinnerMaxSwappedAggregate;
    private javax.swing.JSpinner jSpinnerMaxTextAggregate;
    private javax.swing.JSpinner jSpinnerMaxTribyteAggregate;
    private javax.swing.JSpinner jSpinnerMaxWordAggregate;
    private javax.swing.JTabbedPane jTabbedPaneAssembler;
    private javax.swing.JTabbedPane jTabbedPaneComm;
    private javax.swing.JTabbedPane jTabbedPaneOption;
    private javax.swing.JTextArea jTextAreaHeather;
    private javax.swing.JTextField jTextFieldInitSongs;
    private javax.swing.JTextField jTextFieldPlaySound;
    private javax.swing.JTextField jTextFieldSidFreqHi;
    private javax.swing.JTextField jTextFieldSidFreqLo;
    private javax.swing.JTextField jTextFieldTmpPath;
    private javax.swing.JTextPane jTextPaneDasmSharpIfPBlockComment;
    private javax.swing.JTextPane jTextPaneGlassAsterixOrigin;
    private javax.swing.JTextPane jTextPaneGlassFakeStarting;
    private javax.swing.JTextPane jTextPaneGlassLabelName;
    private javax.swing.JTextPane jTextPaneKickAsterixOrigin;
    private javax.swing.JTextPane jTextPaneKickByteBinMonoSprite;
    private javax.swing.JTextPane jTextPaneKickByteBinMultiSprite;
    private javax.swing.JTextPane jTextPaneKickByteHexMonoSprite;
    private javax.swing.JTextPane jTextPaneKickByteHexMultiSprite;
    private javax.swing.JTextPane jTextPaneKickCstyleBlockComment;
    private javax.swing.JTextPane jTextPaneKickDotByByte;
    private javax.swing.JTextPane jTextPaneKickDotByte;
    private javax.swing.JTextPane jTextPaneKickDotCpuUndStarting;
    private javax.swing.JTextPane jTextPaneKickDotDwLong;
    private javax.swing.JTextPane jTextPaneKickDotPcOrigin;
    private javax.swing.JTextPane jTextPaneKickDotText;
    private javax.swing.JTextPane jTextPaneKickDotTextHighText;
    private javax.swing.JTextPane jTextPaneKickDotTextNumText;
    private javax.swing.JTextPane jTextPaneKickDotTextPetasciiText;
    private javax.swing.JTextPane jTextPaneKickDotTextShiftText;
    private javax.swing.JTextPane jTextPaneKickDotTextZeroText;
    private javax.swing.JTextPane jTextPaneKickDotWoWord;
    private javax.swing.JTextPane jTextPaneKickDotWoWordAddress;
    private javax.swing.JTextPane jTextPaneKickDotWord;
    private javax.swing.JTextPane jTextPaneKickDotWordAddress;
    private javax.swing.JTextPane jTextPaneKickDoubleBarBlockComment;
    private javax.swing.JTextPane jTextPaneKickDoubleBarComment;
    private javax.swing.JTextPane jTextPaneKickDwordLong;
    private javax.swing.JTextPane jTextPaneKickLabelNameColon;
    private javax.swing.JTextPane jTextPaneKickMacroBinMonoSprite;
    private javax.swing.JTextPane jTextPaneKickMacroBinMultiSprite;
    private javax.swing.JTextPane jTextPaneKickMacroHexMonoSprite;
    private javax.swing.JTextPane jTextPaneKickMacroHexMultiSprite;
    private javax.swing.JTextPane jTextPaneKickMacroStackWord;
    private javax.swing.JTextPane jTextPaneKickMacroTribyte;
    private javax.swing.JTextPane jTextPaneKickMacroWordSwapped;
    private javax.swing.JTextPane jTextPaneTass64AsterixOrigin;
    private javax.swing.JTextPane jTextPaneTass64ByteBinMonoSprite;
    private javax.swing.JTextPane jTextPaneTass64ByteBinMultiSprite;
    private javax.swing.JTextPane jTextPaneTass64ByteHexMonoSprite;
    private javax.swing.JTextPane jTextPaneTass64DotAddrAddress;
    private javax.swing.JTextPane jTextPaneTass64DotByte;
    private javax.swing.JTextPane jTextPaneTass64DotCharByte;
    private javax.swing.JTextPane jTextPaneTass64DotCommentBlockComment;
    private javax.swing.JTextPane jTextPaneTass64DotCpuAStarting;
    private javax.swing.JTextPane jTextPaneTass64DotDlintLong;
    private javax.swing.JTextPane jTextPaneTass64DotDwordLong;
    private javax.swing.JTextPane jTextPaneTass64DotLintTribyte;
    private javax.swing.JTextPane jTextPaneTass64DotLongTribyte;
    private javax.swing.JTextPane jTextPaneTass64DotNullZeroText;
    private javax.swing.JTextPane jTextPaneTass64DotPTextNumText;
    private javax.swing.JTextPane jTextPaneTass64DotRtaStackWord;
    private javax.swing.JTextPane jTextPaneTass64DotShiftHighText;
    private javax.swing.JTextPane jTextPaneTass64DotShiftlShiftText;
    private javax.swing.JTextPane jTextPaneTass64DotSintWord;
    private javax.swing.JTextPane jTextPaneTass64DotText;
    private javax.swing.JTextPane jTextPaneTass64DotTextLShiftText;
    private javax.swing.JTextPane jTextPaneTass64DotTextNZeroText;
    private javax.swing.JTextPane jTextPaneTass64DotTextPNumChar;
    private javax.swing.JTextPane jTextPaneTass64DotTextPetasciiText;
    private javax.swing.JTextPane jTextPaneTass64DotTextSHighText;
    private javax.swing.JTextPane jTextPaneTass64DotTextScreenText;
    private javax.swing.JTextPane jTextPaneTass64DotWord;
    private javax.swing.JTextPane jTextPaneTass64LabelNameColon;
    private javax.swing.JTextPane jTextPaneTass64MacroBinMonoSprite;
    private javax.swing.JTextPane jTextPaneTass64MacroBinMultiSprite;
    private javax.swing.JTextPane jTextPaneTass64MacroHexMonoSprite;
    private javax.swing.JTextPane jTextPaneTass64MacroHexMultiSprite;
    private javax.swing.JTextPane jTextPaneTass64MacroWordSwapped;
    private javax.swing.JTextPane jTextPaneTass64SemicolonBlockComment;
    private javax.swing.JTextPane jTextPaneTass64SemicolonComment;
    private javax.swing.JTextPane jTextPaneTass664DotIfFiBlockComment1;
    private javax.swing.JTextPane jTextPaneTmpxByteBinMonoSprite1;
    private javax.swing.JTextPane jTextPaneTmpxByteBinMultiSprite1;
    private javax.swing.JTextPane jTextPaneTmpxByteHexMonoSprite1;
    private javax.swing.JTextPane jTextPaneTmpxDotAddrAddress1;
    private javax.swing.JTextPane jTextPaneTmpxDotByte1;
    private javax.swing.JTextPane jTextPaneTmpxDotIfBlockComment1;
    private javax.swing.JTextPane jTextPaneTmpxDotNullZeroText1;
    private javax.swing.JTextPane jTextPaneTmpxDotPetasciiText1;
    private javax.swing.JTextPane jTextPaneTmpxDotRtaStackWord1;
    private javax.swing.JTextPane jTextPaneTmpxDotScreenText1;
    private javax.swing.JTextPane jTextPaneTmpxDotShiflShiftText1;
    private javax.swing.JTextPane jTextPaneTmpxDotShiftHighText1;
    private javax.swing.JTextPane jTextPaneTmpxDotText1;
    private javax.swing.JTextPane jTextPaneTmpxDotTextNumText1;
    private javax.swing.JTextPane jTextPaneTmpxDotWord1;
    private javax.swing.JTextPane jTextPaneTmpxMacroBinMonoSprite1;
    private javax.swing.JTextPane jTextPaneTmpxMacroBinMultiSprite1;
    private javax.swing.JTextPane jTextPaneTmpxMacroHexMonoSprite1;
    private javax.swing.JTextPane jTextPaneTmpxMacroHexMultiSprite1;
    private javax.swing.JTextPane jTextPaneTmpxMacroLong1;
    private javax.swing.JTextPane jTextPaneTmpxMacroTribyte1;
    private javax.swing.JTextPane jTextPaneTmpxMacroWordSwapped1;
    private javax.swing.JTextPane jTextPaneTmpxSemicolonBlockComment1;
    private javax.swing.JTextPane jTextPaneTmpxSemicolonComment1;
    private sw_emulator.swing.JTmpxPanel jTmpxPanel;
    // End of variables declaration//GEN-END:variables

    /**
     * Use the passed option container 
     * 
     * @param option the option to use
     */
    public void useOption(Option option) {
      this.option=option;
      applyOption();
    }

    /**
     * Apply option to graphical container
     */
    private void applyOption() {
      jRadioButtonLangEnglish.setSelected(option.commentLanguage==C64Dasm.LANG_ENGLISH);
      jRadioButtonLangItalian.setSelected(option.commentLanguage==C64Dasm.LANG_ITALIAN);
      jRadioButtonStyle1.setSelected((option.illegalOpcodeMode==M6510Dasm.MODE1));
      jRadioButtonStyle2.setSelected((option.illegalOpcodeMode==M6510Dasm.MODE2));
      jRadioButtonStyle3.setSelected((option.illegalOpcodeMode==M6510Dasm.MODE3));
      jRadioButtonMemoryValueHex.setSelected(option.memoryValue==DataTableModelMemory.MOD_HEX);
      jRadioButtonMemoryValueChar.setSelected(option.memoryValue==DataTableModelMemory.MOD_CHAR);
      jCheckBoxOpcodeFormattingPreview.setSelected(option.opcodeUpperCasePreview);      
      jCheckBoxOpcodeFormattingSource.setSelected(option.opcodeUpperCaseSource);      
      jCheckBoxUndefinedCode.setSelected(option.useAsCode);
      jCheckBoxEraseDComm.setSelected(option.eraseDComm);
      jCheckBoxErasePlus.setSelected(option.erasePlus);
      jTextFieldInitSongs.setText(option.psidInitSongsLabel);
      jTextFieldPlaySound.setText(option.psidPlaySoundsLabel);
      jTextFieldSidFreqLo.setText(option.sidFreqLoLabel);
      jTextFieldSidFreqHi.setText(option.sidFreqHiLabel);
      jSpinnerMaxLength.setValue(option.maxLabelLength);
      jSpinnerMaxByteAggregate.setValue(option.maxByteAggregate);
      jSpinnerMaxTribyteAggregate.setValue(option.maxTribyteAggregate);
      jSpinnerMaxWordAggregate.setValue(option.maxWordAggregate);
      jSpinnerMaxLongAggregate.setValue(option.maxLongAggregate);
      jSpinnerMaxSwappedAggregate.setValue(option.maxSwappedAggregate);
      jSpinnerMaxTextAggregate.setValue(option.maxTextAggregate);
      jSpinnerMaxAddressAggregate.setValue(option.maxAddressAggregate);
      jSpinnerMaxStackWordAggregate.setValue(option.maxStackWordAggregate);
      jSpinnerInstrSpaces.setValue(option.numInstrSpaces);
      jSpinnerInstrTabs.setValue(option.numInstrTabs);
      jSpinnerDataSpaces.setValue(option.numDataSpaces);
      jSpinnerDataTabs.setValue(option.numDataTabs);
      jSpinnerInstrCSpaces.setValue(option.numInstrCSpaces);
      jSpinnerInstrCTabs.setValue(option.numInstrCTabs);
      jSpinnerDataCSpaces.setValue(option.numDataCSpaces);
      jSpinnerDataCTabs.setValue(option.numDataCTabs);
      jCheckBoxLabel.setSelected(option.labelOnSepLine);
      jTextFieldTmpPath.setText(option.tmpPath);
      jCheckBoxDcErase.setSelected(option.clickDcErase);
      jCheckBoxDlErase.setSelected(option.clickDlErase);
      jCheckBoxUbEdit.setSelected(option.clickUbEdit);
      jCheckBoxUcEdit.setSelected(option.clickUcEdit);
      jCheckBoxUlEdit.setSelected(option.clickUlEdit);
      jCheckBoxVlPatch.setSelected(option.clickVlPatch);
      jCheckBoxForceCompilation.setSelected(option.forceCompilation);
      jCheckBoxAllowUtf.setSelected(option.allowUtf);
      jCheckBoxAllowSIDFreq.setSelected(option.useSidFreq);
      jCheckBoxMarkMemory.setSelected(option.sidFreqMarkMem);
      jCheckBoxSetLabels.setSelected(option.sidFreqCreateLabel);
      jCheckBoxSetComment.setSelected(option.sidFreqCreateComment);
      jCheckBoxMarkMemory.setEnabled(option.useSidFreq);
      jCheckBoxSetLabels.setEnabled(option.useSidFreq);
      jCheckBoxSetComment.setEnabled(option.useSidFreq);
      jCheckBoxNotUsePSID.setSelected(option.notMarkPSID);
      jCheckBoxCreatePSID.setSelected(option.createPSID);
      jCheckBoxNotUsePSID.setEnabled(option.createPSID);
      jCheckBoxRepositionate.setSelected(option.repositionate);
      jCheckBoxPedantic.setSelected(option.pedantic);
      
      switch (option.heather) {
          case Option.HEATHER_STANDARD:
            jRadioButtonStandard.setSelected(true);
            break;
          case Option.HEATHER_NONE:
            jRadioButtonNone.setSelected(true);
            break;
          case Option.HEATHER_CUSTOM:
            jRadioButtonCustom.setSelected(true);
            break;  
      }
      jTextAreaHeather.setText(option.custom);
      
      actualLEF=option.getLafName();
      actualTheme=option.getMethalTheme();
      actualLaf=option.getFlatLaf();
      
      // select the right element
      String name;        
      for (int i=0; i<listModel.size(); i++) {        
        name=(String)listModel.elementAt(i);
        if (name.equals(actualLaf)) jListLaf.setSelectedIndex(i);
      }  
      
      goFlat=true;
      
      // show the look and feel radio selected
      String lafName=option.getLafName();
      if (lafName.equals(Option.LAF_GTK)) jRadioButtonLookGtk.setSelected(true);
      if (lafName.equals(Option.LAF_MAC)) jRadioButtonLookMac.setSelected(true);
      if (lafName.equals(Option.LAF_METAL)) jRadioButtonLookMetal.setSelected(true);
      if (lafName.equals(Option.LAF_MOTIF)) jRadioButtonLookJava.setSelected(true);    
      if (lafName.equals(Option.LAF_WINDOWS)) jRadioButtonLookWin.setSelected(true);
      if (lafName.equals(Option.LAF_CWINDOWS)) jRadioButtonLookCWin.setSelected(true);
      if (lafName.equals(Option.LAF_NIMBUS)) jRadioButtonLookNimbus.setSelected(true);
      if (lafName.equals(Option.LAF_SYNTH)) {
        jRadioButtonLookSynth.setSelected(true);
        jListLaf.setEnabled(true);        
      }
      
      selectedTheme();
      
      //assembler
      jComboBoxAssembler.setSelectedItem(null);
      jComboBoxAssembler.setSelectedItem(option.assembler.getName());      

      
      jDasmPanel.applyOptionDasm();
      jTmpxPanel.applyOptionTmpx();
      jCa65Panel.applyOptionC65();
      jAcmePanel.applyOptionAcme();
      applyOptionKickAssembler();
      applyOptionTass64Assembler();
      applyOptionGlass();
      
      applyCommentsC64();
      applyCommentsC1541();
      applyCommentsPlus4();
      applyCommentsVic20();      
      applyCommentsC128();  
    }
    
  /**
   * Disable the themes buttons
   */
  private void disableTheme() {
    jRadioButtonOcean.setEnabled(false);
    jRadioButtonSteel.setEnabled(false);
    jRadioButtonAqua.setEnabled(false);
    jRadioButtonCharcoal.setEnabled(false);
    jRadioButtonHighContrast.setEnabled(false);
    jRadioButtonEmerald.setEnabled(false);
    jRadioButtonRuby.setEnabled(false);
  }
  
  /**
   * Enable the themes buttons
   */
  private void enableTheme() {
    jRadioButtonOcean.setEnabled(true);
    jRadioButtonSteel.setEnabled(true);
    jRadioButtonAqua.setEnabled(true);
    jRadioButtonCharcoal.setEnabled(true);
    jRadioButtonHighContrast.setEnabled(true);
    jRadioButtonEmerald.setEnabled(true);
    jRadioButtonRuby.setEnabled(true);   
  }  
  
  /**
   * Select the theme in radio button
   */
  public void selectedTheme() {
    switch (option.getTheme()) {
      case Option.THEME_OCEAN:
        jRadioButtonOcean.setSelected(true); 
        break;
      case Option.THEME_STEEL:
        jRadioButtonSteel.setSelected(true);    
        break;
      case Option.THEME_AQUA:
        jRadioButtonAqua.setSelected(true);   
        break;
      case Option.THEME_CHARCOAL:
        jRadioButtonCharcoal.setSelected(true);   
        break;    
      case Option.THEME_CONTRAST:
        jRadioButtonHighContrast.setSelected(true);   
        break;       
      case Option.THEME_EMERALD:
        jRadioButtonEmerald.setSelected(true);   
        break;      
      case Option.THEME_RUBY:
        jRadioButtonRuby.setSelected(true);   
        break;         
    }      
  }
  
  /**
   * Apply the option for KickAssembler
   */
  private void applyOptionKickAssembler() {
    jCheckBoxKickColonMacro.setSelected(option.kickColonMacro);
      
    switch (option.kickStarting) {
      case DOT_CPU_UND:
        jRadioButtonKickDotCpuUndStarting.setSelected(true);   
        break;
    }
    
    switch (option.kickOrigin) {                     
      case DOT_ORG:
        jRadioButtonKickAsterixOrigin.setSelected(true);
        break;  
      case DOT_PC:
        jRadioButtonKickDotPcOrigin.setSelected(true);  
        break;
    }
    
    switch (option.kickLabel) {
      case NAME_COLON:
        jRadioButtonKickLabelNameColon.setSelected(true);
        break;
    }
    
    switch (option.kickComment) {
      case DOUBLE_BAR:  
        jRadioButtonKickDoubleBarComment.setSelected(true);
        break; 
    }  
    
    switch (option.kickBlockComment) {
      case DOUBLE_BAR:
        jRadioButtonKickDoubleBarBlockComment.setSelected(true);
        break;
      case CSTYLE:
        jRadioButtonKickCstyleBlockComment.setSelected(true);  
        break;  
      case SHARP_IF:
        jRadioButtonDasmSharpIfPBlockComment.setSelected(true);  
        break;           
    }   
           
    switch (option.kickByte) {
      case DOT_BYTE:  
        jRadioButtonKickDotByte.setSelected(true);
        break; 
      case DOT_BY_BYTE:
        jRadioButtonKickDotByByte.setSelected(true);  
        break;  
    }
    
    switch (option.kickWord) {
      case DOT_WORD:  
        jRadioButtonKickDotWord.setSelected(true);
        break;  
       case DOT_WO_WORD:  
        jRadioButtonKickDotWoWord.setSelected(true);
        break;                
    }  
    
    switch (option.kickWordSwapped) { 
      case MACRO1_WORD_SWAPPED:
        jRadioButtonKickMacroWordSwapped.setSelected(true);  
        break;    
    }     
    
    switch (option.kickTribyte) {
      case MACRO1_TRIBYTE:  
        jRadioButtonKickMacroTribyte.setSelected(true);
        break;  
    }
    
    switch (option.kickLong) {
      case DOT_DWORD_LONG:  
        jRadioButtonKickDwordLong.setSelected(true);
        break;  
      case DOT_DW_LONG:  
        jRadioButtonKickDotDwLong.setSelected(true);
        break;    
    }
    
    switch (option.kickAddress) {
      case DOT_WORD_ADDR:  
        jRadioButtonKickDotWordAddress.setSelected(true);
        break;  
       case DOT_WO_WORD_ADDR:  
        jRadioButtonKickDotWoWordAddress.setSelected(true);
        break;                
    }  
    
    switch (option.kickStackWord) {
      case MACRO1_STACKWORD:
        jRadioButtonKickMacroStackWord.setSelected(true);
        break;
    } 
    
    switch (option.kickMonoSprite) {
      case BYTE_HEX:
        jRadioButtonKickByteHexMonoSprite.setSelected(true);
        break;
      case BYTE_BIN:
        jRadioButtonKickByteBinMonoSprite.setSelected(true);
        break;
      case MACRO1_HEX:
        jRadioButtonKickMacroHexMonoSprite.setSelected(true);
        break;  
      case MACRO1_BIN:
        jRadioButtonKickMacroBinMonoSprite.setSelected(true);
        break;  
    }
    
    switch (option.kickMultiSprite) {
      case BYTE_HEX:
        jRadioButtonKickByteHexMultiSprite.setSelected(true);
        break;
      case BYTE_BIN:
        jRadioButtonKickByteBinMultiSprite.setSelected(true);
        break;
      case MACRO1_HEX:
        jRadioButtonKickMacroHexMultiSprite.setSelected(true);
        break;  
      case MACRO1_BIN:
        jRadioButtonKickMacroBinMultiSprite.setSelected(true);
        break;  
    }     
    
    switch (option.kickText) {
      case DOT_TEXT:  
        jRadioButtonKickDotText.setSelected(true);
        break;           
    }   
    
    switch (option.kickNumText) {
      case DOT_TEXT_NUMTEXT:  
        jRadioButtonKickDotTextNumText.setSelected(true);
        break;           
    }  
     
    switch (option.kickZeroText) {
      case DOT_TEXT_ZEROTEXT:  
        jRadioButtonKickDotTextZeroText.setSelected(true);
        break;           
    }   
    
    switch (option.kickHighText) {
      case DOT_TEXT_HIGHTEXT:  
        jRadioButtonKickDotTextHighText.setSelected(true);
        break;           
    }
    
    switch (option.kickShiftText) {
      case DOT_TEXT_SHIFTTEXT:  
        jRadioButtonKickDotTextShiftText.setSelected(true);
        break;           
    }
    
    switch (option.kickScreenText) {
      case DOT_TEXT_SCREENTEXT:  
        jRadioButtonKickDotTextScreenText.setSelected(true);
        break;           
    }
    
    switch (option.kickPetasciiText) {
      case DOT_TEXT_PETASCIITEXT:  
        jRadioButtonKickDotTextPetasciiText.setSelected(true);
        break;           
    }
  }
  
  /**
   * Apply the option for KickAssembler
   */
  private void applyOptionTass64Assembler() {
    switch (option.tass64Starting) {
      case DOT_CPU_A:
         jRadioButtonTass64DotCpuAStarting.setSelected(true);
            break;
     }
    
    switch (option.tass64Origin) {                     
      case ASTERISK:
        jRadioButtonTass64AsterixOrigin.setSelected(true);
        break;                 
    }
    
    switch (option.tass64Comment) {
      case SEMICOLON:
        jRadioButtonTass64SemicolonComment.setSelected(true);
        break;
    }     
    
    switch (option.tass64BlockComment) {
      case SEMICOLON:
        jRadioButtonTass64SemicolonBlockComment.setSelected(true);
        break;
      case DOT_IF_FI:
        jRadioButtontass64DotIfFiBlockComment.setSelected(true);  
        break;  
      case DOT_COMMENT:
        jRadioButtonTass64DotCommentBlockComment.setSelected(true);  
        break;           
    }    
    
    switch (option.tass64Label) {
      case NAME_COLON:
        jRadioButtonTass64LabelNameColon.setSelected(true);
        break;
    }
    
    switch (option.tass64Byte) {
      case DOT_BYTE:  
        jRadioButtonTass64DotByte.setSelected(true);
        break; 
      case DOT_CHAR:  
        jRadioButtonTass64DotCharByte.setSelected(true);  
        break;
    }
    
    switch (option.tass64Word) {
      case DOT_WORD:  
        jRadioButtonTass64DotWord.setSelected(true);
        break;       
      case DOT_SINT:
        jRadioButtonTass64DotSintWord.setSelected(true);  
        break;  
    }        
    
    switch (option.tass64WordSwapped) { 
      case MACRO4_WORD_SWAPPED:
        jRadioButtonTass64MacroWordSwapped.setSelected(true);  
        break;    
    }  
    
    switch (option.tass64Tribyte) {
      case DOT_LONG_TRIBYTE:  
        jRadioButtonTass64DotLongTribyte.setSelected(true);
        break;  
      case DOT_LINT_TRIBYTE:  
        jRadioButtonTass64DotLintTribyte.setSelected(true);
        break;   
    }    
    
    switch (option.tass64Long) {
      case DOT_DWORD_LONG:  
        jRadioButtonTass64DotDwordLong.setSelected(true);
        break;  
      case  DOT_DLINT_LONG:  
        jRadioButtonTass64DotDlintLong.setSelected(true);
        break;   
    }
    
    switch (option.tass64Address) {
      case DOT_WORD_ADDR:  
        jRadioButtonTass64DotAddrAddress.setSelected(true);
        break;  
    }  
    
    switch (option.tass64StackWord) {
      case DOT_RTA_STACKWORD:
        jRadioButtonTass64DotRtaStackWord.setSelected(true);
        break;
    }
    
    switch (option.tass64MonoSprite) {
      case BYTE_HEX:
        jRadioButtonTass64ByteHexMonoSprite.setSelected(true);
        break;
      case BYTE_BIN:
        jRadioButtonTass64ByteBinMonoSprite.setSelected(true);
        break;
      case MACRO_HEX:
        jRadioButtonTass64MacroHexMonoSprite.setSelected(true);
        break;  
      case MACRO_BIN:
        jRadioButtonTass64MacroBinMonoSprite.setSelected(true);
        break;  
    }
    
    switch (option.tass64MultiSprite) {
      case BYTE_HEX:
        jRadioButtonTass64ByteHexMultiSprite.setSelected(true);
        break;
      case BYTE_BIN:
        jRadioButtonTass64ByteBinMultiSprite.setSelected(true);
        break;
      case MACRO4_HEX:
        jRadioButtonTass64MacroHexMultiSprite.setSelected(true);
        break;  
      case MACRO4_BIN:
        jRadioButtonTass64MacroBinMultiSprite.setSelected(true);
        break;  
    }  
    
    switch (option.tass64Text) {
      case DOT_TEXT:
        jRadioButtonTass64DotText.setSelected(true);
        break;
    }
    
    switch (option.tass64NumText) {
      case DOT_PTEXT_NUMTEXT:
        jRadioButtonTass64DotPTextNumText.setSelected(true);
        break;
      case DOT_TEXT_P_NUMTEXT:
        jRadioButtonTass64DotTextPNumText.setSelected(true);
        break;  
    } 
    
    switch (option.tass64ZeroText) {
      case DOT_NULL_ZEROTEXT:
        jRadioButtonTass64DotNullZeroText.setSelected(true);
        break;
      case DOT_TEXT_N_ZEROTEXT:
        jRadioButtonTass64DotTextNZeroText.setSelected(true);
        break;  
    }   
    
    switch (option.tass64HighText) {
      case DOT_SHIFT_HIGHTEXT:
        jRadioButtonTass64DotShiftHighText.setSelected(true);
        break;
      case DOT_TEXT_S_HIGHTEXT:
        jRadioButtonTass64DotTextSHighText.setSelected(true);
        break;  
    }   
    
    switch (option.tass64ShiftText) {
      case DOT_SHIFTL_SHIFTTEXT:
        jRadioButtonTass64DotShiftlShiftText.setSelected(true);
        break;
      case DOT_TEXT_L_SHIFTTEXT:
        jRadioButtonTass64DotShiftlShiftText.setSelected(true);
        break;  
    } 

    switch (option.tass64ScreenText) {
      case DOT_TEXT_SCREENTEXT:  
        jRadioButtonTass64DotTextScreenText.setSelected(true);
        break;           
    }
    
    switch (option.tass64PetasciiText) {
      case DOT_TEXT_PETASCIITEXT:  
        jRadioButtonTass64DotTextPetasciiText.setSelected(true);
        break;           
    }
  }   
  
  /**
   * Apply the option for TMPx
   */
  private void applyOptionGlass() {
    switch (option.glassStarting) {
      case FAKEZ:
        jRadioButtonGlassFakeStarting.setSelected(true);   
        break;
    }
      
    
  }

  /**
   * Apply comments for C64
   */
  private void applyCommentsC64() {
    jCheckBoxC64ZeroPage.setSelected(option.commentC64ZeroPage);
    jCheckBoxC64StackArea.setSelected(option.commentC64StackArea);
    jCheckBoxC64_200Area.setSelected(option.commentC64_200Area);
    jCheckBoxC64_300Area.setSelected(option.commentC64_300Area);
    jCheckBoxC64FreeArea.setSelected(option.commentC64BasicFreeArea);
    jCheckBoxC64BasicRom.setSelected(option.commentC64BasicRom);
    jCheckBoxC64FreeRam.setSelected(option.commentC64FreeRam);
    jCheckC64BoxVicII.setSelected(option.commentC64VicII);
    jCheckC64BoxSid.setSelected(option.commentC64Sid);
    jCheckBoxC64Color.setSelected(option.commentC64ColorArea);
    jCheckBoxC64Cia1.setSelected(option.commentC64Cia1);
    jCheckBoxC64Cia2.setSelected(option.commentC64Cia2);
    jCheckBoxC64KernalRom.setSelected(option.commentC64ScreenArea);
    jCheckBoxC64ScreenArea.setSelected(option.commentC64ScreenArea);
  }


  /**
   * Apply comments for C1541
   */  
  private void applyCommentsC1541() {
    jCheckBoxC1541ZeroPage.setSelected(option.commentC1541ZeroPage);
    jCheckBoxC1541StackArea.setSelected(option.commentC1541StackArea);
    jCheckBoxC1541_200Area.setSelected(option.commentC1541_200Area);
    jCheckBoxC1541Via1.setSelected(option.commentC1541Via1);
    jCheckBoxC1541Via2.setSelected(option.commentC1541Via2);
    jCheckBoxC1541Kernal.setSelected(option.commentC1541Kernal);
    jCheckBoxC1541Buffer0.setSelected(option.commentC1541Buffer0);
    jCheckBoxC1541Buffer1.setSelected(option.commentC1541Buffer1);
    jCheckBoxC1541Buffer2.setSelected(option.commentC1541Buffer2);
    jCheckBoxC1541Buffer3.setSelected(option.commentC1541Buffer3);
    jCheckBoxC1541Buffer4.setSelected(option.commentC1541Buffer4);
  }

  /**
   * Apply comments Plus4
   */
  private void applyCommentsPlus4() {
    jCheckBoxPlus4Acia.setSelected(option.commentPlus4Acia);
    jCheckBoxPlus4BasicExt.setSelected(option.commentPlus4BasicExt);
    jCheckBoxPlus4BasicRamN.setSelected(option.commentPlus4BasicRamN);
    jCheckBoxPlus4BasicRamP.setSelected(option.commentPlus4BasicRamP);
    jCheckBoxPlus4BasicRom.setSelected(option.commentPlus4BasicRom);
    jCheckBoxPlus4Caracter.setSelected(option.commentPlus4Caracter);
    jCheckBoxPlus4ColorArea.setSelected(option.commentPlus4ColorArea);
    jCheckBoxPlus4ColorBitmap.setSelected(option.commentPlus4ColorBitmap);
    jCheckBoxPlus4GraphicData.setSelected(option.commentPlus4GraphicData);
    jCheckBoxPlus4Kernal.setSelected(option.commentPlus4Kernal);
    jCheckBoxPlus4Luminance.setSelected(option.commentPlus4Luminance);
    jCheckBoxPlus4StackArea.setSelected(option.commentPlus4StackArea);
    jCheckBoxPlus4Ted.setSelected(option.commentPlus4Ted);
    jCheckBoxPlus4VideoArea.setSelected(option.commentPlus4VideoArea);
    jCheckBoxPlus4ZeroPage.setSelected(option.commentPlus4ZeroPage);
    jCheckBoxPlus4_200Area.setSelected(option.commentPlus4_200Area);
    jCheckBoxPlus4_300Area.setSelected(option.commentPlus4_300Area);
    jCheckBoxPlus4_400Area.setSelected(option.commentPlus4_400Area);
    jCheckBoxPlus4_500Area.setSelected(option.commentPlus4_500Area);
    jCheckBoxPlus4_600Area.setSelected(option.commentPlus4_600Area);
    jCheckBoxPlus4_6529B_1.setSelected(option.commentPlus4_6529B_1);
    jCheckBoxPlus4_6529B_2.setSelected(option.commentPlus4_6529B_2);
    jCheckBoxPlus4_700Area.setSelected(option.commentPlus4_700Area); 
  }

  /**
   * Apply comemnts for Vic20
   */
  private void applyCommentsVic20() {
    jCheckBoxVic20BasicRom.setSelected(option.commentVic20BasicRom);
    jCheckBoxVic20Block2.setSelected(option.commentVic20Block2);
    jCheckBoxVic20Block3.setSelected(option.commentVic20Block3);
    jCheckBoxVic20Block4.setSelected(option.commentVic20Block4);
    jCheckBoxVic20Character.setSelected(option.commentVic20Character);
    jCheckBoxVic20Color.setSelected(option.commentVic20Color);
    jCheckBoxVic20KernalRom.setSelected(option.commentVic20KernalRom);
    jCheckBoxVic20Screen.setSelected(option.commentVic20Screen);
    jCheckBoxVic20StackArea.setSelected(option.commentVic20StackArea);
    jCheckBoxVic20UserBasic.setSelected(option.commentVic20UserBasic);
    jCheckBoxVic20Via1.setSelected(option.commentVic20Via1);
    jCheckBoxVic20Via2.setSelected(option.commentVic20Via2);
    jCheckBoxVic20Vic.setSelected(option.commentVic20Vic);
    jCheckBoxVic20ZeroPage.setSelected(option.commentVic20ZeroPage);
    jCheckBoxVic20_200Area.setSelected(option.commentVic20_200Area);
    jCheckBoxVic20_300Area.setSelected(option.commentVic20_300Area);
    jCheckBoxVic20_400Area.setSelected(option.commentVic20_400Area);
    jCheckBoxVic20_8kExp1.setSelected(option.commentVic20_8kExp1);
    jCheckBoxVic20_8kExp2.setSelected(option.commentVic20_8kExp2);
    jCheckBoxVic20_8kExp3.setSelected(option.commentVic20_8kExp3);
  }

  /**
   * Apply comments for C128
   */
  private void applyCommentsC128() {
    jCheckBoxC128ZeroPage.setSelected(option.commentC128ZeroPage);
    jCheckBoxC128StackArea.setSelected(option.commentC128StackArea);
    jCheckBoxC128_200Area.setSelected(option.commentC128_200Area);
    jCheckBoxC128_300Area.setSelected(option.commentC128_300Area);
    jCheckBoxC128ScreenArea.setSelected(option.commentC128ScreenArea);    
    jCheckBoxC128AppProgArea.setSelected(option.commentC128AppProgArea);   
    jCheckBoxC128BasicRom.setSelected(option.commentC128BasicRom);  
    jCheckBoxC128Cia1.setSelected(option.commentC128Cia1);  
    jCheckBoxC128Cia2.setSelected(option.commentC128Cia2);  
    jCheckBoxC128Color.setSelected(option.commentC128Color);  
    jCheckBoxC128DMA.setSelected(option.commentC128DMA);  
    jCheckBoxC128KernalRom.setSelected(option.commentC128KernalRom);  
    jCheckBoxC128MMU.setSelected(option.commentC128MMU);   
    jCheckBoxC128ScreenMem.setSelected(option.commentC128ScreenMem);  
    jCheckBoxC128UserBasic.setSelected(option.commentC128UserBasic);  
    jCheckBoxC128VDC.setSelected(option.commentC128VDC);   
    jCheckBoxC128VideoColor.setSelected(option.commentC128VideoColor);  
    jCheckBoxC128VicII.setSelected(option.commentC128VicII);
    jCheckBoxC128Sid.setSelected(option.commentC128Sid);
  }    
}
