/**
 * @(#)JPanelOption.java 2019/12/01
 *
 * ICE Team free software group
 *
 * This file is part of C64 Java Software Emulator.
 * See README for copyright notice.
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 *  02111-1307  USA.
 */
package sw_emulator.swing;

import com.formdev.flatlaf.FlatLaf;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SwingUtilities;
import javax.swing.plaf.metal.MetalTheme;
import javax.swing.UIManager;
import javax.swing.JScrollPane;
import sw_emulator.software.Assembler;
import sw_emulator.software.Assembler.Name;

import sw_emulator.software.cpu.M6510Dasm;
import sw_emulator.software.machine.C64Dasm;
import sw_emulator.swing.main.FileManager;
import sw_emulator.swing.main.Option;
import sw_emulator.swing.table.DataTableModelMemory;

/**
 * A dialog for option
 * 
 * @author ice
 */
public class JOptionDialog extends javax.swing.JDialog {
  /** Option to use */
  Option option=new Option();
    
  /** Actual selected look and feel */
  String actualLEF=option.getLafName();
  
  /** Actual metal theme to use */
  MetalTheme actualTheme=option.getMethalTheme();
  
  /** Actual flat laf theme */
  String actualLaf=option.getFlatLaf();
  
  /** Default list model for laf look & feel */
  DefaultListModel<String> listModel=new DefaultListModel();
  
  /** file chooser for tmp dierctory */
  JFileChooser chooserDir=new JFileChooser();   
  
  /** True if event can be processed */
  boolean goFlat=false;
  
  /** Data Table model */
  DataTableModelMemory model;    
  
  /** Disassembler frame */
  JDisassemblerFrame frame;
    
    /**
     * Creates new form JOptionDialog
     */
    public JOptionDialog(java.awt.Frame parent, boolean modal, DataTableModelMemory model,
                         JDisassemblerFrame frame) {
        super(parent, modal);
        initComponents();        
        this.model=model;
        this.frame=frame;

               
        for (Name val: Assembler.Name.values()) {
          jComboBoxAssembler.addItem(val.getName());
        }
        Shared.framesList.add(this);        
        
        chooserDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        platformeEnable();
    }
    
  /**
   * Enable some chooses based onto platforme specific implementation
   */
  private void platformeEnable() {
    String name;  
      
    UIManager.LookAndFeelInfo[] info=UIManager.getInstalledLookAndFeels();
    // scan all the look and feels 
    for (int i=0; i<info.length; i++) {
      name=info[i].getClassName();  
      if (name.equals(Option.LAF_MAC)) jRadioButtonLookMac.setEnabled(true);
      if (name.equals(Option.LAF_METAL)) jRadioButtonLookMetal.setEnabled(true);
      if (name.equals(Option.LAF_MOTIF)) jRadioButtonLookJava.setEnabled(true);
      if (name.equals(Option.LAF_WINDOWS)) jRadioButtonLookWin.setEnabled(true);
      if (name.equals(Option.LAF_CWINDOWS)) jRadioButtonLookCWin.setEnabled(true);
      if (name.equals(Option.LAF_GTK)) jRadioButtonLookGtk.setEnabled(true);
      if (name.equals(Option.LAF_NIMBUS)) jRadioButtonLookNimbus.setEnabled(true);
    }
    
    // scan all flat laf
    for (FlatLaf laf: Option.LAF_SYNTH_FLAT) {
      listModel.addElement(laf.getName());
    }
  }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    buttonGroupOpcodeFormatting = new javax.swing.ButtonGroup();
    buttonGroupIllegalOpcodeStyle = new javax.swing.ButtonGroup();
    buttonGroupLanguage = new javax.swing.ButtonGroup();
    buttonGroupCodeData = new javax.swing.ButtonGroup();
    buttonGroupLook = new javax.swing.ButtonGroup();
    buttonGroupTheme = new javax.swing.ButtonGroup();
    buttonGroupMemoryValue = new javax.swing.ButtonGroup();
    buttonGroupHeather = new javax.swing.ButtonGroup();
    buttonGroupDotsType = new javax.swing.ButtonGroup();
    jPanelOption = new javax.swing.JPanel();
    jTabbedPaneOption = new javax.swing.JTabbedPane();
    jScrollPanePreview = new javax.swing.JScrollPane();
    jPanelPreview = new javax.swing.JPanel();
    jLabelIllegalOpcodeStyle = new javax.swing.JLabel();
    jRadioButtonStyle1 = new javax.swing.JRadioButton();
    jRadioButtonStyle2 = new javax.swing.JRadioButton();
    jRadioButtonStyle3 = new javax.swing.JRadioButton();
    jLabelLanguage = new javax.swing.JLabel();
    jRadioButtonLangEnglish = new javax.swing.JRadioButton();
    jRadioButtonLangItalian = new javax.swing.JRadioButton();
    jCheckBoxEraseDComm = new javax.swing.JCheckBox();
    jCheckBoxOpcodeFormattingPreview = new javax.swing.JCheckBox();
    jCheckBoxUndefinedCode = new javax.swing.JCheckBox();
    jSpinnerMaxLength = new javax.swing.JSpinner();
    jLabelMaxLength = new javax.swing.JLabel();
    jLabelAggregate = new javax.swing.JLabel();
    jSpinnerMaxByteAggregate = new javax.swing.JSpinner();
    jLabelPSIDinitsong = new javax.swing.JLabel();
    jTextFieldInitSongs = new javax.swing.JTextField();
    jLabelPSIDplaysound = new javax.swing.JLabel();
    jTextFieldPlaySound = new javax.swing.JTextField();
    jLabelSIDfreqLo = new javax.swing.JLabel();
    jTextFieldSidFreqLo = new javax.swing.JTextField();
    jLabelSIDfreqHi = new javax.swing.JLabel();
    jTextFieldSidFreqHi = new javax.swing.JTextField();
    jCheckBoxOpcodeFormattingSource = new javax.swing.JCheckBox();
    jCheckBoxErasePlus = new javax.swing.JCheckBox();
    jLabelInstrSep = new javax.swing.JLabel();
    jSpinnerInstrSpaces = new javax.swing.JSpinner();
    jSpinnerInstrTabs = new javax.swing.JSpinner();
    jLabelInstrSpace = new javax.swing.JLabel();
    jLabelInstrTabs = new javax.swing.JLabel();
    jLabelDataSep = new javax.swing.JLabel();
    jLabelDataSpace = new javax.swing.JLabel();
    jSpinnerDataSpaces = new javax.swing.JSpinner();
    jLabelDataTabs = new javax.swing.JLabel();
    jSpinnerDataTabs = new javax.swing.JSpinner();
    jCheckBoxLabel = new javax.swing.JCheckBox();
    jLabelMaxByte = new javax.swing.JLabel();
    jLabelMaxWord = new javax.swing.JLabel();
    jSpinnerMaxWordAggregate = new javax.swing.JSpinner();
    jLabelMaxTribyte = new javax.swing.JLabel();
    jSpinnerMaxTribyteAggregate = new javax.swing.JSpinner();
    jLabelMaxLong = new javax.swing.JLabel();
    jSpinnerMaxLongAggregate = new javax.swing.JSpinner();
    jLabelTmpPath = new javax.swing.JLabel();
    jTextFieldTmpPath = new javax.swing.JTextField();
    jButtonBrowse = new javax.swing.JButton();
    jLabelMaxSwapped = new javax.swing.JLabel();
    jSpinnerMaxSwappedAggregate = new javax.swing.JSpinner();
    jLabelMaxText = new javax.swing.JLabel();
    jSpinnerMaxTextAggregate = new javax.swing.JSpinner();
    jLabelMaxAddress = new javax.swing.JLabel();
    jSpinnerMaxAddressAggregate = new javax.swing.JSpinner();
    jLabelMaxStackWord = new javax.swing.JLabel();
    jSpinnerMaxStackWordAggregate = new javax.swing.JSpinner();
    jCheckBoxUbEdit = new javax.swing.JCheckBox();
    jCheckBoxUcEdit = new javax.swing.JCheckBox();
    jCheckBoxUlEdit = new javax.swing.JCheckBox();
    jCheckBoxDcErase = new javax.swing.JCheckBox();
    jCheckBoxDlErase = new javax.swing.JCheckBox();
    jCheckBoxForceCompilation = new javax.swing.JCheckBox();
    jLabelLanguage1 = new javax.swing.JLabel();
    jRadioButtonMemoryValueHex = new javax.swing.JRadioButton();
    jRadioButtonMemoryValueChar = new javax.swing.JRadioButton();
    jLabelInstrCSep = new javax.swing.JLabel();
    jLabelInstrCSpace = new javax.swing.JLabel();
    jSpinnerInstrCSpaces = new javax.swing.JSpinner();
    jLabelInstrCTabs = new javax.swing.JLabel();
    jSpinnerInstrCTabs = new javax.swing.JSpinner();
    jLabelDataCSep = new javax.swing.JLabel();
    jLabelDataCSpace = new javax.swing.JLabel();
    jSpinnerDataCSpaces = new javax.swing.JSpinner();
    jLabelDataCTabs = new javax.swing.JLabel();
    jSpinnerDataCTabs = new javax.swing.JSpinner();
    jCheckBoxAllowUtf = new javax.swing.JCheckBox();
    jCheckBoxAllowSIDFreq = new javax.swing.JCheckBox();
    jCheckBoxMarkMemory = new javax.swing.JCheckBox();
    jCheckBoxSetLabels = new javax.swing.JCheckBox();
    jCheckBoxSetComment = new javax.swing.JCheckBox();
    jCheckBoxNotUsePSID = new javax.swing.JCheckBox();
    jCheckBoxCreatePSID = new javax.swing.JCheckBox();
    jScrollPaneHeather = new javax.swing.JScrollPane();
    jTextAreaHeather = new javax.swing.JTextArea();
    jRadioButtonCustom = new javax.swing.JRadioButton();
    jRadioButtonStandard = new javax.swing.JRadioButton();
    jRadioButtonNone = new javax.swing.JRadioButton();
    jLabelHeather = new javax.swing.JLabel();
    jCheckBoxRepositionate = new javax.swing.JCheckBox();
    jCheckBoxPedantic = new javax.swing.JCheckBox();
    jCheckBoxVlPatch = new javax.swing.JCheckBox();
    jLabelDataSepOp = new javax.swing.JLabel();
    jLabelDataSpaceOp = new javax.swing.JLabel();
    jSpinnerDataSpacesOp = new javax.swing.JSpinner();
    jLabelDataTabsOp = new javax.swing.JLabel();
    jSpinnerDataTabsOp = new javax.swing.JSpinner();
    jLabelFontSize = new javax.swing.JLabel();
    jLabelFontSizePreview = new javax.swing.JLabel();
    jSpinnerSizePreview = new javax.swing.JSpinner();
    jLabelFontSizeSource = new javax.swing.JLabel();
    jSpinnerSizeSource = new javax.swing.JSpinner();
    jSeparatorSourceHeder = new javax.swing.JSeparator();
    jSeparatorRadioButtons = new javax.swing.JSeparator();
    jSeparator1 = new javax.swing.JSeparator();
    jSeparator2 = new javax.swing.JSeparator();
    jCheckBoxCreateSAP = new javax.swing.JCheckBox();
    jCheckBoxNotUseSAP = new javax.swing.JCheckBox();
    jLabelDotsType = new javax.swing.JLabel();
    jRadioButtonDotsValueAscii = new javax.swing.JRadioButton();
    jRadioButtonDotsValueUtf = new javax.swing.JRadioButton();
    jCheckBoxNoUndocumented = new javax.swing.JCheckBox();
    jCheckBoxChooserIcon = new javax.swing.JCheckBox();
    jCheckBoxShowMiniature = new javax.swing.JCheckBox();
    jPanelComment = new javax.swing.JPanel();
    jLabelautocomment = new javax.swing.JLabel();
    jTabbedPaneComm = new javax.swing.JTabbedPane();
    jPanelC64Comm = new javax.swing.JPanel();
    jCheckBoxC64ZeroPage = new javax.swing.JCheckBox();
    jCheckBoxC64StackArea = new javax.swing.JCheckBox();
    jCheckBoxC64_200Area = new javax.swing.JCheckBox();
    jCheckBoxC64_300Area = new javax.swing.JCheckBox();
    jCheckBoxC64ScreenArea = new javax.swing.JCheckBox();
    jCheckBoxC64FreeArea = new javax.swing.JCheckBox();
    jCheckBoxC64BasicRom = new javax.swing.JCheckBox();
    jCheckBoxC64FreeRam = new javax.swing.JCheckBox();
    jCheckC64BoxVicII = new javax.swing.JCheckBox();
    jCheckC64BoxSid = new javax.swing.JCheckBox();
    jCheckBoxC64Color = new javax.swing.JCheckBox();
    jCheckBoxC64Cia1 = new javax.swing.JCheckBox();
    jCheckBoxC64Cia2 = new javax.swing.JCheckBox();
    jCheckBoxC64KernalRom = new javax.swing.JCheckBox();
    jPanelC1541Comm = new javax.swing.JPanel();
    jCheckBoxC1541ZeroPage = new javax.swing.JCheckBox();
    jCheckBoxC1541StackArea = new javax.swing.JCheckBox();
    jCheckBoxC1541_200Area = new javax.swing.JCheckBox();
    jCheckBoxC1541Via1 = new javax.swing.JCheckBox();
    jCheckBoxC1541Via2 = new javax.swing.JCheckBox();
    jCheckBoxC1541Kernal = new javax.swing.JCheckBox();
    jCheckBoxC1541Buffer0 = new javax.swing.JCheckBox();
    jCheckBoxC1541Buffer1 = new javax.swing.JCheckBox();
    jCheckBoxC1541Buffer2 = new javax.swing.JCheckBox();
    jCheckBoxC1541Buffer3 = new javax.swing.JCheckBox();
    jCheckBoxC1541Buffer4 = new javax.swing.JCheckBox();
    jPanelC128Comm = new javax.swing.JPanel();
    jCheckBoxC128ZeroPage = new javax.swing.JCheckBox();
    jCheckBoxC128StackArea = new javax.swing.JCheckBox();
    jCheckBoxC128_300Area = new javax.swing.JCheckBox();
    jCheckBoxC128_200Area = new javax.swing.JCheckBox();
    jCheckBoxC128ScreenArea = new javax.swing.JCheckBox();
    jCheckBoxC128UserBasic = new javax.swing.JCheckBox();
    jCheckBoxC128AppProgArea = new javax.swing.JCheckBox();
    jCheckBoxC128VideoColor = new javax.swing.JCheckBox();
    jCheckBoxC128ScreenMem = new javax.swing.JCheckBox();
    jCheckBoxC128Color = new javax.swing.JCheckBox();
    jCheckBoxC128BasicRom = new javax.swing.JCheckBox();
    jCheckBoxC128VicII = new javax.swing.JCheckBox();
    jCheckBoxC128Sid = new javax.swing.JCheckBox();
    jCheckBoxC128MMU = new javax.swing.JCheckBox();
    jCheckBoxC128VDC = new javax.swing.JCheckBox();
    jCheckBoxC128Cia1 = new javax.swing.JCheckBox();
    jCheckBoxC128Cia2 = new javax.swing.JCheckBox();
    jCheckBoxC128DMA = new javax.swing.JCheckBox();
    jCheckBoxC128KernalRom = new javax.swing.JCheckBox();
    jPanelVic20Comm = new javax.swing.JPanel();
    jCheckBoxVic20StackArea = new javax.swing.JCheckBox();
    jCheckBoxVic20ZeroPage = new javax.swing.JCheckBox();
    jCheckBoxVic20_200Area = new javax.swing.JCheckBox();
    jCheckBoxVic20_300Area = new javax.swing.JCheckBox();
    jCheckBoxVic20_400Area = new javax.swing.JCheckBox();
    jCheckBoxVic20Vic = new javax.swing.JCheckBox();
    jCheckBoxVic20Via1 = new javax.swing.JCheckBox();
    jCheckBoxVic20Via2 = new javax.swing.JCheckBox();
    jCheckBoxVic20UserBasic = new javax.swing.JCheckBox();
    jCheckBoxVic20Screen = new javax.swing.JCheckBox();
    jCheckBoxVic20_8kExp1 = new javax.swing.JCheckBox();
    jCheckBoxVic20_8kExp2 = new javax.swing.JCheckBox();
    jCheckBoxVic20_8kExp3 = new javax.swing.JCheckBox();
    jCheckBoxVic20Character = new javax.swing.JCheckBox();
    jCheckBoxVic20Color = new javax.swing.JCheckBox();
    jCheckBoxVic20Block2 = new javax.swing.JCheckBox();
    jCheckBoxVic20Block3 = new javax.swing.JCheckBox();
    jCheckBoxVic20Block4 = new javax.swing.JCheckBox();
    jCheckBoxVic20BasicRom = new javax.swing.JCheckBox();
    jCheckBoxVic20KernalRom = new javax.swing.JCheckBox();
    jPanelPlus4Comm = new javax.swing.JPanel();
    jCheckBoxPlus4ZeroPage = new javax.swing.JCheckBox();
    jCheckBoxPlus4StackArea = new javax.swing.JCheckBox();
    jCheckBoxPlus4_200Area = new javax.swing.JCheckBox();
    jCheckBoxPlus4_300Area = new javax.swing.JCheckBox();
    jCheckBoxPlus4_400Area = new javax.swing.JCheckBox();
    jCheckBoxPlus4_500Area = new javax.swing.JCheckBox();
    jCheckBoxPlus4_600Area = new javax.swing.JCheckBox();
    jCheckBoxPlus4_700Area = new javax.swing.JCheckBox();
    jCheckBoxPlus4ColorArea = new javax.swing.JCheckBox();
    jCheckBoxPlus4VideoArea = new javax.swing.JCheckBox();
    jCheckBoxPlus4BasicRamP = new javax.swing.JCheckBox();
    jCheckBoxPlus4Luminance = new javax.swing.JCheckBox();
    jCheckBoxPlus4ColorBitmap = new javax.swing.JCheckBox();
    jCheckBoxPlus4GraphicData = new javax.swing.JCheckBox();
    jCheckBoxPlus4BasicRamN = new javax.swing.JCheckBox();
    jCheckBoxPlus4BasicRom = new javax.swing.JCheckBox();
    jCheckBoxPlus4BasicExt = new javax.swing.JCheckBox();
    jCheckBoxPlus4Caracter = new javax.swing.JCheckBox();
    jCheckBoxPlus4Acia = new javax.swing.JCheckBox();
    jCheckBoxPlus4_6529B_1 = new javax.swing.JCheckBox();
    jCheckBoxPlus4_6529B_2 = new javax.swing.JCheckBox();
    jCheckBoxPlus4Ted = new javax.swing.JCheckBox();
    jCheckBoxPlus4Kernal = new javax.swing.JCheckBox();
    jPanelAtariComm = new javax.swing.JPanel();
    jCheckBoxAtariKernalRom = new javax.swing.JCheckBox();
    jCheckBoxAtariAntic = new javax.swing.JCheckBox();
    jCheckBoxAtariPia = new javax.swing.JCheckBox();
    jCheckBoxAtariPokey = new javax.swing.JCheckBox();
    jCheckBoxAtariGtia = new javax.swing.JCheckBox();
    jCheckBoxAtariCartridgeA = new javax.swing.JCheckBox();
    jCheckBoxAtariCartridgeB = new javax.swing.JCheckBox();
    jCheckBoxAtariZeroPage = new javax.swing.JCheckBox();
    jCheckBoxAtariStackArea = new javax.swing.JCheckBox();
    jCheckBoxAtari200Area = new javax.swing.JCheckBox();
    jCheckBoxAtari300Area = new javax.swing.JCheckBox();
    jCheckBoxAtari400Area = new javax.swing.JCheckBox();
    jCheckBoxAtari500Area = new javax.swing.JCheckBox();
    jPanelDisassembler = new javax.swing.JPanel();
    jLabelAutoComment = new javax.swing.JLabel();
    jComboBoxAssembler = new javax.swing.JComboBox<>();
    jTabbedPaneAssembler = new javax.swing.JTabbedPane();
    jScrollPaneDasm = new javax.swing.JScrollPane();
    jDasmPanel = new sw_emulator.swing.JDasmPanel();
    jScrollPaneTMPx = new javax.swing.JScrollPane();
    jTmpxPanel = new sw_emulator.swing.JTmpxPanel();
    jScrollPaneCa65 = new javax.swing.JScrollPane();
    jCa65Panel = new sw_emulator.swing.JCa65Panel();
    jScrollPaneAcme = new javax.swing.JScrollPane();
    jAcmePanel = new sw_emulator.swing.JAcmePanel();
    jScrollPaneKickAssembler = new javax.swing.JScrollPane();
    jKickPanel = new sw_emulator.swing.JKickPanel();
    jScrollPaneTass64 = new javax.swing.JScrollPane();
    jTass64Panel = new sw_emulator.swing.JTass64Panel();
    jScrollPaneGlass = new javax.swing.JScrollPane();
    jGlassPanel = new sw_emulator.swing.JGlassPanel();
    jPanelLook = new javax.swing.JPanel();
    jRadioButtonLookJava = new javax.swing.JRadioButton();
    jRadioButtonLookMac = new javax.swing.JRadioButton();
    jRadioButtonLookMetal = new javax.swing.JRadioButton();
    jRadioButtonLookWin = new javax.swing.JRadioButton();
    jRadioButtonLookGtk = new javax.swing.JRadioButton();
    jRadioButtonLookNimbus = new javax.swing.JRadioButton();
    jLabelLook = new javax.swing.JLabel();
    jLabelTheme = new javax.swing.JLabel();
    jRadioButtonOcean = new javax.swing.JRadioButton();
    jRadioButtonSteel = new javax.swing.JRadioButton();
    jRadioButtonAqua = new javax.swing.JRadioButton();
    jRadioButtonCharcoal = new javax.swing.JRadioButton();
    jRadioButtonHighContrast = new javax.swing.JRadioButton();
    jRadioButtonEmerald = new javax.swing.JRadioButton();
    jRadioButtonRuby = new javax.swing.JRadioButton();
    jRadioButtonLookCWin = new javax.swing.JRadioButton();
    jLabelBracket = new javax.swing.JLabel();
    jRadioButtonLookSynth = new javax.swing.JRadioButton();
    jLabelArrow = new javax.swing.JLabel();
    jScrollPaneList = new javax.swing.JScrollPane();
    jListLaf = new javax.swing.JList<>();
    jLabelFlatLaf = new javax.swing.JLabel();
    jPanelDn = new javax.swing.JPanel();
    jButtonLoad = new javax.swing.JButton();
    jButtonSave = new javax.swing.JButton();
    jButtonClose = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    setTitle("Options");
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        formWindowClosing(evt);
      }
    });

    jPanelOption.setLayout(new java.awt.BorderLayout());

    jTabbedPaneOption.setFocusable(false);
    jTabbedPaneOption.setName("Options"); // NOI18N
    jTabbedPaneOption.setPreferredSize(new java.awt.Dimension(831, 842));

    jScrollPanePreview.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    jScrollPanePreview.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

    jLabelIllegalOpcodeStyle.setText("Illegal opcode style:");

    buttonGroupIllegalOpcodeStyle.add(jRadioButtonStyle1);
    jRadioButtonStyle1.setSelected(true);
    jRadioButtonStyle1.setText("ANE, ISB, SHY, SHS");
    jRadioButtonStyle1.setToolTipText("Mode use by John west and Marko M\"akel\"a");
    jRadioButtonStyle1.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonStyle1ItemStateChanged(evt);
      }
    });

    buttonGroupIllegalOpcodeStyle.add(jRadioButtonStyle2);
    jRadioButtonStyle2.setText("AXA, ISC, SYH, SSH");
    jRadioButtonStyle2.setToolTipText("Mode use by Juergen Buchmueller");
    jRadioButtonStyle2.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonStyle2ItemStateChanged(evt);
      }
    });

    buttonGroupIllegalOpcodeStyle.add(jRadioButtonStyle3);
    jRadioButtonStyle3.setText("XAA, INS, SAY, TAS");
    jRadioButtonStyle3.setToolTipText("Mode use by Adam Vardy");
    jRadioButtonStyle3.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonStyle3ItemStateChanged(evt);
      }
    });

    jLabelLanguage.setText("Language of comments:");

    buttonGroupLanguage.add(jRadioButtonLangEnglish);
    jRadioButtonLangEnglish.setSelected(true);
    jRadioButtonLangEnglish.setText("English");
    jRadioButtonLangEnglish.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonLangEnglishItemStateChanged(evt);
      }
    });

    buttonGroupLanguage.add(jRadioButtonLangItalian);
    jRadioButtonLangItalian.setText("Italian");
    jRadioButtonLangItalian.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonLangItalianItemStateChanged(evt);
      }
    });

    jCheckBoxEraseDComm.setSelected(true);
    jCheckBoxEraseDComm.setText("Erase DASM automatic comment when mark a memory location as Data");
    jCheckBoxEraseDComm.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxEraseDCommItemStateChanged(evt);
      }
    });

    jCheckBoxOpcodeFormattingPreview.setSelected(true);
    jCheckBoxOpcodeFormattingPreview.setText("Opcode formatting as Upper case (NOP, JMP, ...) instead of Lower case (nop, jmp, ...) for preview");
    jCheckBoxOpcodeFormattingPreview.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxOpcodeFormattingPreviewItemStateChanged(evt);
      }
    });

    jCheckBoxUndefinedCode.setSelected(true);
    jCheckBoxUndefinedCode.setText("Undefined code/data used as code instead of data");
    jCheckBoxUndefinedCode.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxUndefinedCodeItemStateChanged(evt);
      }
    });

    jSpinnerMaxLength.setModel(new javax.swing.SpinnerNumberModel(25, 5, 40, 1));
    jSpinnerMaxLength.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerMaxLengthStateChanged(evt);
      }
    });

    jLabelMaxLength.setText("Max lenght of label (some assembler has a limit):");

    jLabelAggregate.setText("Aggregate up to X values on a data row of type:");

    jSpinnerMaxByteAggregate.setModel(new javax.swing.SpinnerNumberModel(8, 2, 8, 1));
    jSpinnerMaxByteAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerMaxByteAggregateStateChanged(evt);
      }
    });

    jLabelPSIDinitsong.setText("PSID/SAP init songs label:");

    jTextFieldInitSongs.setText("initSongs");
    jTextFieldInitSongs.setToolTipText("Label to use for the PSID starting init routine");
    jTextFieldInitSongs.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        jTextFieldInitSongsFocusLost(evt);
      }
    });

    jLabelPSIDplaysound.setText("PSID/SAP play sound label:");

    jTextFieldPlaySound.setText("playSound");
    jTextFieldPlaySound.setToolTipText("Label to use for PSID play sound routine");
    jTextFieldPlaySound.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        jTextFieldPlaySoundFocusLost(evt);
      }
    });

    jLabelSIDfreqLo.setText("SID frequency table low label:");

    jTextFieldSidFreqLo.setText("frequencyLo");
    jTextFieldSidFreqLo.setToolTipText("Label to use for low address of frequency table");
    jTextFieldSidFreqLo.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        jTextFieldSidFreqLoFocusLost(evt);
      }
    });

    jLabelSIDfreqHi.setText("SID frequency table high label:");

    jTextFieldSidFreqHi.setText("frequencyHi");
    jTextFieldSidFreqHi.setToolTipText("Label to use for high address of frequenct table");
    jTextFieldSidFreqHi.addFocusListener(new java.awt.event.FocusAdapter() {
      public void focusLost(java.awt.event.FocusEvent evt) {
        jTextFieldSidFreqHiFocusLost(evt);
      }
    });

    jCheckBoxOpcodeFormattingSource.setText("Opcode formatting as Upper case (NOP, JMP, ...) instead of Lower case (nop, jmp, ...) for source");
    jCheckBoxOpcodeFormattingSource.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxOpcodeFormattingSourceItemStateChanged(evt);
      }
    });

    jCheckBoxErasePlus.setSelected(true);
    jCheckBoxErasePlus.setText("Erase relative + address when mark a memory location as Data");
    jCheckBoxErasePlus.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxErasePlusItemStateChanged(evt);
      }
    });

    jLabelInstrSep.setText("Instruction separator in start of row of source:");

    jSpinnerInstrSpaces.setModel(new javax.swing.SpinnerNumberModel(6, 0, 20, 1));
    jSpinnerInstrSpaces.setToolTipText("At least 1 space or 1 tabs is necessary");
    jSpinnerInstrSpaces.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerInstrSpacesStateChanged(evt);
      }
    });

    jSpinnerInstrTabs.setModel(new javax.swing.SpinnerNumberModel(0, 0, 8, 1));
    jSpinnerInstrTabs.setToolTipText("At least 1 space or 1 tabs is necessary");
    jSpinnerInstrTabs.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerInstrTabsStateChanged(evt);
      }
    });

    jLabelInstrSpace.setText("Spaces:");

    jLabelInstrTabs.setText("Tabs:");

    jLabelDataSep.setText("Data separator in start of row of source:");

    jLabelDataSpace.setText("Spaces:");

    jSpinnerDataSpaces.setModel(new javax.swing.SpinnerNumberModel(2, 0, 20, 1));
    jSpinnerDataSpaces.setToolTipText("At least 1 space or 1 tabs is necessary");
    jSpinnerDataSpaces.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerDataSpacesStateChanged(evt);
      }
    });

    jLabelDataTabs.setText("Tabs:");

    jSpinnerDataTabs.setModel(new javax.swing.SpinnerNumberModel(0, 0, 8, 1));
    jSpinnerDataTabs.setToolTipText("At least 1 space or 1 tabs is necessary");
    jSpinnerDataTabs.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerDataTabsStateChanged(evt);
      }
    });

    jCheckBoxLabel.setText("Label is on a separated line from instruction");
    jCheckBoxLabel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxLabelActionPerformed(evt);
      }
    });

    jLabelMaxByte.setText("Byte:");

    jLabelMaxWord.setText("Word:");

    jSpinnerMaxWordAggregate.setModel(new javax.swing.SpinnerNumberModel(4, 2, 8, 1));
    jSpinnerMaxWordAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerMaxWordAggregateStateChanged(evt);
      }
    });

    jLabelMaxTribyte.setText("Tribyte:");

    jSpinnerMaxTribyteAggregate.setModel(new javax.swing.SpinnerNumberModel(3, 2, 8, 1));
    jSpinnerMaxTribyteAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerMaxTribyteAggregateStateChanged(evt);
      }
    });

    jLabelMaxLong.setText("Long:");

    jSpinnerMaxLongAggregate.setModel(new javax.swing.SpinnerNumberModel(4, 2, 8, 1));
    jSpinnerMaxLongAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerMaxLongAggregateStateChanged(evt);
      }
    });

    jLabelTmpPath.setText("Temp. Path for assembler compilation:");

    jTextFieldTmpPath.setEditable(false);

    jButtonBrowse.setText("Browse");
    jButtonBrowse.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonBrowseActionPerformed(evt);
      }
    });

    jLabelMaxSwapped.setText("Swapped:");

    jSpinnerMaxSwappedAggregate.setModel(new javax.swing.SpinnerNumberModel(4, 2, 8, 1));
    jSpinnerMaxSwappedAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerMaxSwappedAggregateStateChanged(evt);
      }
    });

    jLabelMaxText.setText("Text:");

    jSpinnerMaxTextAggregate.setModel(new javax.swing.SpinnerNumberModel(32, 2, 40, 1));
    jSpinnerMaxTextAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerMaxTextAggregateStateChanged(evt);
      }
    });

    jLabelMaxAddress.setText("Address:");

    jSpinnerMaxAddressAggregate.setModel(new javax.swing.SpinnerNumberModel(4, 2, 8, 1));
    jSpinnerMaxAddressAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerMaxAddressAggregateStateChanged(evt);
      }
    });

    jLabelMaxStackWord.setText("Stack word:");

    jSpinnerMaxStackWordAggregate.setModel(new javax.swing.SpinnerNumberModel(4, 2, 8, 1));
    jSpinnerMaxStackWordAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerMaxStackWordAggregateStateChanged(evt);
      }
    });

    jCheckBoxUbEdit.setText("A click on UB column edit the global comment");
    jCheckBoxUbEdit.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxUbEditItemStateChanged(evt);
      }
    });

    jCheckBoxUcEdit.setText("A click on UC column edit the user comment");
    jCheckBoxUcEdit.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxUcEditItemStateChanged(evt);
      }
    });

    jCheckBoxUlEdit.setText("A click on UL column edit the user label");
    jCheckBoxUlEdit.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxUlEditItemStateChanged(evt);
      }
    });

    jCheckBoxDcErase.setText("A click on DC column erase the automatic comment");
    jCheckBoxDcErase.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxDcEraseItemStateChanged(evt);
      }
    });

    jCheckBoxDlErase.setText("A click on DL column erase the automatic label");
    jCheckBoxDlErase.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxDlEraseItemStateChanged(evt);
      }
    });

    jCheckBoxForceCompilation.setText("Force compilation at every modification");
    jCheckBoxForceCompilation.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxForceCompilationActionPerformed(evt);
      }
    });

    jLabelLanguage1.setText("Memory value in left panel:");

    buttonGroupMemoryValue.add(jRadioButtonMemoryValueHex);
    jRadioButtonMemoryValueHex.setSelected(true);
    jRadioButtonMemoryValueHex.setText("Hex");
    jRadioButtonMemoryValueHex.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonMemoryValueHexItemStateChanged(evt);
      }
    });

    buttonGroupMemoryValue.add(jRadioButtonMemoryValueChar);
    jRadioButtonMemoryValueChar.setText("Char");
    jRadioButtonMemoryValueChar.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonMemoryValueCharItemStateChanged(evt);
      }
    });

    jLabelInstrCSep.setText("Comment separator inside instruction in source:");

    jLabelInstrCSpace.setText("Spaces:");

    jSpinnerInstrCSpaces.setModel(new javax.swing.SpinnerNumberModel(34, 1, 50, 1));
    jSpinnerInstrCSpaces.setToolTipText("");
    jSpinnerInstrCSpaces.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerInstrCSpacesStateChanged(evt);
      }
    });

    jLabelInstrCTabs.setText("Tabs:");

    jSpinnerInstrCTabs.setModel(new javax.swing.SpinnerNumberModel(0, 0, 8, 1));
    jSpinnerInstrCTabs.setToolTipText("");
    jSpinnerInstrCTabs.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerInstrCTabsStateChanged(evt);
      }
    });

    jLabelDataCSep.setText("Comment separator inside data in source:");

    jLabelDataCSpace.setText("Spaces:");

    jSpinnerDataCSpaces.setModel(new javax.swing.SpinnerNumberModel(34, 1, 70, 1));
    jSpinnerDataCSpaces.setToolTipText("");
    jSpinnerDataCSpaces.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerDataCSpacesStateChanged(evt);
      }
    });

    jLabelDataCTabs.setText("Tabs:");

    jSpinnerDataCTabs.setModel(new javax.swing.SpinnerNumberModel(0, 0, 8, 1));
    jSpinnerDataCTabs.setToolTipText("");
    jSpinnerDataCTabs.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerDataCTabsStateChanged(evt);
      }
    });

    jCheckBoxAllowUtf.setText("Allow UTF character in text/char definitions");
    jCheckBoxAllowUtf.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxAllowUtfActionPerformed(evt);
      }
    });

    jCheckBoxAllowSIDFreq.setSelected(true);
    jCheckBoxAllowSIDFreq.setText("Use SID frequency catcher:");
    jCheckBoxAllowSIDFreq.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxAllowSIDFreqActionPerformed(evt);
      }
    });

    jCheckBoxMarkMemory.setSelected(true);
    jCheckBoxMarkMemory.setText("Mark memory");
    jCheckBoxMarkMemory.setToolTipText("Mark the memory as data if they are of a frequency table");
    jCheckBoxMarkMemory.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxMarkMemoryActionPerformed(evt);
      }
    });

    jCheckBoxSetLabels.setSelected(true);
    jCheckBoxSetLabels.setText("Set labels");
    jCheckBoxSetLabels.setToolTipText("Set the labels for the memory area catched");
    jCheckBoxSetLabels.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxSetLabelsActionPerformed(evt);
      }
    });

    jCheckBoxSetComment.setSelected(true);
    jCheckBoxSetComment.setText("Set comments");
    jCheckBoxSetComment.setToolTipText("Set comments about A4 frequency");
    jCheckBoxSetComment.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxSetCommentActionPerformed(evt);
      }
    });

    jCheckBoxNotUsePSID.setText("Did not create PSID labels");
    jCheckBoxNotUsePSID.setToolTipText("Not create the PSID init e play labels");
    jCheckBoxNotUsePSID.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxNotUsePSIDActionPerformed(evt);
      }
    });

    jCheckBoxCreatePSID.setSelected(true);
    jCheckBoxCreatePSID.setText("Create PSID header:");
    jCheckBoxCreatePSID.setToolTipText("For PSID it creates header. Removing this will break binary recreation from source");
    jCheckBoxCreatePSID.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxCreatePSIDActionPerformed(evt);
      }
    });

    jTextAreaHeather.setColumns(20);
    jTextAreaHeather.setRows(5);
    jScrollPaneHeather.setViewportView(jTextAreaHeather);

    buttonGroupHeather.add(jRadioButtonCustom);
    jRadioButtonCustom.setText("Custom (below):");
    jRadioButtonCustom.setToolTipText("Insert the custom text");
    jRadioButtonCustom.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonCustomItemStateChanged(evt);
      }
    });

    buttonGroupHeather.add(jRadioButtonStandard);
    jRadioButtonStandard.setSelected(true);
    jRadioButtonStandard.setText("Standard");
    jRadioButtonStandard.setToolTipText("Use standard heather with program and version");
    jRadioButtonStandard.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonStandardItemStateChanged(evt);
      }
    });

    buttonGroupHeather.add(jRadioButtonNone);
    jRadioButtonNone.setText("None");
    jRadioButtonNone.setToolTipText("Don't use any heather");
    jRadioButtonNone.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonNoneItemStateChanged(evt);
      }
    });

    jLabelHeather.setText("Source header:");
    jLabelHeather.setToolTipText("");

    jCheckBoxRepositionate.setText("Repositionate memory from preview after compilation");
    jCheckBoxRepositionate.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxRepositionateActionPerformed(evt);
      }
    });

    jCheckBoxPedantic.setText("Allow OK result messages for load/save/apply");
    jCheckBoxPedantic.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxPedanticActionPerformed(evt);
      }
    });

    jCheckBoxVlPatch.setText("A click on VL column allow to patch value directly");
    jCheckBoxVlPatch.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVlPatchItemStateChanged(evt);
      }
    });

    jLabelDataSepOp.setText("Separator from opcode and operand in source:");

    jLabelDataSpaceOp.setText("Spaces:");

    jSpinnerDataSpacesOp.setModel(new javax.swing.SpinnerNumberModel(2, 0, 15, 1));
    jSpinnerDataSpacesOp.setToolTipText("");
    jSpinnerDataSpacesOp.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerDataSpacesOpStateChanged(evt);
      }
    });

    jLabelDataTabsOp.setText("Tabs:");

    jSpinnerDataTabsOp.setModel(new javax.swing.SpinnerNumberModel(0, 0, 8, 1));
    jSpinnerDataTabsOp.setToolTipText("");
    jSpinnerDataTabsOp.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerDataTabsOpStateChanged(evt);
      }
    });

    jLabelFontSize.setText("Font size for editor:");

    jLabelFontSizePreview.setText("Preview:");

    jSpinnerSizePreview.setModel(new javax.swing.SpinnerNumberModel(12, 6, 78, 1));
    jSpinnerSizePreview.setToolTipText("");
    jSpinnerSizePreview.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerSizePreviewStateChanged(evt);
      }
    });

    jLabelFontSizeSource.setText("Source:");

    jSpinnerSizeSource.setModel(new javax.swing.SpinnerNumberModel(12, 6, 78, 1));
    jSpinnerSizeSource.setToolTipText("");
    jSpinnerSizeSource.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        jSpinnerSizeSourceStateChanged(evt);
      }
    });

    jSeparatorSourceHeder.setOrientation(javax.swing.SwingConstants.VERTICAL);

    jCheckBoxCreateSAP.setSelected(true);
    jCheckBoxCreateSAP.setText("Create SAP header:");
    jCheckBoxCreateSAP.setToolTipText("For Atari SAP it creates header. Removing this will break binary recreation from source");
    jCheckBoxCreateSAP.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxCreateSAPActionPerformed(evt);
      }
    });

    jCheckBoxNotUseSAP.setText("Did not create SAP labels");
    jCheckBoxNotUseSAP.setToolTipText("Not create the SAP init e play labels");
    jCheckBoxNotUseSAP.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxNotUseSAPActionPerformed(evt);
      }
    });

    jLabelDotsType.setText("Type of dots (sprite/char) in comment:");

    buttonGroupDotsType.add(jRadioButtonDotsValueAscii);
    jRadioButtonDotsValueAscii.setText("ASCII");
    jRadioButtonDotsValueAscii.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonDotsValueAsciiItemStateChanged(evt);
      }
    });

    buttonGroupDotsType.add(jRadioButtonDotsValueUtf);
    jRadioButtonDotsValueUtf.setSelected(true);
    jRadioButtonDotsValueUtf.setText("UTF16");
    jRadioButtonDotsValueUtf.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonDotsValueUtfItemStateChanged(evt);
      }
    });

    jCheckBoxNoUndocumented.setText("Code with undocument opcodes are forced to be of data type");
    jCheckBoxNoUndocumented.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxNoUndocumentedActionPerformed(evt);
      }
    });

    jCheckBoxChooserIcon.setText("Project file chooser shows colored icons based onto % of disassembly");
    jCheckBoxChooserIcon.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxChooserIconActionPerformed(evt);
      }
    });

    jCheckBoxShowMiniature.setText("Show miniature scrollbars");
    jCheckBoxShowMiniature.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jCheckBoxShowMiniatureActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanelPreviewLayout = new javax.swing.GroupLayout(jPanelPreview);
    jPanelPreview.setLayout(jPanelPreviewLayout);
    jPanelPreviewLayout.setHorizontalGroup(
      jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelPreviewLayout.createSequentialGroup()
        .addGap(6, 6, 6)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanelPreviewLayout.createSequentialGroup()
            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jCheckBoxShowMiniature, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jCheckBoxChooserIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jSeparatorSourceHeder, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addGroup(jPanelPreviewLayout.createSequentialGroup()
                .addComponent(jRadioButtonStandard)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButtonNone)
                .addGap(68, 68, 68))
              .addComponent(jLabelHeather, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jRadioButtonCustom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jScrollPaneHeather))
            .addGap(39, 39, 39))
          .addGroup(jPanelPreviewLayout.createSequentialGroup()
            .addComponent(jCheckBoxRepositionate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap(381, Short.MAX_VALUE))
          .addGroup(jPanelPreviewLayout.createSequentialGroup()
            .addComponent(jCheckBoxPedantic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap(409, Short.MAX_VALUE))
          .addGroup(jPanelPreviewLayout.createSequentialGroup()
            .addComponent(jCheckBoxNoUndocumented, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
            .addContainerGap(322, Short.MAX_VALUE))
          .addGroup(jPanelPreviewLayout.createSequentialGroup()
            .addComponent(jLabelAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabelMaxByte, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jLabelMaxTribyte, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(jLabelMaxAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelMaxSwapped, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(10, 10, 10)
            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jSpinnerMaxSwappedAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jSpinnerMaxTribyteAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jSpinnerMaxByteAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jSpinnerMaxAddressAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(24, 24, 24)
            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(jLabelMaxText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jLabelMaxLong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jLabelMaxWord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jLabelMaxStackWord, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(jSpinnerMaxWordAggregate)
              .addComponent(jSpinnerMaxLongAggregate)
              .addComponent(jSpinnerMaxStackWordAggregate)
              .addComponent(jSpinnerMaxTextAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(0, 0, Short.MAX_VALUE))
          .addComponent(jSeparatorRadioButtons)
          .addComponent(jSeparator1)
          .addComponent(jSeparator2)
          .addGroup(jPanelPreviewLayout.createSequentialGroup()
            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabelIllegalOpcodeStyle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jLabelLanguage, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
              .addComponent(jLabelLanguage1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jLabelDotsType, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(jRadioButtonLangEnglish, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButtonMemoryValueHex, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addComponent(jRadioButtonStyle1)
              .addComponent(jRadioButtonDotsValueAscii, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanelPreviewLayout.createSequentialGroup()
                .addComponent(jRadioButtonStyle2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButtonStyle3))
              .addComponent(jRadioButtonLangItalian)
              .addComponent(jRadioButtonMemoryValueChar)
              .addComponent(jRadioButtonDotsValueUtf))
            .addGap(34, 34, 34))
          .addGroup(jPanelPreviewLayout.createSequentialGroup()
            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanelPreviewLayout.createSequentialGroup()
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jCheckBoxAllowSIDFreq, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jCheckBoxCreateSAP, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jCheckBoxCreatePSID, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(jPanelPreviewLayout.createSequentialGroup()
                    .addGap(120, 120, 120)
                    .addComponent(jCheckBoxNotUsePSID, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGroup(jPanelPreviewLayout.createSequentialGroup()
                    .addGap(340, 340, 340)
                    .addComponent(jCheckBoxSetComment))
                  .addGroup(jPanelPreviewLayout.createSequentialGroup()
                    .addGap(120, 120, 120)
                    .addComponent(jCheckBoxMarkMemory)
                    .addGap(18, 18, 18)
                    .addComponent(jCheckBoxSetLabels))
                  .addGroup(jPanelPreviewLayout.createSequentialGroup()
                    .addGap(120, 120, 120)
                    .addComponent(jCheckBoxNotUseSAP, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))))
              .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jCheckBoxOpcodeFormattingPreview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBoxOpcodeFormattingSource, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBoxEraseDComm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
              .addGroup(jPanelPreviewLayout.createSequentialGroup()
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jLabelDataSepOp, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGroup(jPanelPreviewLayout.createSequentialGroup()
                    .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                      .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabelDataCSep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelInstrCSep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelDataSep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelInstrSep, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
                      .addComponent(jLabelFontSize))
                    .addGap(24, 24, 24)
                    .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                      .addComponent(jLabelFontSizePreview, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addComponent(jLabelDataSpaceOp, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addComponent(jLabelDataCSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addComponent(jLabelInstrCSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addComponent(jLabelDataSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addComponent(jLabelInstrSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jSpinnerInstrCSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jSpinnerDataSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jSpinnerInstrSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jSpinnerDataCSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jSpinnerDataSpacesOp, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jSpinnerSizePreview, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                  .addComponent(jLabelFontSizeSource, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(jLabelDataTabsOp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(jLabelDataCTabs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(jLabelInstrCTabs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(jLabelDataTabs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(jLabelInstrTabs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jSpinnerSizeSource, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jSpinnerInstrCTabs)
                  .addComponent(jSpinnerDataTabs)
                  .addComponent(jSpinnerInstrTabs)
                  .addComponent(jSpinnerDataCTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jSpinnerDataTabsOp, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
              .addGroup(jPanelPreviewLayout.createSequentialGroup()
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelSIDfreqHi, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                    .addComponent(jLabelSIDfreqLo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelPSIDplaysound, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addComponent(jLabelPSIDinitsong, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jTextFieldSidFreqHi, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jTextFieldSidFreqLo, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jTextFieldPlaySound, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jTextFieldInitSongs, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jSpinnerMaxLength, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
              .addGroup(jPanelPreviewLayout.createSequentialGroup()
                .addComponent(jLabelTmpPath)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldTmpPath, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonBrowse))
              .addComponent(jLabelMaxLength, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jCheckBoxErasePlus, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
          .addGroup(jPanelPreviewLayout.createSequentialGroup()
            .addComponent(jCheckBoxUbEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap(422, Short.MAX_VALUE))
          .addGroup(jPanelPreviewLayout.createSequentialGroup()
            .addComponent(jCheckBoxUlEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap(442, Short.MAX_VALUE))
          .addGroup(jPanelPreviewLayout.createSequentialGroup()
            .addComponent(jCheckBoxDcErase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap(405, Short.MAX_VALUE))
          .addGroup(jPanelPreviewLayout.createSequentialGroup()
            .addComponent(jCheckBoxDlErase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap(420, Short.MAX_VALUE))
          .addGroup(jPanelPreviewLayout.createSequentialGroup()
            .addComponent(jCheckBoxVlPatch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap(414, Short.MAX_VALUE))
          .addGroup(jPanelPreviewLayout.createSequentialGroup()
            .addComponent(jCheckBoxLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap(427, Short.MAX_VALUE))
          .addGroup(jPanelPreviewLayout.createSequentialGroup()
            .addComponent(jCheckBoxForceCompilation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap(440, Short.MAX_VALUE))
          .addGroup(jPanelPreviewLayout.createSequentialGroup()
            .addComponent(jCheckBoxAllowUtf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap(429, Short.MAX_VALUE))
          .addGroup(jPanelPreviewLayout.createSequentialGroup()
            .addComponent(jCheckBoxUcEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap(427, Short.MAX_VALUE))
          .addGroup(jPanelPreviewLayout.createSequentialGroup()
            .addComponent(jCheckBoxUndefinedCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap(408, Short.MAX_VALUE))))
    );

    jPanelPreviewLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jSpinnerDataCTabs, jSpinnerDataTabs, jSpinnerDataTabsOp, jSpinnerInstrCTabs, jSpinnerInstrTabs, jSpinnerSizeSource});

    jPanelPreviewLayout.setVerticalGroup(
      jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelPreviewLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
          .addComponent(jLabelIllegalOpcodeStyle)
          .addComponent(jRadioButtonStyle1)
          .addComponent(jRadioButtonStyle2)
          .addComponent(jRadioButtonStyle3))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
          .addComponent(jLabelLanguage)
          .addComponent(jRadioButtonLangEnglish)
          .addComponent(jRadioButtonLangItalian))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
          .addComponent(jLabelLanguage1)
          .addComponent(jRadioButtonMemoryValueHex)
          .addComponent(jRadioButtonMemoryValueChar))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelDotsType)
          .addComponent(jRadioButtonDotsValueAscii)
          .addComponent(jRadioButtonDotsValueUtf))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jSeparatorRadioButtons, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxOpcodeFormattingPreview)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxOpcodeFormattingSource)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxEraseDComm)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxErasePlus)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addGroup(jPanelPreviewLayout.createSequentialGroup()
            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jCheckBoxUndefinedCode)
              .addComponent(jLabelHeather))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jRadioButtonNone, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jCheckBoxUcEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jRadioButtonStandard)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(jCheckBoxUbEdit)
              .addComponent(jRadioButtonCustom))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addGroup(jPanelPreviewLayout.createSequentialGroup()
                .addComponent(jCheckBoxUlEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxDcErase)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxDlErase)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVlPatch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxForceCompilation))
              .addComponent(jScrollPaneHeather)))
          .addComponent(jSeparatorSourceHeder))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxAllowUtf)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxRepositionate)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPedantic)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxNoUndocumented)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxChooserIcon)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxShowMiniature)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jCheckBoxNotUsePSID)
          .addComponent(jCheckBoxCreatePSID))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jCheckBoxNotUseSAP)
          .addComponent(jCheckBoxCreateSAP))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
          .addComponent(jCheckBoxAllowSIDFreq)
          .addComponent(jCheckBoxMarkMemory)
          .addComponent(jCheckBoxSetLabels)
          .addComponent(jCheckBoxSetComment))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabelAggregate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelPreviewLayout.createSequentialGroup()
            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
              .addComponent(jLabelMaxByte)
              .addComponent(jSpinnerMaxByteAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jLabelMaxWord)
              .addComponent(jSpinnerMaxWordAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
              .addComponent(jLabelMaxTribyte)
              .addComponent(jSpinnerMaxTribyteAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jLabelMaxLong)
              .addComponent(jSpinnerMaxLongAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
              .addComponent(jLabelMaxSwapped)
              .addComponent(jSpinnerMaxSwappedAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jLabelMaxText)
              .addComponent(jSpinnerMaxTextAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
              .addComponent(jLabelMaxAddress)
              .addComponent(jSpinnerMaxAddressAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jLabelMaxStackWord)
              .addComponent(jSpinnerMaxStackWordAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        .addGap(5, 5, 5)
        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jSpinnerMaxLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabelMaxLength))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelPSIDinitsong)
          .addComponent(jTextFieldInitSongs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelPSIDplaysound)
          .addComponent(jTextFieldPlaySound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelSIDfreqLo)
          .addComponent(jTextFieldSidFreqLo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelSIDfreqHi)
          .addComponent(jTextFieldSidFreqHi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
          .addComponent(jLabelInstrSep)
          .addComponent(jLabelInstrSpace)
          .addComponent(jSpinnerInstrSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabelInstrTabs)
          .addComponent(jSpinnerInstrTabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
          .addComponent(jLabelDataSep)
          .addComponent(jLabelDataSpace)
          .addComponent(jSpinnerDataSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabelDataTabs)
          .addComponent(jSpinnerDataTabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
          .addComponent(jLabelInstrCSep)
          .addComponent(jLabelInstrCSpace)
          .addComponent(jSpinnerInstrCSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabelInstrCTabs)
          .addComponent(jSpinnerInstrCTabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
          .addComponent(jLabelDataCSep)
          .addComponent(jLabelDataCSpace)
          .addComponent(jSpinnerDataCSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabelDataCTabs)
          .addComponent(jSpinnerDataCTabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
          .addComponent(jLabelDataSepOp)
          .addComponent(jLabelDataSpaceOp)
          .addComponent(jSpinnerDataSpacesOp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabelDataTabsOp)
          .addComponent(jSpinnerDataTabsOp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
          .addComponent(jLabelFontSize)
          .addComponent(jLabelFontSizePreview)
          .addComponent(jSpinnerSizePreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabelFontSizeSource)
          .addComponent(jSpinnerSizeSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelTmpPath)
          .addComponent(jTextFieldTmpPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jButtonBrowse))
        .addGap(14, 14, 14))
    );

    jScrollPanePreview.setViewportView(jPanelPreview);

    jTabbedPaneOption.addTab("Option", jScrollPanePreview);

    jLabelautocomment.setText("Automatic add comments to those known locations:");

    jCheckBoxC64ZeroPage.setSelected(true);
    jCheckBoxC64ZeroPage.setText("Zero page area ($00..$FF)");
    jCheckBoxC64ZeroPage.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC64ZeroPageItemStateChanged(evt);
      }
    });

    jCheckBoxC64StackArea.setSelected(true);
    jCheckBoxC64StackArea.setText("Stack area ($100..$1FF)");
    jCheckBoxC64StackArea.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC64StackAreaItemStateChanged(evt);
      }
    });

    jCheckBoxC64_200Area.setSelected(true);
    jCheckBoxC64_200Area.setText("Support area for BASIC/KERNAL part 1 ($200..$2FF)");
    jCheckBoxC64_200Area.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC64_200AreaItemStateChanged(evt);
      }
    });

    jCheckBoxC64_300Area.setSelected(true);
    jCheckBoxC64_300Area.setText("Support area for BASIC/KERNAL part 2 ($300..$3FF)");
    jCheckBoxC64_300Area.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC64_300AreaItemStateChanged(evt);
      }
    });

    jCheckBoxC64ScreenArea.setSelected(true);
    jCheckBoxC64ScreenArea.setText("Screen area ($400..$7FF)");
    jCheckBoxC64ScreenArea.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC64ScreenAreaItemStateChanged(evt);
      }
    });

    jCheckBoxC64FreeArea.setText("BASIC (free) area ($800..$9FFF)");
    jCheckBoxC64FreeArea.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC64FreeAreaItemStateChanged(evt);
      }
    });

    jCheckBoxC64BasicRom.setSelected(true);
    jCheckBoxC64BasicRom.setText("BASIC ROM ($A000..$BFFF)");
    jCheckBoxC64BasicRom.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC64BasicRomItemStateChanged(evt);
      }
    });

    jCheckBoxC64FreeRam.setSelected(true);
    jCheckBoxC64FreeRam.setText("Free Ram ($C000..$CFFF)");
    jCheckBoxC64FreeRam.setEnabled(false);
    jCheckBoxC64FreeRam.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC64FreeRamItemStateChanged(evt);
      }
    });

    jCheckC64BoxVicII.setSelected(true);
    jCheckC64BoxVicII.setText("VIC II chip ($D000..$D3FF)");
    jCheckC64BoxVicII.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckC64BoxVicIIItemStateChanged(evt);
      }
    });

    jCheckC64BoxSid.setSelected(true);
    jCheckC64BoxSid.setText("SID chip ($D400..$D7FF)");
    jCheckC64BoxSid.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckC64BoxSidItemStateChanged(evt);
      }
    });

    jCheckBoxC64Color.setSelected(true);
    jCheckBoxC64Color.setText("Color RAM ($D800..$DBFF)");
    jCheckBoxC64Color.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC64ColorItemStateChanged(evt);
      }
    });

    jCheckBoxC64Cia1.setSelected(true);
    jCheckBoxC64Cia1.setText("CIA 1 ($DC00..$DCFF)");
    jCheckBoxC64Cia1.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC64Cia1ItemStateChanged(evt);
      }
    });

    jCheckBoxC64Cia2.setSelected(true);
    jCheckBoxC64Cia2.setText("CIA 2 ($DD00..$DDFF)");
    jCheckBoxC64Cia2.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC64Cia2ItemStateChanged(evt);
      }
    });

    jCheckBoxC64KernalRom.setSelected(true);
    jCheckBoxC64KernalRom.setText("KERNAL ROM ($E000..$FFFF)");
    jCheckBoxC64KernalRom.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC64KernalRomItemStateChanged(evt);
      }
    });

    javax.swing.GroupLayout jPanelC64CommLayout = new javax.swing.GroupLayout(jPanelC64Comm);
    jPanelC64Comm.setLayout(jPanelC64CommLayout);
    jPanelC64CommLayout.setHorizontalGroup(
      jPanelC64CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelC64CommLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanelC64CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
          .addComponent(jCheckBoxC64ScreenArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC64KernalRom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC64Cia1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC64Color, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckC64BoxSid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckC64BoxVicII, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC64FreeRam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC64FreeArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC64_200Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
          .addComponent(jCheckBoxC64StackArea, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC64ZeroPage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC64_300Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC64BasicRom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC64Cia2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanelC64CommLayout.setVerticalGroup(
      jPanelC64CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelC64CommLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jCheckBoxC64ZeroPage)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC64StackArea)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC64_200Area)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC64_300Area)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC64ScreenArea)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC64FreeArea)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC64BasicRom)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC64FreeRam)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckC64BoxVicII)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckC64BoxSid)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC64Color)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC64Cia1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC64Cia2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC64KernalRom)
        .addContainerGap(201, Short.MAX_VALUE))
    );

    jTabbedPaneComm.addTab("C64", jPanelC64Comm);

    jCheckBoxC1541ZeroPage.setSelected(true);
    jCheckBoxC1541ZeroPage.setText("Zero page area ($00..$FF)");
    jCheckBoxC1541ZeroPage.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC1541ZeroPageItemStateChanged(evt);
      }
    });

    jCheckBoxC1541StackArea.setSelected(true);
    jCheckBoxC1541StackArea.setText("Stack area ($100..$1FF)");
    jCheckBoxC1541StackArea.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC1541StackAreaItemStateChanged(evt);
      }
    });

    jCheckBoxC1541_200Area.setSelected(true);
    jCheckBoxC1541_200Area.setText("Support area for KERNAL  ($200..$2FF)");
    jCheckBoxC1541_200Area.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC1541_200AreaItemStateChanged(evt);
      }
    });

    jCheckBoxC1541Via1.setSelected(true);
    jCheckBoxC1541Via1.setText("VIA #1 ($1800..$180F)");
    jCheckBoxC1541Via1.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC1541Via1ItemStateChanged(evt);
      }
    });

    jCheckBoxC1541Via2.setSelected(true);
    jCheckBoxC1541Via2.setText("VIA #2 ($1C00..$1C0F)");
    jCheckBoxC1541Via2.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC1541Via2ItemStateChanged(evt);
      }
    });

    jCheckBoxC1541Kernal.setSelected(true);
    jCheckBoxC1541Kernal.setText("Kernal ($C000..$FFFF)");
    jCheckBoxC1541Kernal.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC1541KernalItemStateChanged(evt);
      }
    });

    jCheckBoxC1541Buffer0.setText("Buffer #0 ($300..$3FF)");
    jCheckBoxC1541Buffer0.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC1541Buffer0ItemStateChanged(evt);
      }
    });

    jCheckBoxC1541Buffer1.setText("Buffer #1 ($400..$4FF)");
    jCheckBoxC1541Buffer1.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC1541Buffer1ItemStateChanged(evt);
      }
    });

    jCheckBoxC1541Buffer2.setText("Buffer #2 ($500..$5FF)");
    jCheckBoxC1541Buffer2.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC1541Buffer2ItemStateChanged(evt);
      }
    });

    jCheckBoxC1541Buffer3.setText("Buffer #3 ($600..$6FF)");
    jCheckBoxC1541Buffer3.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC1541Buffer3ItemStateChanged(evt);
      }
    });

    jCheckBoxC1541Buffer4.setText("Buffer #4 ($700..$7FF)");
    jCheckBoxC1541Buffer4.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC1541Buffer4ItemStateChanged(evt);
      }
    });

    javax.swing.GroupLayout jPanelC1541CommLayout = new javax.swing.GroupLayout(jPanelC1541Comm);
    jPanelC1541Comm.setLayout(jPanelC1541CommLayout);
    jPanelC1541CommLayout.setHorizontalGroup(
      jPanelC1541CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelC1541CommLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanelC1541CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(jCheckBoxC1541Buffer4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC1541Buffer3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC1541Buffer2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC1541Buffer1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC1541Buffer0, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC1541Kernal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC1541Via2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC1541Via1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC1541_200Area, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC1541StackArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC1541ZeroPage, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE))
        .addGap(379, 379, 379))
    );
    jPanelC1541CommLayout.setVerticalGroup(
      jPanelC1541CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelC1541CommLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jCheckBoxC1541ZeroPage)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC1541StackArea)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC1541_200Area)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC1541Buffer0)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC1541Buffer1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC1541Buffer2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC1541Buffer3)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC1541Buffer4)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC1541Via1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC1541Via2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC1541Kernal)
        .addContainerGap(276, Short.MAX_VALUE))
    );

    jTabbedPaneComm.addTab("C1541", jPanelC1541Comm);

    jCheckBoxC128ZeroPage.setSelected(true);
    jCheckBoxC128ZeroPage.setText("Zero page area ($00..$FF)");
    jCheckBoxC128ZeroPage.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC128ZeroPageItemStateChanged(evt);
      }
    });

    jCheckBoxC128StackArea.setSelected(true);
    jCheckBoxC128StackArea.setText("Stack area ($100..$1FF)");
    jCheckBoxC128StackArea.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC128StackAreaItemStateChanged(evt);
      }
    });

    jCheckBoxC128_300Area.setSelected(true);
    jCheckBoxC128_300Area.setText("Support area for BASIC/KERNAL part 2 ($300..$3FF)");
    jCheckBoxC128_300Area.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC128_300AreaItemStateChanged(evt);
      }
    });

    jCheckBoxC128_200Area.setSelected(true);
    jCheckBoxC128_200Area.setText("Support area for BASIC/KERNAL part 1 ($200..$2FF)");
    jCheckBoxC128_200Area.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC128_200AreaItemStateChanged(evt);
      }
    });

    jCheckBoxC128ScreenArea.setSelected(true);
    jCheckBoxC128ScreenArea.setText("Screen area ($400..$7E7)");
    jCheckBoxC128ScreenArea.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC128ScreenAreaItemStateChanged(evt);
      }
    });

    jCheckBoxC128UserBasic.setSelected(true);
    jCheckBoxC128UserBasic.setText("User BASIC area ($7E8..$12FF)");
    jCheckBoxC128UserBasic.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC128UserBasicItemStateChanged(evt);
      }
    });

    jCheckBoxC128AppProgArea.setText("Application program area ($1300..$1BFF)");
    jCheckBoxC128AppProgArea.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC128AppProgAreaItemStateChanged(evt);
      }
    });

    jCheckBoxC128VideoColor.setText("Video Color ($1C00..$1FFF)");
    jCheckBoxC128VideoColor.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC128VideoColorItemStateChanged(evt);
      }
    });

    jCheckBoxC128ScreenMem.setText("Screen memory ($2000..$3FFF)");
    jCheckBoxC128ScreenMem.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC128ScreenMemItemStateChanged(evt);
      }
    });

    jCheckBoxC128Color.setSelected(true);
    jCheckBoxC128Color.setText("Color RAM ($D800..$DBFF)");
    jCheckBoxC128Color.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC128ColorItemStateChanged(evt);
      }
    });

    jCheckBoxC128BasicRom.setSelected(true);
    jCheckBoxC128BasicRom.setText("BASIC ROM ($4000..$CFFF)");
    jCheckBoxC128BasicRom.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC128BasicRomItemStateChanged(evt);
      }
    });

    jCheckBoxC128VicII.setSelected(true);
    jCheckBoxC128VicII.setText("VIC II chip ($D000..$D3FF)");
    jCheckBoxC128VicII.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC128VicIIItemStateChanged(evt);
      }
    });

    jCheckBoxC128Sid.setSelected(true);
    jCheckBoxC128Sid.setText("SID chip ($D400..$D4FF)");
    jCheckBoxC128Sid.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC128SidItemStateChanged(evt);
      }
    });

    jCheckBoxC128MMU.setSelected(true);
    jCheckBoxC128MMU.setText("MMU ($D500..$D50B)");
    jCheckBoxC128MMU.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC128MMUItemStateChanged(evt);
      }
    });

    jCheckBoxC128VDC.setSelected(true);
    jCheckBoxC128VDC.setText("VDC ($D600..$D624)");
    jCheckBoxC128VDC.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC128VDCItemStateChanged(evt);
      }
    });

    jCheckBoxC128Cia1.setSelected(true);
    jCheckBoxC128Cia1.setText("CIA 1 ($DC00..$DCFF)");
    jCheckBoxC128Cia1.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC128Cia1ItemStateChanged(evt);
      }
    });

    jCheckBoxC128Cia2.setSelected(true);
    jCheckBoxC128Cia2.setText("CIA 2 ($DD00..$DDFF)");
    jCheckBoxC128Cia2.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC128Cia2ItemStateChanged(evt);
      }
    });

    jCheckBoxC128DMA.setSelected(true);
    jCheckBoxC128DMA.setText("DMA Controller ($DF00..$DF0A)");
    jCheckBoxC128DMA.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC128DMAItemStateChanged(evt);
      }
    });

    jCheckBoxC128KernalRom.setSelected(true);
    jCheckBoxC128KernalRom.setText("KERNAL ROM ($E000..$FFFF)");
    jCheckBoxC128KernalRom.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxC128KernalRomItemStateChanged(evt);
      }
    });

    javax.swing.GroupLayout jPanelC128CommLayout = new javax.swing.GroupLayout(jPanelC128Comm);
    jPanelC128Comm.setLayout(jPanelC128CommLayout);
    jPanelC128CommLayout.setHorizontalGroup(
      jPanelC128CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelC128CommLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanelC128CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jCheckBoxC128ZeroPage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC128StackArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC128_200Area, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC128_300Area, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC128ScreenArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC128UserBasic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC128AppProgArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC128VideoColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC128ScreenMem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC128BasicRom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC128VicII)
          .addComponent(jCheckBoxC128Sid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC128MMU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxC128VDC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
      .addGroup(jPanelC128CommLayout.createSequentialGroup()
        .addGroup(jPanelC128CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanelC128CommLayout.createSequentialGroup()
            .addGap(8, 8, 8)
            .addComponent(jCheckBoxC128Color, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(jPanelC128CommLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanelC128CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(jCheckBoxC128Cia1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jCheckBoxC128Cia2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jCheckBoxC128DMA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jCheckBoxC128KernalRom, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))))
        .addContainerGap(399, Short.MAX_VALUE))
    );
    jPanelC128CommLayout.setVerticalGroup(
      jPanelC128CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelC128CommLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jCheckBoxC128ZeroPage)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC128StackArea)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC128_200Area)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC128_300Area)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC128ScreenArea)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC128UserBasic)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC128AppProgArea)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC128VideoColor)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC128ScreenMem)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC128BasicRom)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC128VicII)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC128Sid)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC128MMU)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC128VDC)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC128Color)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC128Cia1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC128Cia2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC128DMA)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxC128KernalRom)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jTabbedPaneComm.addTab("C128", jPanelC128Comm);

    jCheckBoxVic20StackArea.setSelected(true);
    jCheckBoxVic20StackArea.setText("Stack area ($100..$1FF)");
    jCheckBoxVic20StackArea.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20StackAreaItemStateChanged(evt);
      }
    });

    jCheckBoxVic20ZeroPage.setSelected(true);
    jCheckBoxVic20ZeroPage.setText("Zero page area ($00..$FF)");
    jCheckBoxVic20ZeroPage.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20ZeroPageItemStateChanged(evt);
      }
    });

    jCheckBoxVic20_200Area.setSelected(true);
    jCheckBoxVic20_200Area.setText("Support area for BASIC/KERNAL part 1 ($200..$2FF)");
    jCheckBoxVic20_200Area.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20_200AreaItemStateChanged(evt);
      }
    });

    jCheckBoxVic20_300Area.setSelected(true);
    jCheckBoxVic20_300Area.setText("Support area for BASIC/KERNAL part 2 ($300..$3FF)");
    jCheckBoxVic20_300Area.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20_300AreaItemStateChanged(evt);
      }
    });

    jCheckBoxVic20_400Area.setSelected(true);
    jCheckBoxVic20_400Area.setText("Support area for BASIC/KERNAL part 3 ($400..$4FF)");
    jCheckBoxVic20_400Area.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20_400AreaItemStateChanged(evt);
      }
    });

    jCheckBoxVic20Vic.setSelected(true);
    jCheckBoxVic20Vic.setText("VIC ($9000..$900F)");
    jCheckBoxVic20Vic.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20VicItemStateChanged(evt);
      }
    });

    jCheckBoxVic20Via1.setSelected(true);
    jCheckBoxVic20Via1.setText("Via #1 ($9010..$901F)");
    jCheckBoxVic20Via1.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20Via1ItemStateChanged(evt);
      }
    });

    jCheckBoxVic20Via2.setSelected(true);
    jCheckBoxVic20Via2.setText("Via #2 ($9020..$902F)");
    jCheckBoxVic20Via2.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20Via2ItemStateChanged(evt);
      }
    });

    jCheckBoxVic20UserBasic.setText("User BASIC area ($1000..$1DFF)");
    jCheckBoxVic20UserBasic.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20UserBasicItemStateChanged(evt);
      }
    });

    jCheckBoxVic20Screen.setText("Screen memory ($1E00..$1FFF)");
    jCheckBoxVic20Screen.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20ScreenItemStateChanged(evt);
      }
    });

    jCheckBoxVic20_8kExp1.setText("8K expansion block 1 ($2000..$3FFF)");
    jCheckBoxVic20_8kExp1.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20_8kExp1ItemStateChanged(evt);
      }
    });

    jCheckBoxVic20_8kExp2.setText("8K expansion block 2 ($4000..$5FFF)");
    jCheckBoxVic20_8kExp2.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20_8kExp2ItemStateChanged(evt);
      }
    });

    jCheckBoxVic20_8kExp3.setText("8K expansion block 3 ($6000..$7FFF)");
    jCheckBoxVic20_8kExp3.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20_8kExp3ItemStateChanged(evt);
      }
    });

    jCheckBoxVic20Character.setText("4K character ($8000..$8FFF)");
    jCheckBoxVic20Character.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20CharacterItemStateChanged(evt);
      }
    });

    jCheckBoxVic20Color.setText("Color RAM ($9400..$97FF)");
    jCheckBoxVic20Color.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20ColorItemStateChanged(evt);
      }
    });

    jCheckBoxVic20Block2.setText("I/O block 2 ($9800..$9BFF)");
    jCheckBoxVic20Block2.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20Block2ItemStateChanged(evt);
      }
    });

    jCheckBoxVic20Block3.setText("I/O block 3 ($9C00..$9FFF)");
    jCheckBoxVic20Block3.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20Block3ItemStateChanged(evt);
      }
    });

    jCheckBoxVic20Block4.setText("8K decoded ($A0000..$BFFF)");
    jCheckBoxVic20Block4.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20Block4ItemStateChanged(evt);
      }
    });

    jCheckBoxVic20BasicRom.setSelected(true);
    jCheckBoxVic20BasicRom.setText("BASIC ROM ($C0000..$DFFF)");
    jCheckBoxVic20BasicRom.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20BasicRomItemStateChanged(evt);
      }
    });

    jCheckBoxVic20KernalRom.setSelected(true);
    jCheckBoxVic20KernalRom.setText("KERNAL ROM ($E0000..$FFFF)");
    jCheckBoxVic20KernalRom.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxVic20KernalRomItemStateChanged(evt);
      }
    });

    javax.swing.GroupLayout jPanelVic20CommLayout = new javax.swing.GroupLayout(jPanelVic20Comm);
    jPanelVic20Comm.setLayout(jPanelVic20CommLayout);
    jPanelVic20CommLayout.setHorizontalGroup(
      jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelVic20CommLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jCheckBoxVic20ZeroPage, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
            .addComponent(jCheckBoxVic20StackArea, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jCheckBoxVic20Color, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jCheckBoxVic20Via2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jCheckBoxVic20Via1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jCheckBoxVic20Vic, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jCheckBoxVic20Character, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jCheckBoxVic20_8kExp3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jCheckBoxVic20_8kExp2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jCheckBoxVic20_8kExp1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jCheckBoxVic20Screen, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jCheckBoxVic20UserBasic, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jCheckBoxVic20_400Area, javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jCheckBoxVic20_300Area, javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jCheckBoxVic20_200Area, javax.swing.GroupLayout.Alignment.LEADING))
          .addComponent(jCheckBoxVic20Block2, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jCheckBoxVic20Block3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jCheckBoxVic20Block4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jCheckBoxVic20BasicRom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jCheckBoxVic20KernalRom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap(393, Short.MAX_VALUE))
    );
    jPanelVic20CommLayout.setVerticalGroup(
      jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelVic20CommLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jCheckBoxVic20ZeroPage)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxVic20StackArea)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxVic20_200Area)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxVic20_300Area)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxVic20_400Area)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxVic20UserBasic)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxVic20Screen)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxVic20_8kExp1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxVic20_8kExp2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxVic20_8kExp3)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxVic20Character)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxVic20Vic)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxVic20Via1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxVic20Via2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxVic20Color)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxVic20Block2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxVic20Block3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxVic20Block4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxVic20BasicRom, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxVic20KernalRom, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jTabbedPaneComm.addTab("Vic20", jPanelVic20Comm);

    jCheckBoxPlus4ZeroPage.setSelected(true);
    jCheckBoxPlus4ZeroPage.setText("Zero page area ($00..$FF)");
    jCheckBoxPlus4ZeroPage.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4ZeroPageItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4StackArea.setSelected(true);
    jCheckBoxPlus4StackArea.setText("Stack area ($100..$1FF)");
    jCheckBoxPlus4StackArea.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4StackAreaItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4_200Area.setSelected(true);
    jCheckBoxPlus4_200Area.setText("Support area for BASIC/KERNAL part 1 ($200..$2FF)");
    jCheckBoxPlus4_200Area.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4_200AreaItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4_300Area.setSelected(true);
    jCheckBoxPlus4_300Area.setText("Support area for BASIC/KERNAL part 2 ($300..$3FF)");
    jCheckBoxPlus4_300Area.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4_300AreaItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4_400Area.setSelected(true);
    jCheckBoxPlus4_400Area.setText("Support area for BASIC/KERNAL part 3 ($400..$4FF)");
    jCheckBoxPlus4_400Area.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4_400AreaItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4_500Area.setSelected(true);
    jCheckBoxPlus4_500Area.setText("Support area for BASIC/KERNAL part 4 ($500..$5FF)");
    jCheckBoxPlus4_500Area.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4_500AreaItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4_600Area.setSelected(true);
    jCheckBoxPlus4_600Area.setText("Support area for BASIC/KERNAL part 5 ($600..$6FF)");
    jCheckBoxPlus4_600Area.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4_600AreaItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4_700Area.setSelected(true);
    jCheckBoxPlus4_700Area.setText("Support area for BASIC/KERNAL part 6 ($700..$7FF)");
    jCheckBoxPlus4_700Area.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4_700AreaItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4ColorArea.setText("Color memory ($800..$BFF)");
    jCheckBoxPlus4ColorArea.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4ColorAreaItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4VideoArea.setText("Video memory ($C00..$CFF)");
    jCheckBoxPlus4VideoArea.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4VideoAreaItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4BasicRamP.setText("BASIC RAM without graphics ($1000..$17FF)");
    jCheckBoxPlus4BasicRamP.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4BasicRamPItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4Luminance.setText("Luminance ($1800..$1BFF)");
    jCheckBoxPlus4Luminance.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4LuminanceItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4ColorBitmap.setText("Color for bitmap($1C00..$1FFF)");
    jCheckBoxPlus4ColorBitmap.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4ColorBitmapItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4GraphicData.setText("Graphics data ($2000..$3FFF)");
    jCheckBoxPlus4GraphicData.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4GraphicDataItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4BasicRamN.setText("BASIC RAM with graphics ($4000..$7FFF)");
    jCheckBoxPlus4BasicRamN.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4BasicRamNItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4BasicRom.setText("BASIC ROM ($8000..$BFFF)");
    jCheckBoxPlus4BasicRom.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4BasicRomItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4BasicExt.setText("BASIC Expansion ($C000..$CFFF)");
    jCheckBoxPlus4BasicExt.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4BasicExtItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4Caracter.setText("Caracter table ($D000..$DFFF)");
    jCheckBoxPlus4Caracter.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4CaracterItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4Acia.setSelected(true);
    jCheckBoxPlus4Acia.setText("6551 ACIA ($FD00..$FD0F)");
    jCheckBoxPlus4Acia.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4AciaItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4_6529B_1.setSelected(true);
    jCheckBoxPlus4_6529B_1.setText("6529B #1 ($FD10..$FD1F)");
    jCheckBoxPlus4_6529B_1.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4_6529B_1ItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4_6529B_2.setSelected(true);
    jCheckBoxPlus4_6529B_2.setText("6529B #2 ($FD30..$FD3F)");
    jCheckBoxPlus4_6529B_2.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4_6529B_2ItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4Ted.setSelected(true);
    jCheckBoxPlus4Ted.setText("TED ($FF00..$FF1F)");
    jCheckBoxPlus4Ted.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4TedItemStateChanged(evt);
      }
    });

    jCheckBoxPlus4Kernal.setSelected(true);
    jCheckBoxPlus4Kernal.setText("Kernal ($FF20..$FFFF)");
    jCheckBoxPlus4Kernal.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxPlus4KernalItemStateChanged(evt);
      }
    });

    javax.swing.GroupLayout jPanelPlus4CommLayout = new javax.swing.GroupLayout(jPanelPlus4Comm);
    jPanelPlus4Comm.setLayout(jPanelPlus4CommLayout);
    jPanelPlus4CommLayout.setHorizontalGroup(
      jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
            .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jCheckBoxPlus4Ted, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jCheckBoxPlus4Kernal, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jCheckBoxPlus4_6529B_1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jCheckBoxPlus4_6529B_2, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jCheckBoxPlus4Acia, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(0, 0, Short.MAX_VALUE))
          .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
            .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
              .addComponent(jCheckBoxPlus4_200Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jCheckBoxPlus4_600Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jCheckBoxPlus4_700Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
              .addComponent(jCheckBoxPlus4ColorArea, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
              .addComponent(jCheckBoxPlus4VideoArea, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
              .addComponent(jCheckBoxPlus4BasicRamP, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
              .addComponent(jCheckBoxPlus4Luminance, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
              .addComponent(jCheckBoxPlus4ColorBitmap, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
              .addComponent(jCheckBoxPlus4GraphicData, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
              .addComponent(jCheckBoxPlus4BasicRamN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
              .addComponent(jCheckBoxPlus4BasicRom, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jCheckBoxPlus4BasicExt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jCheckBoxPlus4Caracter, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jCheckBoxPlus4_400Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jCheckBoxPlus4_500Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
              .addComponent(jCheckBoxPlus4ZeroPage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
              .addComponent(jCheckBoxPlus4StackArea, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jCheckBoxPlus4_300Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE))
            .addContainerGap(403, Short.MAX_VALUE))))
    );
    jPanelPlus4CommLayout.setVerticalGroup(
      jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jCheckBoxPlus4ZeroPage)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4StackArea)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4_200Area)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4_300Area)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4_400Area)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4_500Area)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4_600Area)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4_700Area)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4ColorArea)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4VideoArea)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4BasicRamP)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4Luminance)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4ColorBitmap)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4GraphicData)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4BasicRamN)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4BasicRom)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4BasicExt)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4Caracter)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4Acia)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4_6529B_1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4_6529B_2)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4Ted)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxPlus4Kernal)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jTabbedPaneComm.addTab("Plus4", jPanelPlus4Comm);

    jCheckBoxAtariKernalRom.setSelected(true);
    jCheckBoxAtariKernalRom.setText("KERNAL ROM ($D800..$FFFF)");
    jCheckBoxAtariKernalRom.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxAtariKernalRomItemStateChanged(evt);
      }
    });

    jCheckBoxAtariAntic.setSelected(true);
    jCheckBoxAtariAntic.setText("ANTIC ($D400..$D4FF)");
    jCheckBoxAtariAntic.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxAtariAnticItemStateChanged(evt);
      }
    });

    jCheckBoxAtariPia.setSelected(true);
    jCheckBoxAtariPia.setText("PIA ($D300..$D3FF)");
    jCheckBoxAtariPia.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxAtariPiaItemStateChanged(evt);
      }
    });

    jCheckBoxAtariPokey.setSelected(true);
    jCheckBoxAtariPokey.setText("POKEY ($D200..$D2FF)");
    jCheckBoxAtariPokey.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxAtariPokeyItemStateChanged(evt);
      }
    });

    jCheckBoxAtariGtia.setSelected(true);
    jCheckBoxAtariGtia.setText("GTIA ($D000..$D0FF)");
    jCheckBoxAtariGtia.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxAtariGtiaItemStateChanged(evt);
      }
    });

    jCheckBoxAtariCartridgeA.setSelected(true);
    jCheckBoxAtariCartridgeA.setText("Cartridge A ($A000..$BFFF)");
    jCheckBoxAtariCartridgeA.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxAtariCartridgeAItemStateChanged(evt);
      }
    });

    jCheckBoxAtariCartridgeB.setSelected(true);
    jCheckBoxAtariCartridgeB.setText("Cartridge B ($8000..$9FFF)");
    jCheckBoxAtariCartridgeB.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxAtariCartridgeBItemStateChanged(evt);
      }
    });

    jCheckBoxAtariZeroPage.setSelected(true);
    jCheckBoxAtariZeroPage.setText("Zero page area ($00..$FF)");
    jCheckBoxAtariZeroPage.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxAtariZeroPageItemStateChanged(evt);
      }
    });

    jCheckBoxAtariStackArea.setSelected(true);
    jCheckBoxAtariStackArea.setText("Stack area ($100..$1FF)");
    jCheckBoxAtariStackArea.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxAtariStackAreaItemStateChanged(evt);
      }
    });

    jCheckBoxAtari200Area.setSelected(true);
    jCheckBoxAtari200Area.setText("Support area for OS part 1 ($200..$2FF)");
    jCheckBoxAtari200Area.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxAtari200AreaItemStateChanged(evt);
      }
    });

    jCheckBoxAtari300Area.setSelected(true);
    jCheckBoxAtari300Area.setText("Support area for OS part 2 ($300..$3FF)");
    jCheckBoxAtari300Area.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxAtari300AreaItemStateChanged(evt);
      }
    });

    jCheckBoxAtari400Area.setSelected(true);
    jCheckBoxAtari400Area.setText("Support area for OS part 3 ($400..$4FF)");
    jCheckBoxAtari400Area.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxAtari400AreaItemStateChanged(evt);
      }
    });

    jCheckBoxAtari500Area.setSelected(true);
    jCheckBoxAtari500Area.setText("Support area for OS part 4 ($500..$5FF)");
    jCheckBoxAtari500Area.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jCheckBoxAtari500AreaItemStateChanged(evt);
      }
    });

    javax.swing.GroupLayout jPanelAtariCommLayout = new javax.swing.GroupLayout(jPanelAtariComm);
    jPanelAtariComm.setLayout(jPanelAtariCommLayout);
    jPanelAtariCommLayout.setHorizontalGroup(
      jPanelAtariCommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelAtariCommLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanelAtariCommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
          .addComponent(jCheckBoxAtariKernalRom, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxAtariAntic, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxAtariPia, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxAtariPokey, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxAtariGtia, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxAtariCartridgeA, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxAtariCartridgeB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxAtari500Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxAtari400Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxAtari300Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxAtari200Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxAtariStackArea, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jCheckBoxAtariZeroPage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(433, Short.MAX_VALUE))
    );
    jPanelAtariCommLayout.setVerticalGroup(
      jPanelAtariCommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelAtariCommLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jCheckBoxAtariZeroPage)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxAtariStackArea)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxAtari200Area)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxAtari300Area)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxAtari400Area)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxAtari500Area)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxAtariCartridgeB)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxAtariCartridgeA)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxAtariGtia)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxAtariPokey)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxAtariPia)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxAtariAntic)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jCheckBoxAtariKernalRom)
        .addContainerGap(180, Short.MAX_VALUE))
    );

    jTabbedPaneComm.addTab("Atari", jPanelAtariComm);

    javax.swing.GroupLayout jPanelCommentLayout = new javax.swing.GroupLayout(jPanelComment);
    jPanelComment.setLayout(jPanelCommentLayout);
    jPanelCommentLayout.setHorizontalGroup(
      jPanelCommentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelCommentLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanelCommentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanelCommentLayout.createSequentialGroup()
            .addComponent(jLabelautocomment, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
          .addComponent(jTabbedPaneComm, javax.swing.GroupLayout.Alignment.TRAILING))
        .addContainerGap())
    );
    jPanelCommentLayout.setVerticalGroup(
      jPanelCommentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelCommentLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabelautocomment)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jTabbedPaneComm, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(222, Short.MAX_VALUE))
    );

    jTabbedPaneOption.addTab("Comments", jPanelComment);

    jLabelAutoComment.setText("Apply the output assembler syntax of:");

    jComboBoxAssembler.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jComboBoxAssemblerItemStateChanged(evt);
      }
    });

    jScrollPaneDasm.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
    jScrollPaneDasm.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    jScrollPaneDasm.setViewportView(jDasmPanel);

    jTabbedPaneAssembler.addTab("Dasm", jScrollPaneDasm);

    jScrollPaneTMPx.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
    jScrollPaneTMPx.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    jScrollPaneTMPx.setViewportView(jTmpxPanel);

    jTabbedPaneAssembler.addTab("TMPx", jScrollPaneTMPx);

    jScrollPaneCa65.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
    jScrollPaneCa65.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    jScrollPaneCa65.setViewportView(jCa65Panel);

    jTabbedPaneAssembler.addTab("Ca65", jScrollPaneCa65);

    jScrollPaneAcme.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
    jScrollPaneAcme.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    jScrollPaneAcme.setViewportView(jAcmePanel);

    jTabbedPaneAssembler.addTab("Acme", jScrollPaneAcme);

    jScrollPaneKickAssembler.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
    jScrollPaneKickAssembler.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    jScrollPaneKickAssembler.setViewportView(jKickPanel);

    jTabbedPaneAssembler.addTab("KickAssembler", jScrollPaneKickAssembler);

    jScrollPaneTass64.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
    jScrollPaneTass64.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    jScrollPaneTass64.setViewportView(jTass64Panel);

    jTabbedPaneAssembler.addTab("Tass64", jScrollPaneTass64);

    jScrollPaneGlass.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
    jScrollPaneGlass.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
    jScrollPaneGlass.setViewportView(jGlassPanel);

    jTabbedPaneAssembler.addTab("Glass", jScrollPaneGlass);

    javax.swing.GroupLayout jPanelDisassemblerLayout = new javax.swing.GroupLayout(jPanelDisassembler);
    jPanelDisassembler.setLayout(jPanelDisassemblerLayout);
    jPanelDisassemblerLayout.setHorizontalGroup(
      jPanelDisassemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelDisassemblerLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabelAutoComment, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jComboBoxAssembler, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDisassemblerLayout.createSequentialGroup()
        .addGap(0, 0, Short.MAX_VALUE)
        .addComponent(jTabbedPaneAssembler, javax.swing.GroupLayout.PREFERRED_SIZE, 814, javax.swing.GroupLayout.PREFERRED_SIZE))
    );
    jPanelDisassemblerLayout.setVerticalGroup(
      jPanelDisassemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelDisassemblerLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanelDisassemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabelAutoComment)
          .addComponent(jComboBoxAssembler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jTabbedPaneAssembler, javax.swing.GroupLayout.DEFAULT_SIZE, 804, Short.MAX_VALUE))
    );

    jTabbedPaneOption.addTab("Disassembler", jPanelDisassembler);

    buttonGroupLook.add(jRadioButtonLookJava);
    jRadioButtonLookJava.setText("Java");
    jRadioButtonLookJava.setEnabled(false);
    jRadioButtonLookJava.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonLookJavaItemStateChanged(evt);
      }
    });

    buttonGroupLook.add(jRadioButtonLookMac);
    jRadioButtonLookMac.setText("Machintosh");
    jRadioButtonLookMac.setEnabled(false);
    jRadioButtonLookMac.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonLookMacItemStateChanged(evt);
      }
    });

    buttonGroupLook.add(jRadioButtonLookMetal);
    jRadioButtonLookMetal.setText("Metal");
    jRadioButtonLookMetal.setEnabled(false);
    jRadioButtonLookMetal.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonLookMetalItemStateChanged(evt);
      }
    });

    buttonGroupLook.add(jRadioButtonLookWin);
    jRadioButtonLookWin.setText("Windows style");
    jRadioButtonLookWin.setEnabled(false);
    jRadioButtonLookWin.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonLookWinItemStateChanged(evt);
      }
    });

    buttonGroupLook.add(jRadioButtonLookGtk);
    jRadioButtonLookGtk.setText("GTK style");
    jRadioButtonLookGtk.setEnabled(false);
    jRadioButtonLookGtk.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonLookGtkItemStateChanged(evt);
      }
    });

    buttonGroupLook.add(jRadioButtonLookNimbus);
    jRadioButtonLookNimbus.setText("Nimbus");
    jRadioButtonLookNimbus.setEnabled(false);
    jRadioButtonLookNimbus.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonLookNimbusItemStateChanged(evt);
      }
    });

    jLabelLook.setText("Look & Feel:");

    jLabelTheme.setText("Theme:");

    buttonGroupTheme.add(jRadioButtonOcean);
    jRadioButtonOcean.setText("Ocean");
    jRadioButtonOcean.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonOceanItemStateChanged(evt);
      }
    });

    buttonGroupTheme.add(jRadioButtonSteel);
    jRadioButtonSteel.setText("Steel");
    jRadioButtonSteel.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonSteelItemStateChanged(evt);
      }
    });

    buttonGroupTheme.add(jRadioButtonAqua);
    jRadioButtonAqua.setText("Aqua");
    jRadioButtonAqua.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonAquaItemStateChanged(evt);
      }
    });

    buttonGroupTheme.add(jRadioButtonCharcoal);
    jRadioButtonCharcoal.setText("Charcoal");
    jRadioButtonCharcoal.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonCharcoalItemStateChanged(evt);
      }
    });

    buttonGroupTheme.add(jRadioButtonHighContrast);
    jRadioButtonHighContrast.setText("High Contrast");
    jRadioButtonHighContrast.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonHighContrastItemStateChanged(evt);
      }
    });

    buttonGroupTheme.add(jRadioButtonEmerald);
    jRadioButtonEmerald.setText("Emerald");
    jRadioButtonEmerald.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonEmeraldItemStateChanged(evt);
      }
    });

    buttonGroupTheme.add(jRadioButtonRuby);
    jRadioButtonRuby.setText("Ruby");
    jRadioButtonRuby.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonRubyItemStateChanged(evt);
      }
    });

    buttonGroupLook.add(jRadioButtonLookCWin);
    jRadioButtonLookCWin.setText("Windows classic style");
    jRadioButtonLookCWin.setEnabled(false);
    jRadioButtonLookCWin.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonLookCWinItemStateChanged(evt);
      }
    });

    jLabelBracket.setFont(new java.awt.Font("Tahoma", 0, 64)); // NOI18N
    jLabelBracket.setText("{");

    buttonGroupLook.add(jRadioButtonLookSynth);
    jRadioButtonLookSynth.setText("Synth based");
    jRadioButtonLookSynth.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        jRadioButtonLookSynthItemStateChanged(evt);
      }
    });

    jLabelArrow.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
    jLabelArrow.setText("----------------->");

    jListLaf.setModel(listModel);
    jListLaf.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jListLaf.setEnabled(false);
    jListLaf.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
      public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
        jListLafValueChanged(evt);
      }
    });
    jScrollPaneList.setViewportView(jListLaf);

    jLabelFlatLaf.setText("Flat laf look & feel:");

    javax.swing.GroupLayout jPanelLookLayout = new javax.swing.GroupLayout(jPanelLook);
    jPanelLook.setLayout(jPanelLookLayout);
    jPanelLookLayout.setHorizontalGroup(
      jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelLookLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addGroup(jPanelLookLayout.createSequentialGroup()
            .addComponent(jRadioButtonLookCWin, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabelBracket)
            .addGap(13, 13, 13)
            .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(jLabelTheme, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jRadioButtonOcean, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jRadioButtonSteel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jRadioButtonCharcoal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jRadioButtonAqua, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jRadioButtonHighContrast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jRadioButtonEmerald, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jRadioButtonRuby, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
          .addGroup(jPanelLookLayout.createSequentialGroup()
            .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(jRadioButtonLookSynth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jLabelLook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jRadioButtonLookJava, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jRadioButtonLookMac, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jRadioButtonLookMetal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jRadioButtonLookWin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
              .addComponent(jRadioButtonLookNimbus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jRadioButtonLookGtk, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabelArrow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(jScrollPaneList, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
          .addComponent(jLabelFlatLaf, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE))
        .addContainerGap(247, Short.MAX_VALUE))
    );
    jPanelLookLayout.setVerticalGroup(
      jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanelLookLayout.createSequentialGroup()
        .addGap(17, 17, 17)
        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanelLookLayout.createSequentialGroup()
            .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(jLabelTheme)
              .addComponent(jLabelFlatLaf))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanelLookLayout.createSequentialGroup()
                .addComponent(jRadioButtonOcean)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonSteel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonAqua)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonCharcoal)
                .addGap(0, 0, Short.MAX_VALUE))
              .addComponent(jScrollPaneList)))
          .addGroup(jPanelLookLayout.createSequentialGroup()
            .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addGroup(jPanelLookLayout.createSequentialGroup()
                .addComponent(jLabelLook)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButtonLookJava)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonLookMac)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonLookMetal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonLookWin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(jRadioButtonLookCWin)
                  .addComponent(jRadioButtonHighContrast)))
              .addComponent(jLabelBracket, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(jRadioButtonLookGtk)
              .addComponent(jRadioButtonEmerald))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(jRadioButtonLookNimbus)
              .addComponent(jRadioButtonRuby))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabelArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jRadioButtonLookSynth))
            .addContainerGap(567, Short.MAX_VALUE))))
    );

    jTabbedPaneOption.addTab("Look & Feel", jPanelLook);

    jPanelOption.add(jTabbedPaneOption, java.awt.BorderLayout.CENTER);

    jButtonLoad.setText("Load");
    jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonLoadActionPerformed(evt);
      }
    });
    jPanelDn.add(jButtonLoad);

    jButtonSave.setText("Save");
    jButtonSave.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonSaveActionPerformed(evt);
      }
    });
    jPanelDn.add(jButtonSave);

    jButtonClose.setText("Close");
    jButtonClose.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButtonCloseActionPerformed(evt);
      }
    });
    jPanelDn.add(jButtonClose);

    jPanelOption.add(jPanelDn, java.awt.BorderLayout.SOUTH);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(0, 19, Short.MAX_VALUE)
        .addComponent(jPanelOption, javax.swing.GroupLayout.PREFERRED_SIZE, 817, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(0, 20, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addGap(4, 4, 4)
        .addComponent(jPanelOption, javax.swing.GroupLayout.DEFAULT_SIZE, 907, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed
      if(!FileManager.instance.readOptionFile(FileManager.OPTION_FILE, option)) {
        JOptionPane.showMessageDialog(this, "Error reading the option file", "Loading error", JOptionPane.ERROR_MESSAGE);
      } else {
          JOptionPane.showMessageDialog(this, "Loading done", "Loading options", JOptionPane.INFORMATION_MESSAGE);
          applyOption();          
        }
    }//GEN-LAST:event_jButtonLoadActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
      option.custom=jTextAreaHeather.getText(); 
      if (!FileManager.instance.writeOptionFile(FileManager.OPTION_FILE, option)) {
        JOptionPane.showMessageDialog(this, "Error writing the option file", "Saving error", JOptionPane.ERROR_MESSAGE);
      } else JOptionPane.showMessageDialog(this, "Saving done", "Saving options", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
      close();
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void jCheckBoxErasePlusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxErasePlusItemStateChanged
        option.erasePlus=jCheckBoxErasePlus.isSelected();
    }//GEN-LAST:event_jCheckBoxErasePlusItemStateChanged

    private void jCheckBoxOpcodeFormattingSourceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxOpcodeFormattingSourceItemStateChanged
        option.opcodeUpperCaseSource=jCheckBoxOpcodeFormattingSource.isSelected();
    }//GEN-LAST:event_jCheckBoxOpcodeFormattingSourceItemStateChanged

    private void jTextFieldSidFreqHiFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldSidFreqHiFocusLost
        String txt=jTextFieldSidFreqHi.getText();
        txt=txt.replaceAll(" ", "");
        if ("".equals(txt)) option.sidFreqHiLabel="frequencyHi";
        else option.sidFreqHiLabel=txt;
    }//GEN-LAST:event_jTextFieldSidFreqHiFocusLost

    private void jTextFieldSidFreqLoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldSidFreqLoFocusLost
        String txt=jTextFieldSidFreqLo.getText();
        txt=txt.replaceAll(" ", "");
        if ("".equals(txt)) option.sidFreqLoLabel="frequencyLo";
        else option.sidFreqLoLabel=txt;
    }//GEN-LAST:event_jTextFieldSidFreqLoFocusLost

    private void jTextFieldPlaySoundFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldPlaySoundFocusLost
        String txt=jTextFieldPlaySound.getText();
        txt=txt.replaceAll(" ", "");
        if ("".equals(txt)) option.psidPlaySoundsLabel="playSound";
        else option.psidPlaySoundsLabel=txt;
    }//GEN-LAST:event_jTextFieldPlaySoundFocusLost

    private void jTextFieldInitSongsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldInitSongsFocusLost
        String txt=jTextFieldInitSongs.getText();
        txt=txt.replaceAll(" ", "");
        if ("".equals(txt)) option.psidInitSongsLabel="initSongs";
        else option.psidInitSongsLabel=txt;
    }//GEN-LAST:event_jTextFieldInitSongsFocusLost

    private void jSpinnerMaxByteAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxByteAggregateStateChanged
        option.maxByteAggregate=(Integer)jSpinnerMaxByteAggregate.getValue();
    }//GEN-LAST:event_jSpinnerMaxByteAggregateStateChanged

    private void jSpinnerMaxLengthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxLengthStateChanged
        option.maxLabelLength=(Integer)jSpinnerMaxLength.getValue();
    }//GEN-LAST:event_jSpinnerMaxLengthStateChanged

    private void jCheckBoxUndefinedCodeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxUndefinedCodeItemStateChanged
        option.useAsCode=jCheckBoxUndefinedCode.isSelected();
    }//GEN-LAST:event_jCheckBoxUndefinedCodeItemStateChanged

    private void jCheckBoxOpcodeFormattingPreviewItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxOpcodeFormattingPreviewItemStateChanged
        option.opcodeUpperCasePreview=jCheckBoxOpcodeFormattingPreview.isSelected();
    }//GEN-LAST:event_jCheckBoxOpcodeFormattingPreviewItemStateChanged

    private void jCheckBoxEraseDCommItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxEraseDCommItemStateChanged
        option.eraseDComm=jCheckBoxEraseDComm.isSelected();
    }//GEN-LAST:event_jCheckBoxEraseDCommItemStateChanged

    private void jRadioButtonLangItalianItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLangItalianItemStateChanged
        option.commentLanguage=C64Dasm.LANG_ITALIAN;
    }//GEN-LAST:event_jRadioButtonLangItalianItemStateChanged

    private void jRadioButtonLangEnglishItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLangEnglishItemStateChanged
        option.commentLanguage=C64Dasm.LANG_ENGLISH;
    }//GEN-LAST:event_jRadioButtonLangEnglishItemStateChanged

    private void jRadioButtonStyle3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonStyle3ItemStateChanged
        option.illegalOpcodeMode=M6510Dasm.MODE3;
    }//GEN-LAST:event_jRadioButtonStyle3ItemStateChanged

    private void jRadioButtonStyle2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonStyle2ItemStateChanged
        option.illegalOpcodeMode=M6510Dasm.MODE2;
    }//GEN-LAST:event_jRadioButtonStyle2ItemStateChanged

    private void jRadioButtonStyle1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonStyle1ItemStateChanged
        option.illegalOpcodeMode=M6510Dasm.MODE1;
    }//GEN-LAST:event_jRadioButtonStyle1ItemStateChanged

    private void jRadioButtonLookJavaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookJavaItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_MOTIF; 
        option.setLafName(actualLEF);
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);  
      }
    }//GEN-LAST:event_jRadioButtonLookJavaItemStateChanged

    private void jRadioButtonLookMacItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookMacItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_MAC;
        option.setLafName(actualLEF);   
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookMacItemStateChanged

    private void jRadioButtonLookMetalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookMetalItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_METAL;
        option.setLafName(actualLEF);    
        enableTheme();
        selectedTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme); 
      }
    }//GEN-LAST:event_jRadioButtonLookMetalItemStateChanged

    private void jRadioButtonLookWinItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookWinItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_WINDOWS;
        option.setLafName(actualLEF);    
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookWinItemStateChanged

    private void jRadioButtonLookGtkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookGtkItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_GTK;  
        option.setLafName(actualLEF);  
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookGtkItemStateChanged

    private void jRadioButtonLookNimbusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookNimbusItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_NIMBUS;
        option.setLafName(actualLEF);
        option.setTheme(Option.THEME_NULL);
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookNimbusItemStateChanged

    private void jRadioButtonLookCWinItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookCWinItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_CWINDOWS;
        option.setLafName(actualLEF);    
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookCWinItemStateChanged

    private void jRadioButtonLookSynthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookSynthItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_SYNTH;  
        option.setLafName(actualLEF);  
        disableTheme();
        jListLaf.setEnabled(true);
        
        actualLaf=(String)listModel.getElementAt(jListLaf.getSelectedIndex());
        option.setFlatLaf(actualLaf);
        Option.useLookAndFeel(actualLaf);
      }
    }//GEN-LAST:event_jRadioButtonLookSynthItemStateChanged

    private void jListLafValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListLafValueChanged
      if (!goFlat) return;
        
      if (evt != null && evt.getValueIsAdjusting()) {
        return;
      }
      if (evt == null) {
        return;
      }
      
      actualLaf=(String)listModel.getElementAt(jListLaf.getSelectedIndex());
      option.setFlatLaf(actualLaf);
      Option.useLookAndFeel(actualLaf);
    }//GEN-LAST:event_jListLafValueChanged

    private void jRadioButtonOceanItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonOceanItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_OCEAN);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonOceanItemStateChanged

    private void jRadioButtonSteelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonSteelItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_STEEL);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonSteelItemStateChanged

    private void jRadioButtonAquaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAquaItemStateChanged
     if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_AQUA);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }      
    }//GEN-LAST:event_jRadioButtonAquaItemStateChanged

    private void jRadioButtonCharcoalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCharcoalItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_CHARCOAL);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }    
    }//GEN-LAST:event_jRadioButtonCharcoalItemStateChanged

    private void jRadioButtonHighContrastItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonHighContrastItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_CONTRAST);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }      
    }//GEN-LAST:event_jRadioButtonHighContrastItemStateChanged

    private void jRadioButtonEmeraldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonEmeraldItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_EMERALD);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }     
    }//GEN-LAST:event_jRadioButtonEmeraldItemStateChanged

    private void jRadioButtonRubyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonRubyItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_RUBY);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      } 
    }//GEN-LAST:event_jRadioButtonRubyItemStateChanged

    private void jCheckBoxC64ZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64ZeroPageItemStateChanged
      option.commentC64ZeroPage=jCheckBoxC64ZeroPage.isSelected();
    }//GEN-LAST:event_jCheckBoxC64ZeroPageItemStateChanged

    private void jCheckBoxC64StackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64StackAreaItemStateChanged
      option.commentC64StackArea=jCheckBoxC64StackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxC64StackAreaItemStateChanged

    private void jCheckBoxC64_200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64_200AreaItemStateChanged
      option.commentC64_200Area=jCheckBoxC64_200Area.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC64_200AreaItemStateChanged

    private void jCheckBoxC64_300AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64_300AreaItemStateChanged
      option.commentC64_300Area=jCheckBoxC64_300Area.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC64_300AreaItemStateChanged

    private void jCheckBoxC64FreeAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64FreeAreaItemStateChanged
      option.commentC64BasicFreeArea=jCheckBoxC64FreeArea.isSelected();
    }//GEN-LAST:event_jCheckBoxC64FreeAreaItemStateChanged

    private void jCheckBoxC64BasicRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64BasicRomItemStateChanged
      option.commentC64BasicRom=jCheckBoxC64BasicRom.isSelected();
    }//GEN-LAST:event_jCheckBoxC64BasicRomItemStateChanged

    private void jCheckBoxC64FreeRamItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64FreeRamItemStateChanged
      option.commentC64FreeRam=jCheckBoxC64FreeRam.isSelected();
    }//GEN-LAST:event_jCheckBoxC64FreeRamItemStateChanged

    private void jCheckC64BoxVicIIItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckC64BoxVicIIItemStateChanged
      option.commentC64VicII=jCheckC64BoxVicII.isSelected();
    }//GEN-LAST:event_jCheckC64BoxVicIIItemStateChanged

    private void jCheckC64BoxSidItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckC64BoxSidItemStateChanged
      option.commentC64Sid=jCheckC64BoxSid.isSelected();
    }//GEN-LAST:event_jCheckC64BoxSidItemStateChanged

    private void jCheckBoxC64ColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64ColorItemStateChanged
      option.commentC64ColorArea=jCheckBoxC64Color.isSelected();
    }//GEN-LAST:event_jCheckBoxC64ColorItemStateChanged

    private void jCheckBoxC64Cia1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64Cia1ItemStateChanged
      option.commentC64Cia1=jCheckBoxC64Cia1.isSelected();
    }//GEN-LAST:event_jCheckBoxC64Cia1ItemStateChanged

    private void jCheckBoxC64Cia2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64Cia2ItemStateChanged
      option.commentC64Cia2=jCheckBoxC64Cia2.isSelected();
    }//GEN-LAST:event_jCheckBoxC64Cia2ItemStateChanged

    private void jCheckBoxC64KernalRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64KernalRomItemStateChanged
      option.commentC64KernalRom=jCheckBoxC64KernalRom.isSelected();
    }//GEN-LAST:event_jCheckBoxC64KernalRomItemStateChanged

    private void jCheckBoxC64ScreenAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64ScreenAreaItemStateChanged
      option.commentC64ScreenArea=jCheckBoxC64ScreenArea.isSelected();
    }//GEN-LAST:event_jCheckBoxC64ScreenAreaItemStateChanged

    private void jCheckBoxC1541ZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541ZeroPageItemStateChanged
      option.commentC1541ZeroPage=jCheckBoxC1541ZeroPage.isShowing();
    }//GEN-LAST:event_jCheckBoxC1541ZeroPageItemStateChanged

    private void jCheckBoxC1541StackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541StackAreaItemStateChanged
      option.commentC1541StackArea=jCheckBoxC64StackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541StackAreaItemStateChanged

    private void jCheckBoxC1541_200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541_200AreaItemStateChanged
      option.commentC1541_200Area=jCheckBoxC1541_200Area.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541_200AreaItemStateChanged

    private void jCheckBoxC1541Via1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Via1ItemStateChanged
      option.commentC1541Via1=jCheckBoxC1541Via1.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541Via1ItemStateChanged

    private void jCheckBoxC1541Via2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Via2ItemStateChanged
      option.commentC1541Via2=jCheckBoxC1541Via2.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541Via2ItemStateChanged

    private void jCheckBoxC1541KernalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541KernalItemStateChanged
     option.commentC1541Kernal=jCheckBoxC1541Kernal.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541KernalItemStateChanged

    private void jCheckBoxC1541Buffer0ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer0ItemStateChanged
      option.commentC1541Buffer0=jCheckBoxC1541Buffer0.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541Buffer0ItemStateChanged

    private void jCheckBoxC1541Buffer1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer1ItemStateChanged
      option.commentC1541Buffer1=jCheckBoxC1541Buffer1.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC1541Buffer1ItemStateChanged

    private void jCheckBoxC1541Buffer2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer2ItemStateChanged
      option.commentC1541Buffer2=jCheckBoxC1541Buffer2.isSelected();  
    }//GEN-LAST:event_jCheckBoxC1541Buffer2ItemStateChanged

    private void jCheckBoxC1541Buffer3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer3ItemStateChanged
      option.commentC1541Buffer3=jCheckBoxC1541Buffer3.isSelected();  
    }//GEN-LAST:event_jCheckBoxC1541Buffer3ItemStateChanged

    private void jCheckBoxC1541Buffer4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer4ItemStateChanged
      option.commentC1541Buffer4=jCheckBoxC1541Buffer4.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC1541Buffer4ItemStateChanged

    private void jCheckBoxPlus4ZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4ZeroPageItemStateChanged
      option.commentPlus4ZeroPage=jCheckBoxPlus4ZeroPage.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4ZeroPageItemStateChanged

    private void jCheckBoxPlus4StackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4StackAreaItemStateChanged
      option.commentPlus4StackArea=jCheckBoxPlus4StackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4StackAreaItemStateChanged

    private void jCheckBoxPlus4_200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_200AreaItemStateChanged
      option.commentPlus4_200Area=jCheckBoxPlus4_200Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_200AreaItemStateChanged

    private void jCheckBoxPlus4_300AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_300AreaItemStateChanged
      option.commentPlus4_300Area=jCheckBoxPlus4_300Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_300AreaItemStateChanged

    private void jCheckBoxPlus4_400AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_400AreaItemStateChanged
      option.commentPlus4_400Area=jCheckBoxPlus4_400Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_400AreaItemStateChanged

    private void jCheckBoxPlus4_500AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_500AreaItemStateChanged
      option.commentPlus4_500Area=jCheckBoxPlus4_500Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_500AreaItemStateChanged

    private void jCheckBoxPlus4_600AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_600AreaItemStateChanged
      option.commentPlus4_600Area=jCheckBoxPlus4_600Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_600AreaItemStateChanged

    private void jCheckBoxPlus4_700AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_700AreaItemStateChanged
      option.commentPlus4_700Area=jCheckBoxPlus4_700Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_700AreaItemStateChanged

    private void jCheckBoxPlus4ColorAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4ColorAreaItemStateChanged
      option.commentPlus4ColorArea=jCheckBoxPlus4ColorArea.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4ColorAreaItemStateChanged

    private void jCheckBoxPlus4VideoAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4VideoAreaItemStateChanged
      option.commentPlus4VideoArea=jCheckBoxPlus4VideoArea.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4VideoAreaItemStateChanged

    private void jCheckBoxPlus4BasicRamPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4BasicRamPItemStateChanged
      option.commentPlus4BasicRamP=jCheckBoxPlus4BasicRamP.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4BasicRamPItemStateChanged

    private void jCheckBoxPlus4LuminanceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4LuminanceItemStateChanged
      option.commentPlus4Luminance=jCheckBoxPlus4Luminance.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4LuminanceItemStateChanged

    private void jCheckBoxPlus4ColorBitmapItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4ColorBitmapItemStateChanged
      option.commentPlus4ColorBitmap=jCheckBoxPlus4ColorBitmap.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4ColorBitmapItemStateChanged

    private void jCheckBoxPlus4GraphicDataItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4GraphicDataItemStateChanged
      option.commentPlus4GraphicData=jCheckBoxPlus4GraphicData.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4GraphicDataItemStateChanged

    private void jCheckBoxPlus4BasicRamNItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4BasicRamNItemStateChanged
      option.commentPlus4BasicRamN=jCheckBoxPlus4BasicRamN.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4BasicRamNItemStateChanged

    private void jCheckBoxPlus4BasicRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4BasicRomItemStateChanged
      option.commentPlus4BasicRom=jCheckBoxPlus4BasicRom.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4BasicRomItemStateChanged

    private void jCheckBoxPlus4BasicExtItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4BasicExtItemStateChanged
      option.commentPlus4BasicExt=jCheckBoxPlus4BasicExt.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4BasicExtItemStateChanged

    private void jCheckBoxPlus4CaracterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4CaracterItemStateChanged
      option.commentPlus4Caracter=jCheckBoxPlus4Caracter.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4CaracterItemStateChanged

    private void jCheckBoxPlus4AciaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4AciaItemStateChanged
      option.commentPlus4Acia=jCheckBoxPlus4Acia.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4AciaItemStateChanged

    private void jCheckBoxPlus4_6529B_1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_6529B_1ItemStateChanged
      option.commentPlus4_6529B_1=jCheckBoxPlus4_6529B_1.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_6529B_1ItemStateChanged

    private void jCheckBoxPlus4_6529B_2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_6529B_2ItemStateChanged
      option.commentPlus4_6529B_2=jCheckBoxPlus4_6529B_2.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_6529B_2ItemStateChanged

    private void jCheckBoxPlus4TedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4TedItemStateChanged
      option.commentPlus4Ted=jCheckBoxPlus4Ted.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4TedItemStateChanged

    private void jCheckBoxPlus4KernalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4KernalItemStateChanged
      option.commentPlus4Kernal=jCheckBoxPlus4Kernal.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4KernalItemStateChanged

    private void jCheckBoxVic20StackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20StackAreaItemStateChanged
      option.commentVic20StackArea=jCheckBoxVic20StackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20StackAreaItemStateChanged

    private void jCheckBoxVic20ZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20ZeroPageItemStateChanged
      option.commentVic20ZeroPage=jCheckBoxVic20ZeroPage.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20ZeroPageItemStateChanged

    private void jCheckBoxVic20_200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_200AreaItemStateChanged
      option.commentVic20_200Area=jCheckBoxVic20_200Area.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20_200AreaItemStateChanged

    private void jCheckBoxVic20_300AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_300AreaItemStateChanged
      option.commentVic20_300Area=jCheckBoxVic20_300Area.isSelected();  
    }//GEN-LAST:event_jCheckBoxVic20_300AreaItemStateChanged

    private void jCheckBoxVic20_400AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_400AreaItemStateChanged
      option.commentVic20_400Area=jCheckBoxVic20_400Area.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20_400AreaItemStateChanged

    private void jCheckBoxVic20VicItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20VicItemStateChanged
      option.commentVic20Vic=jCheckBoxVic20Vic.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20VicItemStateChanged

    private void jCheckBoxVic20Via1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Via1ItemStateChanged
      option.commentVic20Via1=jCheckBoxVic20Via1.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20Via1ItemStateChanged

    private void jCheckBoxVic20Via2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Via2ItemStateChanged
      option.commentVic20Via2=jCheckBoxVic20Via2.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20Via2ItemStateChanged

    private void jCheckBoxVic20UserBasicItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20UserBasicItemStateChanged
      option.commentVic20UserBasic=jCheckBoxVic20UserBasic.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20UserBasicItemStateChanged

    private void jCheckBoxVic20ScreenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20ScreenItemStateChanged
      option.commentVic20Screen=jCheckBoxVic20Screen.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20ScreenItemStateChanged

    private void jCheckBoxVic20_8kExp1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_8kExp1ItemStateChanged
      option.commentVic20_8kExp1=jCheckBoxVic20_8kExp1.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20_8kExp1ItemStateChanged

    private void jCheckBoxVic20_8kExp2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_8kExp2ItemStateChanged
      option.commentVic20_8kExp2=jCheckBoxVic20_8kExp2.isSelected();    
    }//GEN-LAST:event_jCheckBoxVic20_8kExp2ItemStateChanged

    private void jCheckBoxVic20_8kExp3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_8kExp3ItemStateChanged
      option.commentVic20_8kExp3=jCheckBoxVic20_8kExp3.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20_8kExp3ItemStateChanged

    private void jCheckBoxVic20CharacterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20CharacterItemStateChanged
      option.commentVic20Character=jCheckBoxVic20Character.isSelected();  
    }//GEN-LAST:event_jCheckBoxVic20CharacterItemStateChanged

    private void jCheckBoxVic20ColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20ColorItemStateChanged
      option.commentVic20Color=jCheckBoxVic20Color.isSelected();   
    }//GEN-LAST:event_jCheckBoxVic20ColorItemStateChanged

    private void jCheckBoxVic20Block2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Block2ItemStateChanged
      option.commentVic20Block2=jCheckBoxVic20Block2.isSelected();  
    }//GEN-LAST:event_jCheckBoxVic20Block2ItemStateChanged

    private void jCheckBoxVic20Block3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Block3ItemStateChanged
      option.commentVic20Block3=jCheckBoxVic20Block3.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20Block3ItemStateChanged

    private void jCheckBoxVic20Block4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Block4ItemStateChanged
      option.commentVic20Block4=jCheckBoxVic20Block4.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20Block4ItemStateChanged

    private void jCheckBoxVic20BasicRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20BasicRomItemStateChanged
      option.commentVic20BasicRom=jCheckBoxVic20BasicRom.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20BasicRomItemStateChanged

    private void jCheckBoxVic20KernalRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20KernalRomItemStateChanged
      option.commentVic20KernalRom=jCheckBoxVic20KernalRom.isSelected();  
    }//GEN-LAST:event_jCheckBoxVic20KernalRomItemStateChanged

    private void jSpinnerInstrSpacesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerInstrSpacesStateChanged
      int num=(Integer)((JSpinner) evt.getSource()).getValue();
      if (num+option.numInstrTabs==0) jSpinnerInstrSpaces.setValue(1);
      else option.numInstrSpaces=num;      
    }//GEN-LAST:event_jSpinnerInstrSpacesStateChanged

    private void jSpinnerInstrTabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerInstrTabsStateChanged
      int num=(Integer)((JSpinner) evt.getSource()).getValue();
      if (num+option.numInstrSpaces==0) jSpinnerInstrTabs.setValue(1);
      else option.numInstrTabs=num;       
    }//GEN-LAST:event_jSpinnerInstrTabsStateChanged

    private void jSpinnerDataSpacesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerDataSpacesStateChanged
      int num=(Integer)((JSpinner) evt.getSource()).getValue();
      if (num+option.numDataTabs==0) jSpinnerDataSpaces.setValue(1);
      else option.numDataSpaces=num;         
    }//GEN-LAST:event_jSpinnerDataSpacesStateChanged

    private void jSpinnerDataTabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerDataTabsStateChanged
      int num=(Integer)((JSpinner) evt.getSource()).getValue();
      if (num+option.numDataSpaces==0) jSpinnerDataTabs.setValue(1);
      else option.numDataTabs=num;       
    }//GEN-LAST:event_jSpinnerDataTabsStateChanged

    private void jCheckBoxLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxLabelActionPerformed
      option.labelOnSepLine=jCheckBoxLabel.isSelected();
    }//GEN-LAST:event_jCheckBoxLabelActionPerformed

    private void jComboBoxAssemblerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxAssemblerItemStateChanged
      String str=(String)jComboBoxAssembler.getSelectedItem();
      
      for (Assembler.Name name: Assembler.Name.values()) {
        if (name.getName().equals(str)) {
          option.assembler=name;  
          return;
        }
      }
      
      
    }//GEN-LAST:event_jComboBoxAssemblerItemStateChanged

    private void jSpinnerMaxWordAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxWordAggregateStateChanged
      option.maxWordAggregate=(Integer)jSpinnerMaxWordAggregate.getValue();
    }//GEN-LAST:event_jSpinnerMaxWordAggregateStateChanged

    private void jSpinnerMaxTribyteAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxTribyteAggregateStateChanged
      option.maxTribyteAggregate=(Integer)jSpinnerMaxTribyteAggregate.getValue();
    }//GEN-LAST:event_jSpinnerMaxTribyteAggregateStateChanged

    private void jSpinnerMaxLongAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxLongAggregateStateChanged
      option.maxLongAggregate=(Integer)jSpinnerMaxLongAggregate.getValue();
    }//GEN-LAST:event_jSpinnerMaxLongAggregateStateChanged

    private void jCheckBoxC128ZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128ZeroPageItemStateChanged
      option.commentC128ZeroPage=jCheckBoxC128ZeroPage.isSelected();     
    }//GEN-LAST:event_jCheckBoxC128ZeroPageItemStateChanged

    private void jCheckBoxC128StackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128StackAreaItemStateChanged
      option.commentC128StackArea=jCheckBoxC128StackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxC128StackAreaItemStateChanged

    private void jCheckBoxC128_300AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128_300AreaItemStateChanged
      option.commentC128_300Area=jCheckBoxC128_300Area.isShowing();
    }//GEN-LAST:event_jCheckBoxC128_300AreaItemStateChanged

    private void jCheckBoxC128_200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128_200AreaItemStateChanged
      option.commentC128_200Area=jCheckBoxC128_200Area.isShowing();
    }//GEN-LAST:event_jCheckBoxC128_200AreaItemStateChanged

    private void jCheckBoxC128ScreenAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128ScreenAreaItemStateChanged
      option.commentC128ScreenArea=jCheckBoxC128ScreenArea.isSelected();       
    }//GEN-LAST:event_jCheckBoxC128ScreenAreaItemStateChanged

    private void jCheckBoxC128UserBasicItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128UserBasicItemStateChanged
      option.commentC128UserBasic=jCheckBoxC128UserBasic.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC128UserBasicItemStateChanged

    private void jCheckBoxC128AppProgAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128AppProgAreaItemStateChanged
      option.commentC128AppProgArea=jCheckBoxC128AppProgArea.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC128AppProgAreaItemStateChanged

    private void jCheckBoxC128VideoColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128VideoColorItemStateChanged
      option.commentC128VideoColor=jCheckBoxC128VideoColor.isSelected();
    }//GEN-LAST:event_jCheckBoxC128VideoColorItemStateChanged

    private void jCheckBoxC128ScreenMemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128ScreenMemItemStateChanged
      option.commentC128ScreenMem=jCheckBoxC128ScreenMem.isSelected();
    }//GEN-LAST:event_jCheckBoxC128ScreenMemItemStateChanged

    private void jCheckBoxC128ColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128ColorItemStateChanged
      option.commentC128Color=jCheckBoxC128Color.isSelected();
    }//GEN-LAST:event_jCheckBoxC128ColorItemStateChanged

    private void jCheckBoxC128BasicRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128BasicRomItemStateChanged
      option.commentC128BasicRom=jCheckBoxC128BasicRom.isSelected();
    }//GEN-LAST:event_jCheckBoxC128BasicRomItemStateChanged

    private void jCheckBoxC128VicIIItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128VicIIItemStateChanged
      option.commentC128VicII=jCheckBoxC128VicII.isSelected();
    }//GEN-LAST:event_jCheckBoxC128VicIIItemStateChanged

    private void jCheckBoxC128SidItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128SidItemStateChanged
      option.commentC128Sid=jCheckBoxC128Sid.isSelected();
    }//GEN-LAST:event_jCheckBoxC128SidItemStateChanged

    private void jCheckBoxC128MMUItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128MMUItemStateChanged
      option.commentC128MMU=jCheckBoxC128MMU.isSelected();
    }//GEN-LAST:event_jCheckBoxC128MMUItemStateChanged

    private void jCheckBoxC128VDCItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128VDCItemStateChanged
      option.commentC128VDC=jCheckBoxC128VDC.isSelected();
    }//GEN-LAST:event_jCheckBoxC128VDCItemStateChanged

    private void jCheckBoxC128Cia1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128Cia1ItemStateChanged
      option.commentC128Cia1=jCheckBoxC128Cia1.isSelected();
    }//GEN-LAST:event_jCheckBoxC128Cia1ItemStateChanged

    private void jCheckBoxC128Cia2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128Cia2ItemStateChanged
      option.commentC128Cia2=jCheckBoxC128Cia2.isSelected();
    }//GEN-LAST:event_jCheckBoxC128Cia2ItemStateChanged

    private void jCheckBoxC128DMAItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128DMAItemStateChanged
      option.commentC128DMA=jCheckBoxC128DMA.isSelected();
    }//GEN-LAST:event_jCheckBoxC128DMAItemStateChanged

    private void jCheckBoxC128KernalRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128KernalRomItemStateChanged
      option.commentC128KernalRom=jCheckBoxC128KernalRom.isSelected();
    }//GEN-LAST:event_jCheckBoxC128KernalRomItemStateChanged
      
    private void jButtonBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseActionPerformed
      if (chooserDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION) {
        option.tmpPath=chooserDir.getSelectedFile().getPath();
        jTextFieldTmpPath.setText(option.tmpPath);
      }
    }//GEN-LAST:event_jButtonBrowseActionPerformed

    private void jSpinnerMaxSwappedAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxSwappedAggregateStateChanged
      option.maxSwappedAggregate=(Integer)jSpinnerMaxSwappedAggregate.getValue();     
    }//GEN-LAST:event_jSpinnerMaxSwappedAggregateStateChanged

    private void jSpinnerMaxTextAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxTextAggregateStateChanged
      option.maxTextAggregate=(Integer)jSpinnerMaxTextAggregate.getValue();
    }//GEN-LAST:event_jSpinnerMaxTextAggregateStateChanged

    private void jSpinnerMaxAddressAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxAddressAggregateStateChanged
      option.maxAddressAggregate=(Integer)jSpinnerMaxAddressAggregate.getValue();       
    }//GEN-LAST:event_jSpinnerMaxAddressAggregateStateChanged

    private void jSpinnerMaxStackWordAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxStackWordAggregateStateChanged
      option.maxStackWordAggregate=(Integer)jSpinnerMaxStackWordAggregate.getValue();  
    }//GEN-LAST:event_jSpinnerMaxStackWordAggregateStateChanged

    private void jCheckBoxUbEditItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxUbEditItemStateChanged
      option.clickUbEdit=jCheckBoxUbEdit.isSelected();
    }//GEN-LAST:event_jCheckBoxUbEditItemStateChanged

    private void jCheckBoxUcEditItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxUcEditItemStateChanged
      option.clickUcEdit=jCheckBoxUcEdit.isSelected(); 
    }//GEN-LAST:event_jCheckBoxUcEditItemStateChanged

    private void jCheckBoxUlEditItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxUlEditItemStateChanged
      option.clickUlEdit=jCheckBoxUlEdit.isSelected(); 
    }//GEN-LAST:event_jCheckBoxUlEditItemStateChanged

    private void jCheckBoxDcEraseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxDcEraseItemStateChanged
      option.clickDcErase=jCheckBoxDcErase.isSelected(); 
    }//GEN-LAST:event_jCheckBoxDcEraseItemStateChanged

    private void jCheckBoxDlEraseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxDlEraseItemStateChanged
      option.clickDlErase=jCheckBoxDlErase.isSelected();  
    }//GEN-LAST:event_jCheckBoxDlEraseItemStateChanged

    private void jCheckBoxForceCompilationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxForceCompilationActionPerformed
      option.forceCompilation=jCheckBoxForceCompilation.isSelected();
    }//GEN-LAST:event_jCheckBoxForceCompilationActionPerformed

    private void jRadioButtonMemoryValueHexItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonMemoryValueHexItemStateChanged
      option.memoryValue=DataTableModelMemory.MOD_HEX;
    }//GEN-LAST:event_jRadioButtonMemoryValueHexItemStateChanged

    private void jRadioButtonMemoryValueCharItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonMemoryValueCharItemStateChanged
      option.memoryValue=DataTableModelMemory.MOD_CHAR;
    }//GEN-LAST:event_jRadioButtonMemoryValueCharItemStateChanged

    private void jSpinnerInstrCSpacesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerInstrCSpacesStateChanged
      option.numInstrCSpaces=(Integer)((JSpinner) evt.getSource()).getValue();
    }//GEN-LAST:event_jSpinnerInstrCSpacesStateChanged

    private void jSpinnerInstrCTabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerInstrCTabsStateChanged
      option.numInstrCTabs=(Integer)((JSpinner) evt.getSource()).getValue();;
    }//GEN-LAST:event_jSpinnerInstrCTabsStateChanged

    private void jSpinnerDataCSpacesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerDataCSpacesStateChanged
      option.numDataCSpaces=(Integer)((JSpinner) evt.getSource()).getValue(); 
    }//GEN-LAST:event_jSpinnerDataCSpacesStateChanged

    private void jSpinnerDataCTabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerDataCTabsStateChanged
      option.numDataCTabs=(Integer)((JSpinner) evt.getSource()).getValue();  
    }//GEN-LAST:event_jSpinnerDataCTabsStateChanged

    private void jCheckBoxAllowUtfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAllowUtfActionPerformed
      option.allowUtf=jCheckBoxAllowUtf.isSelected();
    }//GEN-LAST:event_jCheckBoxAllowUtfActionPerformed

    private void jCheckBoxAllowSIDFreqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAllowSIDFreqActionPerformed
      option.useSidFreq=jCheckBoxAllowSIDFreq.isSelected();
      jCheckBoxMarkMemory.setEnabled(option.useSidFreq);
      jCheckBoxSetLabels.setEnabled(option.useSidFreq);
      jCheckBoxSetComment.setEnabled(option.useSidFreq);
    }//GEN-LAST:event_jCheckBoxAllowSIDFreqActionPerformed

    private void jCheckBoxMarkMemoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMarkMemoryActionPerformed
      option.sidFreqMarkMem=jCheckBoxMarkMemory.isSelected();
    }//GEN-LAST:event_jCheckBoxMarkMemoryActionPerformed

    private void jCheckBoxSetLabelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSetLabelsActionPerformed
       option.sidFreqCreateLabel=jCheckBoxSetLabels.isSelected();
    }//GEN-LAST:event_jCheckBoxSetLabelsActionPerformed

    private void jCheckBoxSetCommentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSetCommentActionPerformed
      option.sidFreqCreateComment=jCheckBoxSetComment.isSelected();
    }//GEN-LAST:event_jCheckBoxSetCommentActionPerformed

    private void jCheckBoxNotUsePSIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxNotUsePSIDActionPerformed
      option.notMarkPSID=jCheckBoxNotUsePSID.isSelected();
    }//GEN-LAST:event_jCheckBoxNotUsePSIDActionPerformed

    private void jCheckBoxCreatePSIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxCreatePSIDActionPerformed
      option.createPSID=jCheckBoxCreatePSID.isSelected();
      jCheckBoxNotUsePSID.setEnabled(option.createPSID);
    }//GEN-LAST:event_jCheckBoxCreatePSIDActionPerformed

    private void jRadioButtonStandardItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonStandardItemStateChanged
      option.heather=Option.HEATHER_STANDARD;
    }//GEN-LAST:event_jRadioButtonStandardItemStateChanged

    private void jRadioButtonNoneItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonNoneItemStateChanged
      option.heather=Option.HEATHER_NONE;
    }//GEN-LAST:event_jRadioButtonNoneItemStateChanged

    private void jRadioButtonCustomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCustomItemStateChanged
      option.heather=Option.HEATHER_CUSTOM;
    }//GEN-LAST:event_jRadioButtonCustomItemStateChanged

    private void jCheckBoxRepositionateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxRepositionateActionPerformed
      option.repositionate=jCheckBoxRepositionate.isSelected();
    }//GEN-LAST:event_jCheckBoxRepositionateActionPerformed

    private void jCheckBoxPedanticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxPedanticActionPerformed
      option.pedantic=jCheckBoxPedantic.isSelected();
    }//GEN-LAST:event_jCheckBoxPedanticActionPerformed

    private void jCheckBoxVlPatchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVlPatchItemStateChanged
      option.clickVlPatch=jCheckBoxVlPatch.isSelected();
    }//GEN-LAST:event_jCheckBoxVlPatchItemStateChanged

    private void jSpinnerDataSpacesOpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerDataSpacesOpStateChanged
      int num=(Integer)((JSpinner) evt.getSource()).getValue();
      if (num+option.numTabsOp==0) jSpinnerDataSpacesOp.setValue(1);
      else option.numSpacesOp=num; 
    }//GEN-LAST:event_jSpinnerDataSpacesOpStateChanged

    private void jSpinnerDataTabsOpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerDataTabsOpStateChanged
      option.numTabsOp=(Integer)((JSpinner) evt.getSource()).getValue();
      int num=(Integer)((JSpinner) evt.getSource()).getValue();
      if (num+option.numSpacesOp==0) jSpinnerDataTabsOp.setValue(1);
      else option.numTabsOp=num;  
    }//GEN-LAST:event_jSpinnerDataTabsOpStateChanged

    private void jSpinnerSizePreviewStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerSizePreviewStateChanged
      option.sizePreviewFont=(Integer)((JSpinner) evt.getSource()).getValue();
    }//GEN-LAST:event_jSpinnerSizePreviewStateChanged

    private void jSpinnerSizeSourceStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerSizeSourceStateChanged
      option.sizeSourceFont=(Integer)((JSpinner) evt.getSource()).getValue();
    }//GEN-LAST:event_jSpinnerSizeSourceStateChanged

    private void jCheckBoxAtariKernalRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxAtariKernalRomItemStateChanged
      option.commentAtariKernalRom=jCheckBoxAtariKernalRom.isSelected();
    }//GEN-LAST:event_jCheckBoxAtariKernalRomItemStateChanged

    private void jCheckBoxAtariAnticItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxAtariAnticItemStateChanged
      option.commentAtariAntic=jCheckBoxAtariAntic.isSelected();  
    }//GEN-LAST:event_jCheckBoxAtariAnticItemStateChanged

    private void jCheckBoxAtariPiaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxAtariPiaItemStateChanged
      option.commentAtariPia=jCheckBoxAtariPia.isSelected();  
    }//GEN-LAST:event_jCheckBoxAtariPiaItemStateChanged

    private void jCheckBoxAtariPokeyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxAtariPokeyItemStateChanged
      option.commentAtariPokey=jCheckBoxAtariPokey.isSelected();  
    }//GEN-LAST:event_jCheckBoxAtariPokeyItemStateChanged

    private void jCheckBoxAtariGtiaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxAtariGtiaItemStateChanged
      option.commentAtariGtia=jCheckBoxAtariGtia.isSelected();
    }//GEN-LAST:event_jCheckBoxAtariGtiaItemStateChanged

    private void jCheckBoxAtariCartridgeAItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxAtariCartridgeAItemStateChanged
      option.commentAtariCartridgeA=jCheckBoxAtariCartridgeA.isSelected();
    }//GEN-LAST:event_jCheckBoxAtariCartridgeAItemStateChanged

    private void jCheckBoxAtariCartridgeBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxAtariCartridgeBItemStateChanged
      option.commentAtariCartridgeB=jCheckBoxAtariCartridgeB.isSelected();
    }//GEN-LAST:event_jCheckBoxAtariCartridgeBItemStateChanged

    private void jCheckBoxAtariZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxAtariZeroPageItemStateChanged
      option.commentAtariZeroPage=jCheckBoxAtariZeroPage.isSelected();
    }//GEN-LAST:event_jCheckBoxAtariZeroPageItemStateChanged

    private void jCheckBoxAtariStackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxAtariStackAreaItemStateChanged
      option.commentAtariStackArea=jCheckBoxAtariStackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxAtariStackAreaItemStateChanged

    private void jCheckBoxCreateSAPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxCreateSAPActionPerformed
      option.createSAP=jCheckBoxCreateSAP.isSelected();
      jCheckBoxNotUseSAP.setEnabled(option.createSAP);
    }//GEN-LAST:event_jCheckBoxCreateSAPActionPerformed

    private void jCheckBoxNotUseSAPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxNotUseSAPActionPerformed
      option.notMarkSAP=jCheckBoxNotUseSAP.isSelected();
    }//GEN-LAST:event_jCheckBoxNotUseSAPActionPerformed

    private void jCheckBoxAtari200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxAtari200AreaItemStateChanged
      option.commentAtari_200Area=jCheckBoxAtari200Area.isSelected(); 
    }//GEN-LAST:event_jCheckBoxAtari200AreaItemStateChanged

    private void jCheckBoxAtari300AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxAtari300AreaItemStateChanged
      option.commentAtari_300Area=jCheckBoxAtari300Area.isSelected(); 
    }//GEN-LAST:event_jCheckBoxAtari300AreaItemStateChanged

    private void jCheckBoxAtari400AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxAtari400AreaItemStateChanged
      option.commentAtari_400Area=jCheckBoxAtari400Area.isSelected();
    }//GEN-LAST:event_jCheckBoxAtari400AreaItemStateChanged

    private void jCheckBoxAtari500AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxAtari500AreaItemStateChanged
      option.commentAtari_500Area=jCheckBoxAtari500Area.isSelected();
    }//GEN-LAST:event_jCheckBoxAtari500AreaItemStateChanged

    private void jRadioButtonDotsValueAsciiItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDotsValueAsciiItemStateChanged
      option.dotsType=Option.DOTS_ASCII;
    }//GEN-LAST:event_jRadioButtonDotsValueAsciiItemStateChanged

    private void jRadioButtonDotsValueUtfItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDotsValueUtfItemStateChanged
      option.dotsType=Option.DOTS_UTF16;
    }//GEN-LAST:event_jRadioButtonDotsValueUtfItemStateChanged

  private void jCheckBoxNoUndocumentedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxNoUndocumentedActionPerformed
      option.noUndocumented=jCheckBoxNoUndocumented.isSelected();
  }//GEN-LAST:event_jCheckBoxNoUndocumentedActionPerformed

  private void jCheckBoxChooserIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxChooserIconActionPerformed
      option.chooserPerc=jCheckBoxChooserIcon.isSelected();   
  }//GEN-LAST:event_jCheckBoxChooserIconActionPerformed

  private void jCheckBoxShowMiniatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxShowMiniatureActionPerformed
      option.showMiniature=jCheckBoxShowMiniature.isSelected();
  }//GEN-LAST:event_jCheckBoxShowMiniatureActionPerformed

  private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    close();    
  }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JOptionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JOptionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JOptionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JOptionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JOptionDialog dialog = new JOptionDialog(new javax.swing.JFrame(), true, null, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.ButtonGroup buttonGroupCodeData;
  private javax.swing.ButtonGroup buttonGroupDotsType;
  private javax.swing.ButtonGroup buttonGroupHeather;
  private javax.swing.ButtonGroup buttonGroupIllegalOpcodeStyle;
  private javax.swing.ButtonGroup buttonGroupLanguage;
  private javax.swing.ButtonGroup buttonGroupLook;
  private javax.swing.ButtonGroup buttonGroupMemoryValue;
  private javax.swing.ButtonGroup buttonGroupOpcodeFormatting;
  private javax.swing.ButtonGroup buttonGroupTheme;
  private sw_emulator.swing.JAcmePanel jAcmePanel;
  private javax.swing.JButton jButtonBrowse;
  private javax.swing.JButton jButtonClose;
  private javax.swing.JButton jButtonLoad;
  private javax.swing.JButton jButtonSave;
  private sw_emulator.swing.JCa65Panel jCa65Panel;
  private javax.swing.JCheckBox jCheckBoxAllowSIDFreq;
  private javax.swing.JCheckBox jCheckBoxAllowUtf;
  private javax.swing.JCheckBox jCheckBoxAtari200Area;
  private javax.swing.JCheckBox jCheckBoxAtari300Area;
  private javax.swing.JCheckBox jCheckBoxAtari400Area;
  private javax.swing.JCheckBox jCheckBoxAtari500Area;
  private javax.swing.JCheckBox jCheckBoxAtariAntic;
  private javax.swing.JCheckBox jCheckBoxAtariCartridgeA;
  private javax.swing.JCheckBox jCheckBoxAtariCartridgeB;
  private javax.swing.JCheckBox jCheckBoxAtariGtia;
  private javax.swing.JCheckBox jCheckBoxAtariKernalRom;
  private javax.swing.JCheckBox jCheckBoxAtariPia;
  private javax.swing.JCheckBox jCheckBoxAtariPokey;
  private javax.swing.JCheckBox jCheckBoxAtariStackArea;
  private javax.swing.JCheckBox jCheckBoxAtariZeroPage;
  private javax.swing.JCheckBox jCheckBoxC128AppProgArea;
  private javax.swing.JCheckBox jCheckBoxC128BasicRom;
  private javax.swing.JCheckBox jCheckBoxC128Cia1;
  private javax.swing.JCheckBox jCheckBoxC128Cia2;
  private javax.swing.JCheckBox jCheckBoxC128Color;
  private javax.swing.JCheckBox jCheckBoxC128DMA;
  private javax.swing.JCheckBox jCheckBoxC128KernalRom;
  private javax.swing.JCheckBox jCheckBoxC128MMU;
  private javax.swing.JCheckBox jCheckBoxC128ScreenArea;
  private javax.swing.JCheckBox jCheckBoxC128ScreenMem;
  private javax.swing.JCheckBox jCheckBoxC128Sid;
  private javax.swing.JCheckBox jCheckBoxC128StackArea;
  private javax.swing.JCheckBox jCheckBoxC128UserBasic;
  private javax.swing.JCheckBox jCheckBoxC128VDC;
  private javax.swing.JCheckBox jCheckBoxC128VicII;
  private javax.swing.JCheckBox jCheckBoxC128VideoColor;
  private javax.swing.JCheckBox jCheckBoxC128ZeroPage;
  private javax.swing.JCheckBox jCheckBoxC128_200Area;
  private javax.swing.JCheckBox jCheckBoxC128_300Area;
  private javax.swing.JCheckBox jCheckBoxC1541Buffer0;
  private javax.swing.JCheckBox jCheckBoxC1541Buffer1;
  private javax.swing.JCheckBox jCheckBoxC1541Buffer2;
  private javax.swing.JCheckBox jCheckBoxC1541Buffer3;
  private javax.swing.JCheckBox jCheckBoxC1541Buffer4;
  private javax.swing.JCheckBox jCheckBoxC1541Kernal;
  private javax.swing.JCheckBox jCheckBoxC1541StackArea;
  private javax.swing.JCheckBox jCheckBoxC1541Via1;
  private javax.swing.JCheckBox jCheckBoxC1541Via2;
  private javax.swing.JCheckBox jCheckBoxC1541ZeroPage;
  private javax.swing.JCheckBox jCheckBoxC1541_200Area;
  private javax.swing.JCheckBox jCheckBoxC64BasicRom;
  private javax.swing.JCheckBox jCheckBoxC64Cia1;
  private javax.swing.JCheckBox jCheckBoxC64Cia2;
  private javax.swing.JCheckBox jCheckBoxC64Color;
  private javax.swing.JCheckBox jCheckBoxC64FreeArea;
  private javax.swing.JCheckBox jCheckBoxC64FreeRam;
  private javax.swing.JCheckBox jCheckBoxC64KernalRom;
  private javax.swing.JCheckBox jCheckBoxC64ScreenArea;
  private javax.swing.JCheckBox jCheckBoxC64StackArea;
  private javax.swing.JCheckBox jCheckBoxC64ZeroPage;
  private javax.swing.JCheckBox jCheckBoxC64_200Area;
  private javax.swing.JCheckBox jCheckBoxC64_300Area;
  private javax.swing.JCheckBox jCheckBoxChooserIcon;
  private javax.swing.JCheckBox jCheckBoxCreatePSID;
  private javax.swing.JCheckBox jCheckBoxCreateSAP;
  private javax.swing.JCheckBox jCheckBoxDcErase;
  private javax.swing.JCheckBox jCheckBoxDlErase;
  private javax.swing.JCheckBox jCheckBoxEraseDComm;
  private javax.swing.JCheckBox jCheckBoxErasePlus;
  private javax.swing.JCheckBox jCheckBoxForceCompilation;
  private javax.swing.JCheckBox jCheckBoxLabel;
  private javax.swing.JCheckBox jCheckBoxMarkMemory;
  private javax.swing.JCheckBox jCheckBoxNoUndocumented;
  private javax.swing.JCheckBox jCheckBoxNotUsePSID;
  private javax.swing.JCheckBox jCheckBoxNotUseSAP;
  private javax.swing.JCheckBox jCheckBoxOpcodeFormattingPreview;
  private javax.swing.JCheckBox jCheckBoxOpcodeFormattingSource;
  private javax.swing.JCheckBox jCheckBoxPedantic;
  private javax.swing.JCheckBox jCheckBoxPlus4Acia;
  private javax.swing.JCheckBox jCheckBoxPlus4BasicExt;
  private javax.swing.JCheckBox jCheckBoxPlus4BasicRamN;
  private javax.swing.JCheckBox jCheckBoxPlus4BasicRamP;
  private javax.swing.JCheckBox jCheckBoxPlus4BasicRom;
  private javax.swing.JCheckBox jCheckBoxPlus4Caracter;
  private javax.swing.JCheckBox jCheckBoxPlus4ColorArea;
  private javax.swing.JCheckBox jCheckBoxPlus4ColorBitmap;
  private javax.swing.JCheckBox jCheckBoxPlus4GraphicData;
  private javax.swing.JCheckBox jCheckBoxPlus4Kernal;
  private javax.swing.JCheckBox jCheckBoxPlus4Luminance;
  private javax.swing.JCheckBox jCheckBoxPlus4StackArea;
  private javax.swing.JCheckBox jCheckBoxPlus4Ted;
  private javax.swing.JCheckBox jCheckBoxPlus4VideoArea;
  private javax.swing.JCheckBox jCheckBoxPlus4ZeroPage;
  private javax.swing.JCheckBox jCheckBoxPlus4_200Area;
  private javax.swing.JCheckBox jCheckBoxPlus4_300Area;
  private javax.swing.JCheckBox jCheckBoxPlus4_400Area;
  private javax.swing.JCheckBox jCheckBoxPlus4_500Area;
  private javax.swing.JCheckBox jCheckBoxPlus4_600Area;
  private javax.swing.JCheckBox jCheckBoxPlus4_6529B_1;
  private javax.swing.JCheckBox jCheckBoxPlus4_6529B_2;
  private javax.swing.JCheckBox jCheckBoxPlus4_700Area;
  private javax.swing.JCheckBox jCheckBoxRepositionate;
  private javax.swing.JCheckBox jCheckBoxSetComment;
  private javax.swing.JCheckBox jCheckBoxSetLabels;
  private javax.swing.JCheckBox jCheckBoxShowMiniature;
  private javax.swing.JCheckBox jCheckBoxUbEdit;
  private javax.swing.JCheckBox jCheckBoxUcEdit;
  private javax.swing.JCheckBox jCheckBoxUlEdit;
  private javax.swing.JCheckBox jCheckBoxUndefinedCode;
  private javax.swing.JCheckBox jCheckBoxVic20BasicRom;
  private javax.swing.JCheckBox jCheckBoxVic20Block2;
  private javax.swing.JCheckBox jCheckBoxVic20Block3;
  private javax.swing.JCheckBox jCheckBoxVic20Block4;
  private javax.swing.JCheckBox jCheckBoxVic20Character;
  private javax.swing.JCheckBox jCheckBoxVic20Color;
  private javax.swing.JCheckBox jCheckBoxVic20KernalRom;
  private javax.swing.JCheckBox jCheckBoxVic20Screen;
  private javax.swing.JCheckBox jCheckBoxVic20StackArea;
  private javax.swing.JCheckBox jCheckBoxVic20UserBasic;
  private javax.swing.JCheckBox jCheckBoxVic20Via1;
  private javax.swing.JCheckBox jCheckBoxVic20Via2;
  private javax.swing.JCheckBox jCheckBoxVic20Vic;
  private javax.swing.JCheckBox jCheckBoxVic20ZeroPage;
  private javax.swing.JCheckBox jCheckBoxVic20_200Area;
  private javax.swing.JCheckBox jCheckBoxVic20_300Area;
  private javax.swing.JCheckBox jCheckBoxVic20_400Area;
  private javax.swing.JCheckBox jCheckBoxVic20_8kExp1;
  private javax.swing.JCheckBox jCheckBoxVic20_8kExp2;
  private javax.swing.JCheckBox jCheckBoxVic20_8kExp3;
  private javax.swing.JCheckBox jCheckBoxVlPatch;
  private javax.swing.JCheckBox jCheckC64BoxSid;
  private javax.swing.JCheckBox jCheckC64BoxVicII;
  private javax.swing.JComboBox<String> jComboBoxAssembler;
  private sw_emulator.swing.JDasmPanel jDasmPanel;
  private sw_emulator.swing.JGlassPanel jGlassPanel;
  private sw_emulator.swing.JKickPanel jKickPanel;
  private javax.swing.JLabel jLabelAggregate;
  private javax.swing.JLabel jLabelArrow;
  private javax.swing.JLabel jLabelAutoComment;
  private javax.swing.JLabel jLabelBracket;
  private javax.swing.JLabel jLabelDataCSep;
  private javax.swing.JLabel jLabelDataCSpace;
  private javax.swing.JLabel jLabelDataCTabs;
  private javax.swing.JLabel jLabelDataSep;
  private javax.swing.JLabel jLabelDataSepOp;
  private javax.swing.JLabel jLabelDataSpace;
  private javax.swing.JLabel jLabelDataSpaceOp;
  private javax.swing.JLabel jLabelDataTabs;
  private javax.swing.JLabel jLabelDataTabsOp;
  private javax.swing.JLabel jLabelDotsType;
  private javax.swing.JLabel jLabelFlatLaf;
  private javax.swing.JLabel jLabelFontSize;
  private javax.swing.JLabel jLabelFontSizePreview;
  private javax.swing.JLabel jLabelFontSizeSource;
  private javax.swing.JLabel jLabelHeather;
  private javax.swing.JLabel jLabelIllegalOpcodeStyle;
  private javax.swing.JLabel jLabelInstrCSep;
  private javax.swing.JLabel jLabelInstrCSpace;
  private javax.swing.JLabel jLabelInstrCTabs;
  private javax.swing.JLabel jLabelInstrSep;
  private javax.swing.JLabel jLabelInstrSpace;
  private javax.swing.JLabel jLabelInstrTabs;
  private javax.swing.JLabel jLabelLanguage;
  private javax.swing.JLabel jLabelLanguage1;
  private javax.swing.JLabel jLabelLook;
  private javax.swing.JLabel jLabelMaxAddress;
  private javax.swing.JLabel jLabelMaxByte;
  private javax.swing.JLabel jLabelMaxLength;
  private javax.swing.JLabel jLabelMaxLong;
  private javax.swing.JLabel jLabelMaxStackWord;
  private javax.swing.JLabel jLabelMaxSwapped;
  private javax.swing.JLabel jLabelMaxText;
  private javax.swing.JLabel jLabelMaxTribyte;
  private javax.swing.JLabel jLabelMaxWord;
  private javax.swing.JLabel jLabelPSIDinitsong;
  private javax.swing.JLabel jLabelPSIDplaysound;
  private javax.swing.JLabel jLabelSIDfreqHi;
  private javax.swing.JLabel jLabelSIDfreqLo;
  private javax.swing.JLabel jLabelTheme;
  private javax.swing.JLabel jLabelTmpPath;
  private javax.swing.JLabel jLabelautocomment;
  private javax.swing.JList<String> jListLaf;
  private javax.swing.JPanel jPanelAtariComm;
  private javax.swing.JPanel jPanelC128Comm;
  private javax.swing.JPanel jPanelC1541Comm;
  private javax.swing.JPanel jPanelC64Comm;
  private javax.swing.JPanel jPanelComment;
  private javax.swing.JPanel jPanelDisassembler;
  private javax.swing.JPanel jPanelDn;
  private javax.swing.JPanel jPanelLook;
  private javax.swing.JPanel jPanelOption;
  private javax.swing.JPanel jPanelPlus4Comm;
  private javax.swing.JPanel jPanelPreview;
  private javax.swing.JPanel jPanelVic20Comm;
  private javax.swing.JRadioButton jRadioButtonAqua;
  private javax.swing.JRadioButton jRadioButtonCharcoal;
  private javax.swing.JRadioButton jRadioButtonCustom;
  private javax.swing.JRadioButton jRadioButtonDotsValueAscii;
  private javax.swing.JRadioButton jRadioButtonDotsValueUtf;
  private javax.swing.JRadioButton jRadioButtonEmerald;
  private javax.swing.JRadioButton jRadioButtonHighContrast;
  private javax.swing.JRadioButton jRadioButtonLangEnglish;
  private javax.swing.JRadioButton jRadioButtonLangItalian;
  private javax.swing.JRadioButton jRadioButtonLookCWin;
  private javax.swing.JRadioButton jRadioButtonLookGtk;
  private javax.swing.JRadioButton jRadioButtonLookJava;
  private javax.swing.JRadioButton jRadioButtonLookMac;
  private javax.swing.JRadioButton jRadioButtonLookMetal;
  private javax.swing.JRadioButton jRadioButtonLookNimbus;
  private javax.swing.JRadioButton jRadioButtonLookSynth;
  private javax.swing.JRadioButton jRadioButtonLookWin;
  private javax.swing.JRadioButton jRadioButtonMemoryValueChar;
  private javax.swing.JRadioButton jRadioButtonMemoryValueHex;
  private javax.swing.JRadioButton jRadioButtonNone;
  private javax.swing.JRadioButton jRadioButtonOcean;
  private javax.swing.JRadioButton jRadioButtonRuby;
  private javax.swing.JRadioButton jRadioButtonStandard;
  private javax.swing.JRadioButton jRadioButtonSteel;
  private javax.swing.JRadioButton jRadioButtonStyle1;
  private javax.swing.JRadioButton jRadioButtonStyle2;
  private javax.swing.JRadioButton jRadioButtonStyle3;
  private javax.swing.JScrollPane jScrollPaneAcme;
  private javax.swing.JScrollPane jScrollPaneCa65;
  private javax.swing.JScrollPane jScrollPaneDasm;
  private javax.swing.JScrollPane jScrollPaneGlass;
  private javax.swing.JScrollPane jScrollPaneHeather;
  private javax.swing.JScrollPane jScrollPaneKickAssembler;
  private javax.swing.JScrollPane jScrollPaneList;
  private javax.swing.JScrollPane jScrollPanePreview;
  private javax.swing.JScrollPane jScrollPaneTMPx;
  private javax.swing.JScrollPane jScrollPaneTass64;
  private javax.swing.JSeparator jSeparator1;
  private javax.swing.JSeparator jSeparator2;
  private javax.swing.JSeparator jSeparatorRadioButtons;
  private javax.swing.JSeparator jSeparatorSourceHeder;
  private javax.swing.JSpinner jSpinnerDataCSpaces;
  private javax.swing.JSpinner jSpinnerDataCTabs;
  private javax.swing.JSpinner jSpinnerDataSpaces;
  private javax.swing.JSpinner jSpinnerDataSpacesOp;
  private javax.swing.JSpinner jSpinnerDataTabs;
  private javax.swing.JSpinner jSpinnerDataTabsOp;
  private javax.swing.JSpinner jSpinnerInstrCSpaces;
  private javax.swing.JSpinner jSpinnerInstrCTabs;
  private javax.swing.JSpinner jSpinnerInstrSpaces;
  private javax.swing.JSpinner jSpinnerInstrTabs;
  private javax.swing.JSpinner jSpinnerMaxAddressAggregate;
  private javax.swing.JSpinner jSpinnerMaxByteAggregate;
  private javax.swing.JSpinner jSpinnerMaxLength;
  private javax.swing.JSpinner jSpinnerMaxLongAggregate;
  private javax.swing.JSpinner jSpinnerMaxStackWordAggregate;
  private javax.swing.JSpinner jSpinnerMaxSwappedAggregate;
  private javax.swing.JSpinner jSpinnerMaxTextAggregate;
  private javax.swing.JSpinner jSpinnerMaxTribyteAggregate;
  private javax.swing.JSpinner jSpinnerMaxWordAggregate;
  private javax.swing.JSpinner jSpinnerSizePreview;
  private javax.swing.JSpinner jSpinnerSizeSource;
  private javax.swing.JTabbedPane jTabbedPaneAssembler;
  private javax.swing.JTabbedPane jTabbedPaneComm;
  private javax.swing.JTabbedPane jTabbedPaneOption;
  private sw_emulator.swing.JTass64Panel jTass64Panel;
  private javax.swing.JTextArea jTextAreaHeather;
  private javax.swing.JTextField jTextFieldInitSongs;
  private javax.swing.JTextField jTextFieldPlaySound;
  private javax.swing.JTextField jTextFieldSidFreqHi;
  private javax.swing.JTextField jTextFieldSidFreqLo;
  private javax.swing.JTextField jTextFieldTmpPath;
  private sw_emulator.swing.JTmpxPanel jTmpxPanel;
  // End of variables declaration//GEN-END:variables

    /**
     * Use the passed option container 
     * 
     * @param option the option to use
     */
    public void useOption(Option option) {
      this.option=option;
      
      jDasmPanel.setUp(option);
      jTmpxPanel.setUp(option);
      jCa65Panel.setUp(option);
      jAcmePanel.setUp(option); 
      jKickPanel.setUp(option); 
      jTass64Panel.setUp(option); 
      jGlassPanel.setUp(option); 
      applyOption();
    }

    /**
     * Apply option to graphical container
     */
    private void applyOption() {
      jRadioButtonLangEnglish.setSelected(option.commentLanguage==C64Dasm.LANG_ENGLISH);
      jRadioButtonLangItalian.setSelected(option.commentLanguage==C64Dasm.LANG_ITALIAN);
      jRadioButtonStyle1.setSelected((option.illegalOpcodeMode==M6510Dasm.MODE1));
      jRadioButtonStyle2.setSelected((option.illegalOpcodeMode==M6510Dasm.MODE2));
      jRadioButtonStyle3.setSelected((option.illegalOpcodeMode==M6510Dasm.MODE3));
      jRadioButtonMemoryValueHex.setSelected(option.memoryValue==DataTableModelMemory.MOD_HEX);
      jRadioButtonMemoryValueChar.setSelected(option.memoryValue==DataTableModelMemory.MOD_CHAR);
      jCheckBoxOpcodeFormattingPreview.setSelected(option.opcodeUpperCasePreview);      
      jCheckBoxOpcodeFormattingSource.setSelected(option.opcodeUpperCaseSource);      
      jCheckBoxUndefinedCode.setSelected(option.useAsCode);
      jCheckBoxEraseDComm.setSelected(option.eraseDComm);
      jCheckBoxErasePlus.setSelected(option.erasePlus);
      jTextFieldInitSongs.setText(option.psidInitSongsLabel);
      jTextFieldPlaySound.setText(option.psidPlaySoundsLabel);
      jTextFieldSidFreqLo.setText(option.sidFreqLoLabel);
      jTextFieldSidFreqHi.setText(option.sidFreqHiLabel);
      jSpinnerMaxLength.setValue(option.maxLabelLength);
      jSpinnerMaxByteAggregate.setValue(option.maxByteAggregate);
      jSpinnerMaxTribyteAggregate.setValue(option.maxTribyteAggregate);
      jSpinnerMaxWordAggregate.setValue(option.maxWordAggregate);
      jSpinnerMaxLongAggregate.setValue(option.maxLongAggregate);
      jSpinnerMaxSwappedAggregate.setValue(option.maxSwappedAggregate);
      jSpinnerMaxTextAggregate.setValue(option.maxTextAggregate);
      jSpinnerMaxAddressAggregate.setValue(option.maxAddressAggregate);
      jSpinnerMaxStackWordAggregate.setValue(option.maxStackWordAggregate);
      jSpinnerInstrSpaces.setValue(option.numInstrSpaces);
      jSpinnerInstrTabs.setValue(option.numInstrTabs);
      jSpinnerDataSpaces.setValue(option.numDataSpaces);
      jSpinnerDataTabs.setValue(option.numDataTabs);
      jSpinnerInstrCSpaces.setValue(option.numInstrCSpaces);
      jSpinnerInstrCTabs.setValue(option.numInstrCTabs);
      jSpinnerDataCSpaces.setValue(option.numDataCSpaces);
      jSpinnerDataCTabs.setValue(option.numDataCTabs);
      jSpinnerDataSpacesOp.setValue(option.numSpacesOp);
      jSpinnerDataTabsOp.setValue(option.numTabsOp);
      jSpinnerSizePreview.setValue(option.sizePreviewFont);
      jSpinnerSizeSource.setValue(option.sizeSourceFont);
      jCheckBoxLabel.setSelected(option.labelOnSepLine);
      jTextFieldTmpPath.setText(option.tmpPath);
      jCheckBoxDcErase.setSelected(option.clickDcErase);
      jCheckBoxDlErase.setSelected(option.clickDlErase);
      jCheckBoxUbEdit.setSelected(option.clickUbEdit);
      jCheckBoxUcEdit.setSelected(option.clickUcEdit);
      jCheckBoxUlEdit.setSelected(option.clickUlEdit);
      jCheckBoxVlPatch.setSelected(option.clickVlPatch);
      jCheckBoxForceCompilation.setSelected(option.forceCompilation);
      jCheckBoxAllowUtf.setSelected(option.allowUtf);
      jCheckBoxAllowSIDFreq.setSelected(option.useSidFreq);
      jCheckBoxMarkMemory.setSelected(option.sidFreqMarkMem);
      jCheckBoxSetLabels.setSelected(option.sidFreqCreateLabel);
      jCheckBoxSetComment.setSelected(option.sidFreqCreateComment);
      jCheckBoxMarkMemory.setEnabled(option.useSidFreq);
      jCheckBoxSetLabels.setEnabled(option.useSidFreq);
      jCheckBoxSetComment.setEnabled(option.useSidFreq);
      jCheckBoxNoUndocumented.setSelected(option.noUndocumented);
      jCheckBoxChooserIcon.setSelected(option.chooserPerc);
      
      jCheckBoxNotUsePSID.setSelected(option.notMarkPSID);
      jCheckBoxCreatePSID.setSelected(option.createPSID);
      jCheckBoxNotUsePSID.setEnabled(option.createPSID);
      jCheckBoxNotUseSAP.setSelected(option.notMarkSAP);
      jCheckBoxCreateSAP.setSelected(option.createSAP);
      jCheckBoxNotUseSAP.setEnabled(option.createSAP);
      
      jCheckBoxRepositionate.setSelected(option.repositionate);
      jCheckBoxPedantic.setSelected(option.pedantic);
      jCheckBoxShowMiniature.setSelected(option.showMiniature);
      
      switch (option.heather) {
          case Option.HEATHER_STANDARD:
            jRadioButtonStandard.setSelected(true);
            break;
          case Option.HEATHER_NONE:
            jRadioButtonNone.setSelected(true);
            break;
          case Option.HEATHER_CUSTOM:
            jRadioButtonCustom.setSelected(true);
            break;  
      }
      jTextAreaHeather.setText(option.custom);
      
      actualLEF=option.getLafName();
      actualTheme=option.getMethalTheme();
      actualLaf=option.getFlatLaf();
      
      switch (option.dotsType) {
          case Option.DOTS_ASCII:
            jRadioButtonDotsValueAscii.setSelected(true);
            break;
          case Option.DOTS_UTF16:
            jRadioButtonDotsValueUtf.setSelected(true);
            break;          
      }
      
      // select the right element
      String name;        
      for (int i=0; i<listModel.size(); i++) {        
        name=(String)listModel.elementAt(i);
        if (name.equals(actualLaf)) jListLaf.setSelectedIndex(i);
      }  
      
      goFlat=true;
      
      // show the look and feel radio selected
      String lafName=option.getLafName();
      if (lafName.equals(Option.LAF_GTK)) jRadioButtonLookGtk.setSelected(true);
      if (lafName.equals(Option.LAF_MAC)) jRadioButtonLookMac.setSelected(true);
      if (lafName.equals(Option.LAF_METAL)) jRadioButtonLookMetal.setSelected(true);
      if (lafName.equals(Option.LAF_MOTIF)) jRadioButtonLookJava.setSelected(true);    
      if (lafName.equals(Option.LAF_WINDOWS)) jRadioButtonLookWin.setSelected(true);
      if (lafName.equals(Option.LAF_CWINDOWS)) jRadioButtonLookCWin.setSelected(true);
      if (lafName.equals(Option.LAF_NIMBUS)) jRadioButtonLookNimbus.setSelected(true);
      if (lafName.equals(Option.LAF_SYNTH)) {
        jRadioButtonLookSynth.setSelected(true);
        jListLaf.setEnabled(true);        
      }
      
      selectedTheme();
      
      //assembler
      jComboBoxAssembler.setSelectedItem(null);
      jComboBoxAssembler.setSelectedItem(option.assembler.getName());      

      
      jDasmPanel.applyOptionDasm();
      jTmpxPanel.applyOptionTmpx();
      jCa65Panel.applyOptionC65();
      jAcmePanel.applyOptionAcme();
      jKickPanel.applyOptionKickAssembler();
      jTass64Panel.applyOptionTass64();
      jGlassPanel.applyOptionGlass();
      
      applyCommentsC64();
      applyCommentsC1541();
      applyCommentsPlus4();
      applyCommentsVic20();      
      applyCommentsC128();  
      applyCommentsAtari();  
    }
    
  /**
   * Disable the themes buttons
   */
  private void disableTheme() {
    jRadioButtonOcean.setEnabled(false);
    jRadioButtonSteel.setEnabled(false);
    jRadioButtonAqua.setEnabled(false);
    jRadioButtonCharcoal.setEnabled(false);
    jRadioButtonHighContrast.setEnabled(false);
    jRadioButtonEmerald.setEnabled(false);
    jRadioButtonRuby.setEnabled(false);
  }
  
  /**
   * Enable the themes buttons
   */
  private void enableTheme() {
    jRadioButtonOcean.setEnabled(true);
    jRadioButtonSteel.setEnabled(true);
    jRadioButtonAqua.setEnabled(true);
    jRadioButtonCharcoal.setEnabled(true);
    jRadioButtonHighContrast.setEnabled(true);
    jRadioButtonEmerald.setEnabled(true);
    jRadioButtonRuby.setEnabled(true);   
  }  
  
  /**
   * Select the theme in radio button
   */
  public void selectedTheme() {
    switch (option.getTheme()) {
      case Option.THEME_OCEAN:
        jRadioButtonOcean.setSelected(true); 
        break;
      case Option.THEME_STEEL:
        jRadioButtonSteel.setSelected(true);    
        break;
      case Option.THEME_AQUA:
        jRadioButtonAqua.setSelected(true);   
        break;
      case Option.THEME_CHARCOAL:
        jRadioButtonCharcoal.setSelected(true);   
        break;    
      case Option.THEME_CONTRAST:
        jRadioButtonHighContrast.setSelected(true);   
        break;       
      case Option.THEME_EMERALD:
        jRadioButtonEmerald.setSelected(true);   
        break;      
      case Option.THEME_RUBY:
        jRadioButtonRuby.setSelected(true);   
        break;         
    }      
  } 

  /**
   * Apply comments for C64
   */
  private void applyCommentsC64() {
    jCheckBoxC64ZeroPage.setSelected(option.commentC64ZeroPage);
    jCheckBoxC64StackArea.setSelected(option.commentC64StackArea);
    jCheckBoxC64_200Area.setSelected(option.commentC64_200Area);
    jCheckBoxC64_300Area.setSelected(option.commentC64_300Area);
    jCheckBoxC64FreeArea.setSelected(option.commentC64BasicFreeArea);
    jCheckBoxC64BasicRom.setSelected(option.commentC64BasicRom);
    jCheckBoxC64FreeRam.setSelected(option.commentC64FreeRam);
    jCheckC64BoxVicII.setSelected(option.commentC64VicII);
    jCheckC64BoxSid.setSelected(option.commentC64Sid);
    jCheckBoxC64Color.setSelected(option.commentC64ColorArea);
    jCheckBoxC64Cia1.setSelected(option.commentC64Cia1);
    jCheckBoxC64Cia2.setSelected(option.commentC64Cia2);
    jCheckBoxC64KernalRom.setSelected(option.commentC64ScreenArea);
    jCheckBoxC64ScreenArea.setSelected(option.commentC64ScreenArea);
  }


  /**
   * Apply comments for C1541
   */  
  private void applyCommentsC1541() {
    jCheckBoxC1541ZeroPage.setSelected(option.commentC1541ZeroPage);
    jCheckBoxC1541StackArea.setSelected(option.commentC1541StackArea);
    jCheckBoxC1541_200Area.setSelected(option.commentC1541_200Area);
    jCheckBoxC1541Via1.setSelected(option.commentC1541Via1);
    jCheckBoxC1541Via2.setSelected(option.commentC1541Via2);
    jCheckBoxC1541Kernal.setSelected(option.commentC1541Kernal);
    jCheckBoxC1541Buffer0.setSelected(option.commentC1541Buffer0);
    jCheckBoxC1541Buffer1.setSelected(option.commentC1541Buffer1);
    jCheckBoxC1541Buffer2.setSelected(option.commentC1541Buffer2);
    jCheckBoxC1541Buffer3.setSelected(option.commentC1541Buffer3);
    jCheckBoxC1541Buffer4.setSelected(option.commentC1541Buffer4);
  }

  /**
   * Apply comments Plus4
   */
  private void applyCommentsPlus4() {
    jCheckBoxPlus4Acia.setSelected(option.commentPlus4Acia);
    jCheckBoxPlus4BasicExt.setSelected(option.commentPlus4BasicExt);
    jCheckBoxPlus4BasicRamN.setSelected(option.commentPlus4BasicRamN);
    jCheckBoxPlus4BasicRamP.setSelected(option.commentPlus4BasicRamP);
    jCheckBoxPlus4BasicRom.setSelected(option.commentPlus4BasicRom);
    jCheckBoxPlus4Caracter.setSelected(option.commentPlus4Caracter);
    jCheckBoxPlus4ColorArea.setSelected(option.commentPlus4ColorArea);
    jCheckBoxPlus4ColorBitmap.setSelected(option.commentPlus4ColorBitmap);
    jCheckBoxPlus4GraphicData.setSelected(option.commentPlus4GraphicData);
    jCheckBoxPlus4Kernal.setSelected(option.commentPlus4Kernal);
    jCheckBoxPlus4Luminance.setSelected(option.commentPlus4Luminance);
    jCheckBoxPlus4StackArea.setSelected(option.commentPlus4StackArea);
    jCheckBoxPlus4Ted.setSelected(option.commentPlus4Ted);
    jCheckBoxPlus4VideoArea.setSelected(option.commentPlus4VideoArea);
    jCheckBoxPlus4ZeroPage.setSelected(option.commentPlus4ZeroPage);
    jCheckBoxPlus4_200Area.setSelected(option.commentPlus4_200Area);
    jCheckBoxPlus4_300Area.setSelected(option.commentPlus4_300Area);
    jCheckBoxPlus4_400Area.setSelected(option.commentPlus4_400Area);
    jCheckBoxPlus4_500Area.setSelected(option.commentPlus4_500Area);
    jCheckBoxPlus4_600Area.setSelected(option.commentPlus4_600Area);
    jCheckBoxPlus4_6529B_1.setSelected(option.commentPlus4_6529B_1);
    jCheckBoxPlus4_6529B_2.setSelected(option.commentPlus4_6529B_2);
    jCheckBoxPlus4_700Area.setSelected(option.commentPlus4_700Area); 
  }

  /**
   * Apply comemnts for Vic20
   */
  private void applyCommentsVic20() {
    jCheckBoxVic20BasicRom.setSelected(option.commentVic20BasicRom);
    jCheckBoxVic20Block2.setSelected(option.commentVic20Block2);
    jCheckBoxVic20Block3.setSelected(option.commentVic20Block3);
    jCheckBoxVic20Block4.setSelected(option.commentVic20Block4);
    jCheckBoxVic20Character.setSelected(option.commentVic20Character);
    jCheckBoxVic20Color.setSelected(option.commentVic20Color);
    jCheckBoxVic20KernalRom.setSelected(option.commentVic20KernalRom);
    jCheckBoxVic20Screen.setSelected(option.commentVic20Screen);
    jCheckBoxVic20StackArea.setSelected(option.commentVic20StackArea);
    jCheckBoxVic20UserBasic.setSelected(option.commentVic20UserBasic);
    jCheckBoxVic20Via1.setSelected(option.commentVic20Via1);
    jCheckBoxVic20Via2.setSelected(option.commentVic20Via2);
    jCheckBoxVic20Vic.setSelected(option.commentVic20Vic);
    jCheckBoxVic20ZeroPage.setSelected(option.commentVic20ZeroPage);
    jCheckBoxVic20_200Area.setSelected(option.commentVic20_200Area);
    jCheckBoxVic20_300Area.setSelected(option.commentVic20_300Area);
    jCheckBoxVic20_400Area.setSelected(option.commentVic20_400Area);
    jCheckBoxVic20_8kExp1.setSelected(option.commentVic20_8kExp1);
    jCheckBoxVic20_8kExp2.setSelected(option.commentVic20_8kExp2);
    jCheckBoxVic20_8kExp3.setSelected(option.commentVic20_8kExp3);
  }

  /**
   * Apply comments for C128
   */
  private void applyCommentsC128() {
    jCheckBoxC128ZeroPage.setSelected(option.commentC128ZeroPage);
    jCheckBoxC128StackArea.setSelected(option.commentC128StackArea);
    jCheckBoxC128_200Area.setSelected(option.commentC128_200Area);
    jCheckBoxC128_300Area.setSelected(option.commentC128_300Area);
    jCheckBoxC128ScreenArea.setSelected(option.commentC128ScreenArea);    
    jCheckBoxC128AppProgArea.setSelected(option.commentC128AppProgArea);   
    jCheckBoxC128BasicRom.setSelected(option.commentC128BasicRom);  
    jCheckBoxC128Cia1.setSelected(option.commentC128Cia1);  
    jCheckBoxC128Cia2.setSelected(option.commentC128Cia2);  
    jCheckBoxC128Color.setSelected(option.commentC128Color);  
    jCheckBoxC128DMA.setSelected(option.commentC128DMA);  
    jCheckBoxC128KernalRom.setSelected(option.commentC128KernalRom);  
    jCheckBoxC128MMU.setSelected(option.commentC128MMU);   
    jCheckBoxC128ScreenMem.setSelected(option.commentC128ScreenMem);  
    jCheckBoxC128UserBasic.setSelected(option.commentC128UserBasic);  
    jCheckBoxC128VDC.setSelected(option.commentC128VDC);   
    jCheckBoxC128VideoColor.setSelected(option.commentC128VideoColor);  
    jCheckBoxC128VicII.setSelected(option.commentC128VicII);
    jCheckBoxC128Sid.setSelected(option.commentC128Sid);
  }    
  
  /**
   * Apply comments for Atari
   */
  private void applyCommentsAtari() {
    jCheckBoxAtariZeroPage.setSelected(option.commentAtariZeroPage);
    jCheckBoxAtariStackArea.setSelected(option.commentAtariStackArea);
    jCheckBoxAtari200Area.setSelected(option.commentAtari_200Area);
    jCheckBoxAtari300Area.setSelected(option.commentAtari_300Area);
    jCheckBoxAtari500Area.setSelected(option.commentAtari_400Area);
    jCheckBoxAtari500Area.setSelected(option.commentAtari_500Area);
    jCheckBoxAtariCartridgeB.setSelected(option.commentAtariCartridgeB);
    jCheckBoxAtariCartridgeA.setSelected(option.commentAtariCartridgeA);    
    jCheckBoxAtariGtia.setSelected(option.commentAtariGtia);
    jCheckBoxAtariPokey.setSelected(option.commentAtariPokey);
    jCheckBoxAtariPia.setSelected(option.commentAtariPia);
    jCheckBoxAtariAntic.setSelected(option.commentAtariAntic);
    jCheckBoxAtariKernalRom.setSelected(option.commentAtariKernalRom);
  }
  
  
  /**
   * Close the dialog
   */
  private void close() {
   option.custom=jTextAreaHeather.getText();
      SwingUtilities.invokeLater(new Runnable() {
        public void run() {
          model.fireTableDataChanged();  
          if (option.showMiniature) {
            frame.rSyntaxTextAreaSourceMin.setText(frame.disassembly.source);
            frame.rSyntaxTextAreaDisMin.setText(frame.disassembly.disassembly);
          } else {
            frame.rSyntaxTextAreaSourceMin.setText("");
            frame.rSyntaxTextAreaDisMin.setText("");
          }
          frame.jScrollPaneLeftMin.setVisible(option.showMiniature);
          frame.jScrollPaneRightMin.setVisible(option.showMiniature);
          frame.pack();
        }
      });
       
      setVisible(false);
  }
}
