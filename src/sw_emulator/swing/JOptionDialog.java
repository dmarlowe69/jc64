/**
 * @(#)JPanelOption.java 2019/12/01
 *
 * ICE Team free software group
 *
 * This file is part of C64 Java Software Emulator.
 * See README for copyright notice.
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 *  02111-1307  USA.
 */
package sw_emulator.swing;

import com.formdev.flatlaf.FlatLaf;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.plaf.metal.MetalTheme;
import javax.swing.UIManager;
import sw_emulator.software.Assembler;
import sw_emulator.software.Assembler.Name;

import sw_emulator.software.cpu.M6510Dasm;
import sw_emulator.software.machine.C64Dasm;
import sw_emulator.swing.main.FileManager;
import sw_emulator.swing.main.Option;

/**
 * A dialog for option
 * 
 * @author ice
 */
public class JOptionDialog extends javax.swing.JDialog {
  /** Option to use */
  Option option=new Option();
    
  /** Actual selected look and feel */
  String actualLEF=option.getLafName();
  
  /** Actual metal theme to use */
  MetalTheme actualTheme=option.getMethalTheme();
  
  /** Actual flat laf theme */
  String actualLaf=option.getFlatLaf();
  
  /** Default list model for laf look & feel */
  DefaultListModel<String> listModel=new DefaultListModel();
  
  /** file chooser for tmp dierctory */
  JFileChooser chooserDir=new JFileChooser();   
  
  /** True if event can be processed */
  boolean goFlat=false;
    
    
    /**
     * Creates new form JOptionDialog
     */
    public JOptionDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        for (Name val: Assembler.Name.values()) {
          jComboBoxAssembler.addItem(val.getName());
        }
        Shared.framesList.add(this);
        
        chooserDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        platformeEnable();
    }
    
  /**
   * Enable some chooses based onto platforme specific implementation
   */
  private void platformeEnable() {
    String name;  
      
    UIManager.LookAndFeelInfo[] info=UIManager.getInstalledLookAndFeels();
    // scan all the look and feels 
    for (int i=0; i<info.length; i++) {
      name=info[i].getClassName();  
      if (name.equals(Option.LAF_MAC)) jRadioButtonLookMac.setEnabled(true);
      if (name.equals(Option.LAF_METAL)) jRadioButtonLookMetal.setEnabled(true);
      if (name.equals(Option.LAF_MOTIF)) jRadioButtonLookJava.setEnabled(true);
      if (name.equals(Option.LAF_WINDOWS)) jRadioButtonLookWin.setEnabled(true);
      if (name.equals(Option.LAF_CWINDOWS)) jRadioButtonLookCWin.setEnabled(true);
      if (name.equals(Option.LAF_GTK)) jRadioButtonLookGtk.setEnabled(true);
      if (name.equals(Option.LAF_NIMBUS)) jRadioButtonLookNimbus.setEnabled(true);
    }
    
    // scan all flat laf
    for (FlatLaf laf: Option.LAF_SYNTH_FLAT) {
      listModel.addElement(laf.getName());
    }
  }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupOpcodeFormatting = new javax.swing.ButtonGroup();
        buttonGroupIllegalOpcodeStyle = new javax.swing.ButtonGroup();
        buttonGroupLanguage = new javax.swing.ButtonGroup();
        buttonGroupCodeData = new javax.swing.ButtonGroup();
        buttonGroupLook = new javax.swing.ButtonGroup();
        buttonGroupTheme = new javax.swing.ButtonGroup();
        buttonGroupDasmLabel = new javax.swing.ButtonGroup();
        buttonGroupDasmByte = new javax.swing.ButtonGroup();
        buttonGroupTmpxLabel = new javax.swing.ButtonGroup();
        buttonGroupTmpxByte = new javax.swing.ButtonGroup();
        buttonGroupCa65Label = new javax.swing.ButtonGroup();
        buttonGroupCa65Byte = new javax.swing.ButtonGroup();
        buttonGroupTmpxWord = new javax.swing.ButtonGroup();
        buttonGroupC65Word = new javax.swing.ButtonGroup();
        buttonGroupAcmeLabel = new javax.swing.ButtonGroup();
        buttonGroupAcmeByte = new javax.swing.ButtonGroup();
        buttonGroupDasmWord = new javax.swing.ButtonGroup();
        buttonGroupAcmeWord = new javax.swing.ButtonGroup();
        buttonGroupKickLabel = new javax.swing.ButtonGroup();
        buttonGroupKickByte = new javax.swing.ButtonGroup();
        buttonGroupKickWord = new javax.swing.ButtonGroup();
        buttonGroupDasmComment = new javax.swing.ButtonGroup();
        buttonGroupDasmBlockComment = new javax.swing.ButtonGroup();
        buttonGroupTmpxComment = new javax.swing.ButtonGroup();
        buttonGroupTmpxBlockComment = new javax.swing.ButtonGroup();
        buttonGroupDasmOrigin = new javax.swing.ButtonGroup();
        buttonGroupTmpxOrigin = new javax.swing.ButtonGroup();
        buttonGroupCa65Origin = new javax.swing.ButtonGroup();
        buttonGroupCa65Comment = new javax.swing.ButtonGroup();
        buttonGroupCa65BlockComment = new javax.swing.ButtonGroup();
        buttonGroupDasmStarting = new javax.swing.ButtonGroup();
        buttonGroupTmpxStarting = new javax.swing.ButtonGroup();
        buttonGroupCa65Starting = new javax.swing.ButtonGroup();
        buttonGroupAcmeStarting = new javax.swing.ButtonGroup();
        buttonGroupAcmeOrigin = new javax.swing.ButtonGroup();
        buttonGroupAcmeComment = new javax.swing.ButtonGroup();
        buttonGroupAcmeBlockComment = new javax.swing.ButtonGroup();
        buttonGroupKickStarting = new javax.swing.ButtonGroup();
        buttonGroupKickComment = new javax.swing.ButtonGroup();
        buttonGroupKickOrigin = new javax.swing.ButtonGroup();
        buttonGroupKickBlockComment = new javax.swing.ButtonGroup();
        buttonGroupTass64Starting = new javax.swing.ButtonGroup();
        buttonGroupTass64Origin = new javax.swing.ButtonGroup();
        buttonGroupTass64Comment = new javax.swing.ButtonGroup();
        buttonGroupTass64BlockComment = new javax.swing.ButtonGroup();
        buttonGroupTass64Label = new javax.swing.ButtonGroup();
        buttonGroupTass64Byte = new javax.swing.ButtonGroup();
        buttonGroupTass64Word = new javax.swing.ButtonGroup();
        buttonGroupDasmMonoSprite = new javax.swing.ButtonGroup();
        buttonGroupDasmMultiSprite = new javax.swing.ButtonGroup();
        buttonGroupKickMonoSprite = new javax.swing.ButtonGroup();
        buttonGroupKickMultiSprite = new javax.swing.ButtonGroup();
        buttonGroupAcmeMonoSprite = new javax.swing.ButtonGroup();
        buttonGroupAcmeMultiSprite = new javax.swing.ButtonGroup();
        buttonGroupCa65MonoSprite = new javax.swing.ButtonGroup();
        buttonGroupCa65MultiSprite = new javax.swing.ButtonGroup();
        buttonGroupTmpxMonoSprite = new javax.swing.ButtonGroup();
        buttonGroupTmpxMultiSprite = new javax.swing.ButtonGroup();
        buttonGroupTass64MonoSprite = new javax.swing.ButtonGroup();
        buttonGroupTass64MultiSprite = new javax.swing.ButtonGroup();
        buttonGroupDasmTribyte = new javax.swing.ButtonGroup();
        buttonGroupTmpxTribyte = new javax.swing.ButtonGroup();
        buttonGroupCa65Tribyte = new javax.swing.ButtonGroup();
        buttonGroupAcmeTribyte = new javax.swing.ButtonGroup();
        buttonGroupKickTribyte = new javax.swing.ButtonGroup();
        buttonGroupTass64Tribyte = new javax.swing.ButtonGroup();
        buttonGroupDasmLong = new javax.swing.ButtonGroup();
        buttonGroupCa65Long = new javax.swing.ButtonGroup();
        buttonGroupKickLong = new javax.swing.ButtonGroup();
        buttonGroupTmpxLong = new javax.swing.ButtonGroup();
        buttonGroupDasmWordSwapped = new javax.swing.ButtonGroup();
        buttonGroupTmpxWordSwapped = new javax.swing.ButtonGroup();
        buttonGroupCa65WordSwapped = new javax.swing.ButtonGroup();
        buttonGroupAcmeWordSwapped = new javax.swing.ButtonGroup();
        buttonGroupKickWordSwapped = new javax.swing.ButtonGroup();
        buttonGroupTass64WordSwapped = new javax.swing.ButtonGroup();
        buttonGroupTass64WaordSwapped = new javax.swing.ButtonGroup();
        buttonGroupDasmText = new javax.swing.ButtonGroup();
        buttonGroupTmpxText = new javax.swing.ButtonGroup();
        buttonGroupKickText = new javax.swing.ButtonGroup();
        buttonGroupTass64Text = new javax.swing.ButtonGroup();
        buttonGroupAcmeLong = new javax.swing.ButtonGroup();
        buttonGroupCa65Text = new javax.swing.ButtonGroup();
        buttonGroupDasmNumText = new javax.swing.ButtonGroup();
        buttonGroupDasmZeroText = new javax.swing.ButtonGroup();
        jPanelOption = new javax.swing.JPanel();
        jTabbedPaneOption = new javax.swing.JTabbedPane();
        jPanelPreview = new javax.swing.JPanel();
        jLabelIllegalOpcodeStyle = new javax.swing.JLabel();
        jRadioButtonStyle1 = new javax.swing.JRadioButton();
        jRadioButtonStyle2 = new javax.swing.JRadioButton();
        jRadioButtonStyle3 = new javax.swing.JRadioButton();
        jLabelLanguage = new javax.swing.JLabel();
        jRadioButtonLangEnglish = new javax.swing.JRadioButton();
        jRadioButtonLangItalian = new javax.swing.JRadioButton();
        jCheckBoxEraseDComm = new javax.swing.JCheckBox();
        jCheckBoxOpcodeFormattingPreview = new javax.swing.JCheckBox();
        jCheckBoxUndefinedCode = new javax.swing.JCheckBox();
        jSpinnerMaxLength = new javax.swing.JSpinner();
        jLabelMaxLength = new javax.swing.JLabel();
        jLabelAggregate = new javax.swing.JLabel();
        jSpinnerMaxByteAggregate = new javax.swing.JSpinner();
        jLabelPSIDinitsong = new javax.swing.JLabel();
        jTextFieldInitSongs = new javax.swing.JTextField();
        jLabelPSIDplaysound = new javax.swing.JLabel();
        jTextFieldPlaySound = new javax.swing.JTextField();
        jLabelSIDfreqLo = new javax.swing.JLabel();
        jTextFieldSidFreqLo = new javax.swing.JTextField();
        jLabelSIDfreqHi = new javax.swing.JLabel();
        jTextFieldSidFreqHi = new javax.swing.JTextField();
        jCheckBoxOpcodeFormattingSource = new javax.swing.JCheckBox();
        jCheckBoxErasePlus = new javax.swing.JCheckBox();
        jLabelInstrSep = new javax.swing.JLabel();
        jSpinnerInstrSpaces = new javax.swing.JSpinner();
        jSpinnerInstrTabs = new javax.swing.JSpinner();
        jLabelInstrSpace = new javax.swing.JLabel();
        jLabelInstrTabs = new javax.swing.JLabel();
        jLabelDataSep = new javax.swing.JLabel();
        jLabelDataSpace = new javax.swing.JLabel();
        jSpinnerDataSpaces = new javax.swing.JSpinner();
        jLabelDataTabs = new javax.swing.JLabel();
        jSpinnerDataTabs = new javax.swing.JSpinner();
        jCheckBoxLabel = new javax.swing.JCheckBox();
        jLabelMaxByte = new javax.swing.JLabel();
        jLabelMaxWord = new javax.swing.JLabel();
        jSpinnerMaxWordAggregate = new javax.swing.JSpinner();
        jLabelMaxTribyte = new javax.swing.JLabel();
        jSpinnerMaxTribyteAggregate = new javax.swing.JSpinner();
        jLabelMaxLong = new javax.swing.JLabel();
        jSpinnerMaxLongAggregate = new javax.swing.JSpinner();
        jLabelTmpPath = new javax.swing.JLabel();
        jTextFieldTmpPath = new javax.swing.JTextField();
        jButtonBrowse = new javax.swing.JButton();
        jLabelMaxSwapped = new javax.swing.JLabel();
        jSpinnerMaxSwappedAggregate = new javax.swing.JSpinner();
        jLabelMaxText = new javax.swing.JLabel();
        jSpinnerMaxTextAggregate = new javax.swing.JSpinner();
        jPanelComment = new javax.swing.JPanel();
        jLabelautocomment = new javax.swing.JLabel();
        jTabbedPaneComm = new javax.swing.JTabbedPane();
        jPanelC64Comm = new javax.swing.JPanel();
        jCheckBoxC64ZeroPage = new javax.swing.JCheckBox();
        jCheckBoxC64StackArea = new javax.swing.JCheckBox();
        jCheckBoxC64_200Area = new javax.swing.JCheckBox();
        jCheckBoxC64_300Area = new javax.swing.JCheckBox();
        jCheckBoxC64ScreenArea = new javax.swing.JCheckBox();
        jCheckBoxC64FreeArea = new javax.swing.JCheckBox();
        jCheckBoxC64BasicRom = new javax.swing.JCheckBox();
        jCheckBoxC64FreeRam = new javax.swing.JCheckBox();
        jCheckC64BoxVicII = new javax.swing.JCheckBox();
        jCheckC64BoxSid = new javax.swing.JCheckBox();
        jCheckBoxC64Color = new javax.swing.JCheckBox();
        jCheckBoxC64Cia1 = new javax.swing.JCheckBox();
        jCheckBoxC64Cia2 = new javax.swing.JCheckBox();
        jCheckBoxC64KernalRom = new javax.swing.JCheckBox();
        jPanelC1541Comm = new javax.swing.JPanel();
        jCheckBoxC1541ZeroPage = new javax.swing.JCheckBox();
        jCheckBoxC1541StackArea = new javax.swing.JCheckBox();
        jCheckBoxC1541_200Area = new javax.swing.JCheckBox();
        jCheckBoxC1541Via1 = new javax.swing.JCheckBox();
        jCheckBoxC1541Via2 = new javax.swing.JCheckBox();
        jCheckBoxC1541Kernal = new javax.swing.JCheckBox();
        jCheckBoxC1541Buffer0 = new javax.swing.JCheckBox();
        jCheckBoxC1541Buffer1 = new javax.swing.JCheckBox();
        jCheckBoxC1541Buffer2 = new javax.swing.JCheckBox();
        jCheckBoxC1541Buffer3 = new javax.swing.JCheckBox();
        jCheckBoxC1541Buffer4 = new javax.swing.JCheckBox();
        jPanelC128Comm = new javax.swing.JPanel();
        jCheckBoxC128ZeroPage = new javax.swing.JCheckBox();
        jCheckBoxC128StackArea = new javax.swing.JCheckBox();
        jCheckBoxC128_300Area = new javax.swing.JCheckBox();
        jCheckBoxC128_200Area = new javax.swing.JCheckBox();
        jCheckBoxC128ScreenArea = new javax.swing.JCheckBox();
        jCheckBoxC128UserBasic = new javax.swing.JCheckBox();
        jCheckBoxC128AppProgArea = new javax.swing.JCheckBox();
        jCheckBoxC128VideoColor = new javax.swing.JCheckBox();
        jCheckBoxC128ScreenMem = new javax.swing.JCheckBox();
        jCheckBoxC128Color = new javax.swing.JCheckBox();
        jCheckBoxC128BasicRom = new javax.swing.JCheckBox();
        jCheckBoxC128VicII = new javax.swing.JCheckBox();
        jCheckBoxC128Sid = new javax.swing.JCheckBox();
        jCheckBoxC128MMU = new javax.swing.JCheckBox();
        jCheckBoxC128VDC = new javax.swing.JCheckBox();
        jCheckBoxC128Cia1 = new javax.swing.JCheckBox();
        jCheckBoxC128Cia2 = new javax.swing.JCheckBox();
        jCheckBoxC128DMA = new javax.swing.JCheckBox();
        jCheckBoxC128KernalRom = new javax.swing.JCheckBox();
        jPanelVic20Comm = new javax.swing.JPanel();
        jCheckBoxVic20StackArea = new javax.swing.JCheckBox();
        jCheckBoxVic20ZeroPage = new javax.swing.JCheckBox();
        jCheckBoxVic20_200Area = new javax.swing.JCheckBox();
        jCheckBoxVic20_300Area = new javax.swing.JCheckBox();
        jCheckBoxVic20_400Area = new javax.swing.JCheckBox();
        jCheckBoxVic20Vic = new javax.swing.JCheckBox();
        jCheckBoxVic20Via1 = new javax.swing.JCheckBox();
        jCheckBoxVic20Via2 = new javax.swing.JCheckBox();
        jCheckBoxVic20UserBasic = new javax.swing.JCheckBox();
        jCheckBoxVic20Screen = new javax.swing.JCheckBox();
        jCheckBoxVic20_8kExp1 = new javax.swing.JCheckBox();
        jCheckBoxVic20_8kExp2 = new javax.swing.JCheckBox();
        jCheckBoxVic20_8kExp3 = new javax.swing.JCheckBox();
        jCheckBoxVic20Character = new javax.swing.JCheckBox();
        jCheckBoxVic20Color = new javax.swing.JCheckBox();
        jCheckBoxVic20Block2 = new javax.swing.JCheckBox();
        jCheckBoxVic20Block3 = new javax.swing.JCheckBox();
        jCheckBoxVic20Block4 = new javax.swing.JCheckBox();
        jCheckBoxVic20BasicRom = new javax.swing.JCheckBox();
        jCheckBoxVic20KernalRom = new javax.swing.JCheckBox();
        jPanelPlus4Comm = new javax.swing.JPanel();
        jCheckBoxPlus4ZeroPage = new javax.swing.JCheckBox();
        jCheckBoxPlus4StackArea = new javax.swing.JCheckBox();
        jCheckBoxPlus4_200Area = new javax.swing.JCheckBox();
        jCheckBoxPlus4_300Area = new javax.swing.JCheckBox();
        jCheckBoxPlus4_400Area = new javax.swing.JCheckBox();
        jCheckBoxPlus4_500Area = new javax.swing.JCheckBox();
        jCheckBoxPlus4_600Area = new javax.swing.JCheckBox();
        jCheckBoxPlus4_700Area = new javax.swing.JCheckBox();
        jCheckBoxPlus4ColorArea = new javax.swing.JCheckBox();
        jCheckBoxPlus4VideoArea = new javax.swing.JCheckBox();
        jCheckBoxPlus4BasicRamP = new javax.swing.JCheckBox();
        jCheckBoxPlus4Luminance = new javax.swing.JCheckBox();
        jCheckBoxPlus4ColorBitmap = new javax.swing.JCheckBox();
        jCheckBoxPlus4GraphicData = new javax.swing.JCheckBox();
        jCheckBoxPlus4BasicRamN = new javax.swing.JCheckBox();
        jCheckBoxPlus4BasicRom = new javax.swing.JCheckBox();
        jCheckBoxPlus4BasicExt = new javax.swing.JCheckBox();
        jCheckBoxPlus4Caracter = new javax.swing.JCheckBox();
        jCheckBoxPlus4Acia = new javax.swing.JCheckBox();
        jCheckBoxPlus4_6529B_1 = new javax.swing.JCheckBox();
        jCheckBoxPlus4_6529B_2 = new javax.swing.JCheckBox();
        jCheckBoxPlus4Ted = new javax.swing.JCheckBox();
        jCheckBoxPlus4Kernal = new javax.swing.JCheckBox();
        jPanelDisassembler = new javax.swing.JPanel();
        jLabelAutoComment = new javax.swing.JLabel();
        jComboBoxAssembler = new javax.swing.JComboBox<>();
        jTabbedPaneAssembler = new javax.swing.JTabbedPane();
        jPanelDasm = new javax.swing.JPanel();
        jCheckBoxDasmF3Comp = new javax.swing.JCheckBox();
        jLabelDasmByteDeclaration = new javax.swing.JLabel();
        jRadioButtonDasmDotByte = new javax.swing.JRadioButton();
        jRadioButtonDasmByte = new javax.swing.JRadioButton();
        jRadioButtonDasmDcByte = new javax.swing.JRadioButton();
        jLabelDasmLabelDeclaration = new javax.swing.JLabel();
        jRadioButtonDasmLabelName = new javax.swing.JRadioButton();
        jRadioButtonDasmLabelNameColon = new javax.swing.JRadioButton();
        jRadioButtonDasmDcBByte = new javax.swing.JRadioButton();
        jLabelDasmWordDeclaration = new javax.swing.JLabel();
        jRadioButtonDasmDotWord = new javax.swing.JRadioButton();
        jRadioButtonDasmWord = new javax.swing.JRadioButton();
        jRadioButtonDasmDcWWord = new javax.swing.JRadioButton();
        jScrollPaneDasmDotByte = new javax.swing.JScrollPane();
        jTextPaneDasmDotByte = new javax.swing.JTextPane();
        jScrollPaneDasmByte = new javax.swing.JScrollPane();
        jTextPaneDasmByte = new javax.swing.JTextPane();
        jScrollPaneDasmDcByte = new javax.swing.JScrollPane();
        jTextPaneDasmDcByte = new javax.swing.JTextPane();
        jScrollPaneDasmDCBByte = new javax.swing.JScrollPane();
        jTextPaneDasmDcBByte = new javax.swing.JTextPane();
        jScrollPaneDasmDotWord = new javax.swing.JScrollPane();
        jTextPaneDasmDotWord = new javax.swing.JTextPane();
        jScrollPaneDasmWord = new javax.swing.JScrollPane();
        jTextPaneDasmWord = new javax.swing.JTextPane();
        jScrollPaneDasmDcWWord = new javax.swing.JScrollPane();
        jTextPaneDasmDcWWord = new javax.swing.JTextPane();
        jScrollPaneDasmLabelName = new javax.swing.JScrollPane();
        jTextPaneDasmLabelName = new javax.swing.JTextPane();
        jScrollPaneDasmLabelNameColon = new javax.swing.JScrollPane();
        jTextPaneDasmLabelNameColon = new javax.swing.JTextPane();
        jLabelDasmCommentDeclaration = new javax.swing.JLabel();
        jRadioButtonDasmCstyleComment = new javax.swing.JRadioButton();
        jScrollPaneDasmLabelName1 = new javax.swing.JScrollPane();
        jTextPaneDasmSemicolonComment = new javax.swing.JTextPane();
        jRadioButtonDasmSemicolonComment = new javax.swing.JRadioButton();
        jScrollPaneDasmCstyleComment = new javax.swing.JScrollPane();
        jTextPaneDasmCstyleComment = new javax.swing.JTextPane();
        jLabelDasmBlockCommentDeclaration = new javax.swing.JLabel();
        jRadioButtonDasmSemicolonBlockComment = new javax.swing.JRadioButton();
        jScrollPaneDasmLabelName3 = new javax.swing.JScrollPane();
        jTextPaneDasmSemicolonBlockComment = new javax.swing.JTextPane();
        jRadioButtonDasmCstyleBlockComment = new javax.swing.JRadioButton();
        jScrollPaneDasmLabelName4 = new javax.swing.JScrollPane();
        jTextPaneDasmCstyleBlockComment = new javax.swing.JTextPane();
        jRadioButtonDasmIfBlockComment = new javax.swing.JRadioButton();
        jScrollPaneDasmLabelName5 = new javax.swing.JScrollPane();
        jTextPaneDasmIfBlockComment = new javax.swing.JTextPane();
        jLabelDasmOriginDeclaration = new javax.swing.JLabel();
        jRadioButtonDasmDotOrigin = new javax.swing.JRadioButton();
        jScrollPaneDasmLabelName8 = new javax.swing.JScrollPane();
        jTextPaneDasmDotOrigin = new javax.swing.JTextPane();
        jRadioButtonDasmOrigin = new javax.swing.JRadioButton();
        jScrollPaneDasmLabelName9 = new javax.swing.JScrollPane();
        jTextPaneDasmOrigin = new javax.swing.JTextPane();
        jLabelDasmStarting = new javax.swing.JLabel();
        jRadioButtonDasmProcStarting = new javax.swing.JRadioButton();
        jScrollPaneDasmLabelName15 = new javax.swing.JScrollPane();
        jTextPaneDasmProcStarting = new javax.swing.JTextPane();
        jLabelDasmMonoSpriteDeclaration = new javax.swing.JLabel();
        jRadioButtonDasmByteHexMonoSprite = new javax.swing.JRadioButton();
        jScrollPaneDasmByteHexMonoSprite = new javax.swing.JScrollPane();
        jTextPaneDasmByteHexMonoSprite = new javax.swing.JTextPane();
        jRadioButtonDasmByteBinMonoSprite = new javax.swing.JRadioButton();
        jScrollPaneDasmByteBinMonoSprite = new javax.swing.JScrollPane();
        jTextPaneDasmByteBinMonoSprite = new javax.swing.JTextPane();
        jRadioButtonDasmMacroHexMonoSprite = new javax.swing.JRadioButton();
        jScrollPaneDasmMacroHexMonoSprite = new javax.swing.JScrollPane();
        jTextPaneDasmMacroHexMonoSprite = new javax.swing.JTextPane();
        jRadioButtonDasmMacroBinMonoSprite = new javax.swing.JRadioButton();
        jScrollPaneDasmMacroBinMonoSprite = new javax.swing.JScrollPane();
        jTextPaneDasmMacroBinMonoSprite = new javax.swing.JTextPane();
        jLabelDasmMultiSpriteDeclaration = new javax.swing.JLabel();
        jRadioButtonDasmByteHexMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneDasmByteHexMultiSprite = new javax.swing.JScrollPane();
        jTextPaneDasmByteHexMultiSprite = new javax.swing.JTextPane();
        jRadioButtonDasmByteBinMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneDasmByteBinMultiSprite = new javax.swing.JScrollPane();
        jTextPaneDasmByteBinMultiSprite = new javax.swing.JTextPane();
        jRadioButtonDasmMacroHexMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneDasmMacroHexMultiSprite = new javax.swing.JScrollPane();
        jTextPaneDasmMacroHexMultiSprite = new javax.swing.JTextPane();
        jRadioButtonDasmMacroBinMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneDasmMacroBinMultiSprite = new javax.swing.JScrollPane();
        jTextPaneDasmMacroBinMultiSprite = new javax.swing.JTextPane();
        jLabelDasmTribyteDeclaration = new javax.swing.JLabel();
        jRadioButtonDasmMacroTribyte = new javax.swing.JRadioButton();
        jScrollPaneDasmMacroTribyte = new javax.swing.JScrollPane();
        jTextPaneDasmMacroTribyte = new javax.swing.JTextPane();
        jLabelDasmLongDeclaration = new javax.swing.JLabel();
        jRadioButtonDasmDotLong = new javax.swing.JRadioButton();
        jScrollPaneDasmDotLong = new javax.swing.JScrollPane();
        jTextPaneDasmDotLong = new javax.swing.JTextPane();
        jRadioButtonDasmLong = new javax.swing.JRadioButton();
        jScrollPaneDasmLong = new javax.swing.JScrollPane();
        jTextPaneDasmLong = new javax.swing.JTextPane();
        jRadioButtonDasmDcLLong = new javax.swing.JRadioButton();
        jScrollPaneDasmDcLLong = new javax.swing.JScrollPane();
        jTextPaneDasmDcLLong = new javax.swing.JTextPane();
        jLabelDasmWordSwappedDeclaration = new javax.swing.JLabel();
        jRadioButtonDasmDcDotSWordSwapped = new javax.swing.JRadioButton();
        jScrollPaneDasmDcDotSWordSwapped = new javax.swing.JScrollPane();
        jTextPaneDasmDcDotSWordSwapped = new javax.swing.JTextPane();
        jLabelDasmTextDeclaration = new javax.swing.JLabel();
        jRadioButtonDasmDotByteText = new javax.swing.JRadioButton();
        jScrollPaneDasmDotByteText = new javax.swing.JScrollPane();
        jTextPaneDasmDotByteText = new javax.swing.JTextPane();
        jRadioButtonDasmByteText = new javax.swing.JRadioButton();
        jScrollPaneDasmByteText = new javax.swing.JScrollPane();
        jTextPaneDasmByteText = new javax.swing.JTextPane();
        jRadioButtonDasmDcText = new javax.swing.JRadioButton();
        jScrollPaneDasmMacroHexMonoSprite1 = new javax.swing.JScrollPane();
        jTextPaneDasmDcText = new javax.swing.JTextPane();
        jRadioButtonDasmDcDotBText = new javax.swing.JRadioButton();
        jScrollPaneDasmDcDotBText = new javax.swing.JScrollPane();
        jTextPaneDasmDcDotBText = new javax.swing.JTextPane();
        jLabelDasmNumTextDeclaration = new javax.swing.JLabel();
        jRadioButtonDasmDotByteNumText = new javax.swing.JRadioButton();
        jScrollPaneDasmDotByteNumText = new javax.swing.JScrollPane();
        jTextPaneDasmDotByteNumText = new javax.swing.JTextPane();
        jRadioButtonDasmByteNumText = new javax.swing.JRadioButton();
        jScrollPaneDasmByteNumText = new javax.swing.JScrollPane();
        jTextPaneDasmByteNumText = new javax.swing.JTextPane();
        jRadioButtonDasmDcNumText = new javax.swing.JRadioButton();
        jScrollPaneDasmDcNumText = new javax.swing.JScrollPane();
        jTextPaneDasmDcNumText = new javax.swing.JTextPane();
        jRadioButtonDasmDcDotBNumText = new javax.swing.JRadioButton();
        jScrollPaneDasmDcDotBNumText = new javax.swing.JScrollPane();
        jTextPaneDasmDcDotBNumText = new javax.swing.JTextPane();
        jLabelDasmZeroTextDeclaration = new javax.swing.JLabel();
        jRadioButtonDasmDotByteZeroText = new javax.swing.JRadioButton();
        jScrollPaneDasmDotByteZeroText = new javax.swing.JScrollPane();
        jTextPaneDasmDotByteZeroText = new javax.swing.JTextPane();
        jRadioButtonDasmByteZeroText = new javax.swing.JRadioButton();
        jScrollPaneDasmByteZeroText = new javax.swing.JScrollPane();
        jTextPaneDasmByteText2 = new javax.swing.JTextPane();
        jRadioButtonDasmDcZeroText = new javax.swing.JRadioButton();
        jScrollPaneDasmDcZeroText = new javax.swing.JScrollPane();
        jTextPaneDasmDcZeroText = new javax.swing.JTextPane();
        jRadioButtonDasmDcDotBZeroText = new javax.swing.JRadioButton();
        jScrollPaneDasmDcDotBZeroText = new javax.swing.JScrollPane();
        jTextPaneDasmDcDotB2 = new javax.swing.JTextPane();
        jPanelTMPx = new javax.swing.JPanel();
        jLabelTmpxLabelDeclaration = new javax.swing.JLabel();
        jRadioButtonTmpxLabelName = new javax.swing.JRadioButton();
        jScrollPaneTmpxByte = new javax.swing.JScrollPane();
        jTextPaneTmpxLabelName = new javax.swing.JTextPane();
        jLabelTmpxByteDeclaration = new javax.swing.JLabel();
        jRadioButtonTmpxDotByte = new javax.swing.JRadioButton();
        jScrollPaneTmpxWord = new javax.swing.JScrollPane();
        jTextPaneTmpxDotByte = new javax.swing.JTextPane();
        jLabelTmpxWordDeclaration = new javax.swing.JLabel();
        jRadioButtonTmpxDotWord = new javax.swing.JRadioButton();
        jScrollPaneTmpxDotWord = new javax.swing.JScrollPane();
        jTextPaneTmpxDotWord = new javax.swing.JTextPane();
        jLabelTmpxCommentDeclaration = new javax.swing.JLabel();
        jRadioButtonTmpxSemicolonComment = new javax.swing.JRadioButton();
        jScrollPaneTmpxSemicolonComment = new javax.swing.JScrollPane();
        jTextPaneTmpxSemicolonComment = new javax.swing.JTextPane();
        jLabelTmpxBlockCommentDeclaration = new javax.swing.JLabel();
        jRadioButtonTmpxSemicolonBlockComment = new javax.swing.JRadioButton();
        jScrollPaneTmpxSemicolonBlockComment = new javax.swing.JScrollPane();
        jTextPaneTmpxSemicolonBlockComment = new javax.swing.JTextPane();
        jLabelTmpxOriginDeclaration = new javax.swing.JLabel();
        jRadioButtonTmpxAsterixOrigin = new javax.swing.JRadioButton();
        jScrollPaneTmpxAsterixOrigin = new javax.swing.JScrollPane();
        jTextPaneTmpxAsterixOrigin = new javax.swing.JTextPane();
        jRadioButtonTmpxDotIfBlockComment = new javax.swing.JRadioButton();
        jScrollPaneTmpxDotIfBlockComment = new javax.swing.JScrollPane();
        jTextPaneTmpxDotIfBlockComment = new javax.swing.JTextPane();
        jLabelTmpxStartingDeclaration = new javax.swing.JLabel();
        jRadioButtonTmpxFakeStarting = new javax.swing.JRadioButton();
        jScrollPaneTmpxFakeStarting = new javax.swing.JScrollPane();
        jTextPaneTmpxFakeStarting = new javax.swing.JTextPane();
        jLabelTmpxMonoSpriteDeclaration = new javax.swing.JLabel();
        jLabelTmpxMultiSpriteDeclaration = new javax.swing.JLabel();
        jRadioButtonTmpxByteHexMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonTmpxByteHexMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneTmpxByteHexMultiSprite = new javax.swing.JScrollPane();
        TmpxPaneTmpxByteHexMultiSprite = new javax.swing.JTextPane();
        jScrollPaneTmpxByteHexMonoSprite = new javax.swing.JScrollPane();
        jTextPaneTmpxByteHexMonoSprite = new javax.swing.JTextPane();
        jRadioButtonTmpxByteBinMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonTmpxByteBinMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneTmpxByteBinMultiSprite = new javax.swing.JScrollPane();
        jTextPaneTmpxByteBinMultiSprite = new javax.swing.JTextPane();
        jScrollPaneTmpxByteBinMonoSprite = new javax.swing.JScrollPane();
        jTextPaneTmpxByteBinMonoSprite = new javax.swing.JTextPane();
        jRadioButtonTmpxMacroHexMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonTmpxMacroHexMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneTmpxMacroHexMultiSprite = new javax.swing.JScrollPane();
        jTextPaneTmpxMacroHexMultiSprite = new javax.swing.JTextPane();
        jScrollPaneTmpxMacroHexMonoSprite = new javax.swing.JScrollPane();
        jTextPaneTmpxMacroHexMonoSprite = new javax.swing.JTextPane();
        jRadioButtonTmpxMacroBinMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonTmpxMacroBinMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneTmpxMacroBinMultiSprite = new javax.swing.JScrollPane();
        jTextPaneTmpxMacroBinMultiSprite = new javax.swing.JTextPane();
        jScrollPaneTmpxMacroBinMonoSprite = new javax.swing.JScrollPane();
        jTextPaneTmpxMacroBinMonoSprite = new javax.swing.JTextPane();
        jLabelTmpxTribyteDeclaration = new javax.swing.JLabel();
        jRadioButtonTmpxMacroTribyte = new javax.swing.JRadioButton();
        jScrollPaneTmpxMacroTribyte = new javax.swing.JScrollPane();
        jTextPaneTmpxMacroTribyte = new javax.swing.JTextPane();
        jLabelTmpxLongDeclaration = new javax.swing.JLabel();
        jRadioButtonTmpxMacroLong = new javax.swing.JRadioButton();
        jScrollPaneTmpxMacroLong = new javax.swing.JScrollPane();
        jTextPaneTmpxMacroLong = new javax.swing.JTextPane();
        jLabelTmpxWordSwappedDeclaration = new javax.swing.JLabel();
        jRadioButtonTmpxMacroWordSwapped = new javax.swing.JRadioButton();
        jScrollPaneTmpxMacroWordSwapped = new javax.swing.JScrollPane();
        jTextPaneTmpxMacroWordSwapped = new javax.swing.JTextPane();
        jLabelTmpxTextDeclaration = new javax.swing.JLabel();
        jRadioButtonTmpxDotText = new javax.swing.JRadioButton();
        jScrollPaneTmpxDotText = new javax.swing.JScrollPane();
        jTextPaneTmpxDotText = new javax.swing.JTextPane();
        jPanelCa65 = new javax.swing.JPanel();
        jLabelCa65LabelDeclaration = new javax.swing.JLabel();
        jRadioButtonCa65LabelNameColon = new javax.swing.JRadioButton();
        jScrollPaneCa65LabelName = new javax.swing.JScrollPane();
        jTextPaneCa65LabelNameColon = new javax.swing.JTextPane();
        jLabelC65ByteDeclaration = new javax.swing.JLabel();
        jRadioButtonCa65DotByte = new javax.swing.JRadioButton();
        jScrollPaneC65DotByte = new javax.swing.JScrollPane();
        jTextPaneCa65DotByte = new javax.swing.JTextPane();
        jRadioButtonCa65DotBytByte = new javax.swing.JRadioButton();
        jScrollPaneCa65DotBytByte = new javax.swing.JScrollPane();
        jTextPaneCa65DotBytByte = new javax.swing.JTextPane();
        jLabelC65WordDeclaration = new javax.swing.JLabel();
        jRadioButtonCa65DotWord = new javax.swing.JRadioButton();
        jScrollPaneCa65DotWord = new javax.swing.JScrollPane();
        jTextPaneCa65DotWord = new javax.swing.JTextPane();
        jScrollPaneC65DotDByteWord = new javax.swing.JScrollPane();
        jTextPaneCa65DotDByteWord = new javax.swing.JTextPane();
        jRadioButtonCa65DotDByteWord = new javax.swing.JRadioButton();
        jLabelCa65OriginDeclaration = new javax.swing.JLabel();
        jRadioButtonCa65DotOrigin = new javax.swing.JRadioButton();
        jScrollPaneCa65DotOrigin = new javax.swing.JScrollPane();
        jTextPaneC65DotOrigin = new javax.swing.JTextPane();
        jLabelCa65CommentDeclaration = new javax.swing.JLabel();
        jRadioButtonCa65SemicolonComment = new javax.swing.JRadioButton();
        jScrollPaneCa65SemicolonComment = new javax.swing.JScrollPane();
        jTextPaneC65SemicolonComment = new javax.swing.JTextPane();
        jLabelCa65BlockCommentDeclaration = new javax.swing.JLabel();
        jRadioButtonCa65SemicolonBlockComment = new javax.swing.JRadioButton();
        jScrollPaneCa65Comment = new javax.swing.JScrollPane();
        jTextPaneCa65Comment = new javax.swing.JTextPane();
        jLabeCa65StartingDeclaration = new javax.swing.JLabel();
        jRadioButtonCa65DotP02Starting = new javax.swing.JRadioButton();
        jScrollPaneDasmLabelName17 = new javax.swing.JScrollPane();
        jTextPaneC65DotP02Starting = new javax.swing.JTextPane();
        jRadioButtonCa65DotSetcpuStarting = new javax.swing.JRadioButton();
        jScrollPaneDasmLabelName18 = new javax.swing.JScrollPane();
        jTextPaneC65DotSetcpuStarting = new javax.swing.JTextPane();
        jLabelCa65MonoSpriteDeclaration = new javax.swing.JLabel();
        jLabelCa65MultiSpriteDeclaration = new javax.swing.JLabel();
        jRadioButtonCa65ByteHexMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonCa65ByteHexMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneCa65ByteHexMultiSprite = new javax.swing.JScrollPane();
        jTextPaneCa65ByteHexMultiSprite = new javax.swing.JTextPane();
        jScrollPaneCa65ByteHexMonoSprite = new javax.swing.JScrollPane();
        jTextPaneCa65ByteHexMonoSprite = new javax.swing.JTextPane();
        jRadioButtonCa65ByteBinMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonCa65ByteBinMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneDasmByteBinMultiSprite1 = new javax.swing.JScrollPane();
        jTextPaneDasmByteBinMultiSprite1 = new javax.swing.JTextPane();
        jScrollPaneCa65ByteBinMonoSprite = new javax.swing.JScrollPane();
        jTextPaneCa65ByteBinMonoSprite = new javax.swing.JTextPane();
        jRadioButtonCa65MacroHexMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonCa65MacroHexMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneCa65MacroHexMultiSprite = new javax.swing.JScrollPane();
        jTextPaneCa65MacroHexMultiSprite = new javax.swing.JTextPane();
        jScrollPaneCa65MacroHexMonoSprite = new javax.swing.JScrollPane();
        jTextPaneCa65MacroHexMonoSprite = new javax.swing.JTextPane();
        jRadioButtonCa65MacroBinMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonCa65MacroBinMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneCa65MacroBinMultiSprite = new javax.swing.JScrollPane();
        jTextPaneCa65MacroBinMultiSprite = new javax.swing.JTextPane();
        jScrollPaneCa65MacroBinMonoSprite = new javax.swing.JScrollPane();
        jTextPaneCa65MacroBinMonoSprite = new javax.swing.JTextPane();
        jLabelCa65TribyteDeclaration = new javax.swing.JLabel();
        jRadioButtonCa65MacroTribyte = new javax.swing.JRadioButton();
        jScrollPaneCa65MacroTribyte = new javax.swing.JScrollPane();
        jTextPaneCa65MacroTribyte = new javax.swing.JTextPane();
        jLabelC65LongDeclaration = new javax.swing.JLabel();
        jRadioButtonCa65DotLong = new javax.swing.JRadioButton();
        jScrollPaneCa65DotDWordLong = new javax.swing.JScrollPane();
        jTextPaneCa65DotDwordLong = new javax.swing.JTextPane();
        jLabelCa65WordSwappedDeclaration = new javax.swing.JLabel();
        jRadioButtonCa65DotDbytWordSwapped = new javax.swing.JRadioButton();
        jScrollPaneCa65DotDbytWordSwapped = new javax.swing.JScrollPane();
        jTextPaneCa65DotDbytWordSwapped = new javax.swing.JTextPane();
        jLabelCa65TextDeclaration = new javax.swing.JLabel();
        jRadioButtonCa65DotByteText = new javax.swing.JRadioButton();
        jScrollPaneCa65DotByteText = new javax.swing.JScrollPane();
        jTextPaneCa65DotByteText = new javax.swing.JTextPane();
        jRadioButtonCa65DotBytText = new javax.swing.JRadioButton();
        jScrollPaneCa65DotBytText = new javax.swing.JScrollPane();
        jTextPaneCa65DotBytText = new javax.swing.JTextPane();
        jPanelAcme = new javax.swing.JPanel();
        jLabelAcmeLabelDeclaration = new javax.swing.JLabel();
        jRadioButtonAcmeLabelName = new javax.swing.JRadioButton();
        jScrollPaneAcmeLabelName = new javax.swing.JScrollPane();
        jTextPaneAcmeLabelName = new javax.swing.JTextPane();
        jRadioButtonAcmeLabelNameColon = new javax.swing.JRadioButton();
        jScrollPaneAcmeLabelNameColon = new javax.swing.JScrollPane();
        jTextPaneAcmeLabelNameColon = new javax.swing.JTextPane();
        jLabelAcmeByteDeclaration = new javax.swing.JLabel();
        jRadioButtonAcmeMarkByte = new javax.swing.JRadioButton();
        jScrollPaneAcmeMarkByte = new javax.swing.JScrollPane();
        jTextPaneAcmeMarkByte = new javax.swing.JTextPane();
        jRadioButtonAcmeMark8Byte = new javax.swing.JRadioButton();
        jScrollPaneAcmeMark8Byte = new javax.swing.JScrollPane();
        jTextPaneAcmeMark8Byte = new javax.swing.JTextPane();
        jLabelAcmeWordDeclaration = new javax.swing.JLabel();
        jRadioButtonAcmeMarkWord = new javax.swing.JRadioButton();
        jScrollPaneAcmeMarkWord = new javax.swing.JScrollPane();
        jTextPaneAcmeMarkWord = new javax.swing.JTextPane();
        jRadioButtonAcmeMark16Word = new javax.swing.JRadioButton();
        jScrollPaneAcmeMark16Word = new javax.swing.JScrollPane();
        jTextPaneAcmeMark16Word = new javax.swing.JTextPane();
        jLabelAcmeStartingDeclaration = new javax.swing.JLabel();
        jRadioButtonAcmeMarkCpuStarting = new javax.swing.JRadioButton();
        jScrollPaneAcmeLabelMarkCpuStarting = new javax.swing.JScrollPane();
        jTextPaneAcmeMarkCpuStarting = new javax.swing.JTextPane();
        jLabelScmeOriginDeclaration = new javax.swing.JLabel();
        jRadioButtonAcmeAsterixOrigin = new javax.swing.JRadioButton();
        jScrollPaneDasmLabelAsterixOrigin = new javax.swing.JScrollPane();
        jTextPaneAcmeAsterixOrigin = new javax.swing.JTextPane();
        jLabelAcmeCommentDeclaration1 = new javax.swing.JLabel();
        jRadioButtonAcmeSemicolonComment = new javax.swing.JRadioButton();
        jScrollPaneAcmeSemicolonComment = new javax.swing.JScrollPane();
        jTextPaneAcmeSemicolonComment = new javax.swing.JTextPane();
        jLabelAcmeBlockCommentDeclaration = new javax.swing.JLabel();
        jRadioButtonAcmeSemicolonBlockComment = new javax.swing.JRadioButton();
        jScrollPaneAcmeSemicolonBlockComment = new javax.swing.JScrollPane();
        jTextPaneAcmeSemicolonBlockComment = new javax.swing.JTextPane();
        jRadioButtonAcmeMarkIfBlockComment = new javax.swing.JRadioButton();
        jScrollPaneAcmeMarkIfBlockComment = new javax.swing.JScrollPane();
        jTextPaneAcmeMarkIfBlockComment = new javax.swing.JTextPane();
        jLabelAcmeMonoSpriteDeclaration = new javax.swing.JLabel();
        jLabelAcmeMultiSpriteDeclaration = new javax.swing.JLabel();
        jRadioButtonAcme24HexMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonAcme24HexMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneAcmeByteHexMultiSprite = new javax.swing.JScrollPane();
        jTextPaneAcme24HexMultiSprite = new javax.swing.JTextPane();
        jScrollPaneAcme24HexMonoSprite = new javax.swing.JScrollPane();
        jTextPaneAcme24HexMonoSprite = new javax.swing.JTextPane();
        jRadioButtonAcme24BinMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonAcme24BinMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneAcme24BinMultiSprite = new javax.swing.JScrollPane();
        jTextPaneAcme24BinMultiSprite = new javax.swing.JTextPane();
        jScrollPaneAcme24BinMonoSprite = new javax.swing.JScrollPane();
        jTextPaneAcme24BinMonoSprite = new javax.swing.JTextPane();
        jRadioButtonAcmeMacroHexMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonAcmeMacroHexMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneAcmeMacroHexMultiSprite = new javax.swing.JScrollPane();
        jTextPaneAcmeMacroHexMultiSprite = new javax.swing.JTextPane();
        jScrollPaneAcmeMacroHexMonoSprite = new javax.swing.JScrollPane();
        jTextPaneAcmeMacroHexMonoSprite = new javax.swing.JTextPane();
        jRadioButtonAcmeMacroBinMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonAcmeMacroBinMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneAcmeMacroBinMultiSprite = new javax.swing.JScrollPane();
        jTextPaneAcmeMacroBinMultiSprite = new javax.swing.JTextPane();
        jScrollPaneAcmeMacroBinMonoSprite = new javax.swing.JScrollPane();
        jTextPaneAcmeMacroBinMonoSprite = new javax.swing.JTextPane();
        jRadioButtonAcmeMark08Byte = new javax.swing.JRadioButton();
        jScrollPaneAcmeMark08Byte = new javax.swing.JScrollPane();
        jTextPaneAcmeMark08Byte = new javax.swing.JTextPane();
        jRadioButtonAcmeMarkByByte = new javax.swing.JRadioButton();
        jScrollPaneAcmeMarkByByte = new javax.swing.JScrollPane();
        jTextPaneAcmeMarkByByte = new javax.swing.JTextPane();
        jLabelAcmeTribyteDeclaration = new javax.swing.JLabel();
        jRadioButtonAcmeMarkTwentyfourTribyte = new javax.swing.JRadioButton();
        jScrollPaneAcmeTwentyfourTribyte = new javax.swing.JScrollPane();
        jTextPaneAcmeMarkTwentyfourTribyte = new javax.swing.JTextPane();
        jLabelAcmeLongDeclaration = new javax.swing.JLabel();
        jRadioButtonAcmeMarkThirtytwoLong = new javax.swing.JRadioButton();
        jScrollPaneAcmeMarkThirtytwoLong = new javax.swing.JScrollPane();
        jTextPaneAcmeMarkThirtytwoLong = new javax.swing.JTextPane();
        jLabelAcmeWordSwappedDeclaration = new javax.swing.JLabel();
        jRadioButtonAcmeMacroWordSwapped = new javax.swing.JRadioButton();
        jScrollPaneAcmeMacroWordSwapped = new javax.swing.JScrollPane();
        jTextPaneAcmeMacroWordSwapped = new javax.swing.JTextPane();
        jLabelAcmeTextDeclaration = new javax.swing.JLabel();
        jRadioButtonAcmeMarkText = new javax.swing.JRadioButton();
        jScrollPaneAcmeMarkText = new javax.swing.JScrollPane();
        jTextPaneAcmeMarkText = new javax.swing.JTextPane();
        jRadioButtonAcmeMarkTxText = new javax.swing.JRadioButton();
        jScrollPaneAcmeMarkTxText = new javax.swing.JScrollPane();
        jTextPaneAcmeMarkTxText = new javax.swing.JTextPane();
        jRadioButtonAcmeMarkRawText = new javax.swing.JRadioButton();
        jScrollPaneAcmeMarkRawText = new javax.swing.JScrollPane();
        jTextPaneDasmDcText1 = new javax.swing.JTextPane();
        jPanelKickAssembler = new javax.swing.JPanel();
        jLabelKickLabelDeclaration = new javax.swing.JLabel();
        jRadioButtonKickLabelNameColon = new javax.swing.JRadioButton();
        jScrollPaneKickLabelNameColon = new javax.swing.JScrollPane();
        jTextPaneKickLabelNameColon = new javax.swing.JTextPane();
        jLabelKickByteDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotByte = new javax.swing.JRadioButton();
        jScrollPaneKickDotByte = new javax.swing.JScrollPane();
        jTextPaneKickDotByte = new javax.swing.JTextPane();
        jLabelKickWordDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotWord = new javax.swing.JRadioButton();
        jScrollPaneKickDotWord = new javax.swing.JScrollPane();
        jTextPaneKickDotWord = new javax.swing.JTextPane();
        jLabelKickStartingDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotCpuUndStarting = new javax.swing.JRadioButton();
        jScrollPaneKickDotCpuUndStarting = new javax.swing.JScrollPane();
        jTextPaneKickDotCpuUndStarting = new javax.swing.JTextPane();
        jLabelKickCommentDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDoubleBarComment = new javax.swing.JRadioButton();
        jScrollPaneKickDoubleBarComment = new javax.swing.JScrollPane();
        jTextPaneKickDoubleBarComment = new javax.swing.JTextPane();
        jLabelKickOriginDeclaration = new javax.swing.JLabel();
        jRadioButtonKickAsterixOrigin = new javax.swing.JRadioButton();
        jScrollPaneKickAsterixOrigin = new javax.swing.JScrollPane();
        jTextPaneKickAsterixOrigin = new javax.swing.JTextPane();
        jRadioButtonKickDotPcOrigin = new javax.swing.JRadioButton();
        jScrollPaneKickDotPcOrigin = new javax.swing.JScrollPane();
        jTextPaneKickDotPcOrigin = new javax.swing.JTextPane();
        jLabelKickBlockCommentDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDoubleBarBlockComment = new javax.swing.JRadioButton();
        jScrollPaneKickDoubleBarBlockComment = new javax.swing.JScrollPane();
        jTextPaneKickDoubleBarBlockComment = new javax.swing.JTextPane();
        jRadioButtonKickCstyleBlockComment = new javax.swing.JRadioButton();
        jScrollPaneKickCstyleBlockComment = new javax.swing.JScrollPane();
        jTextPaneKickCstyleBlockComment = new javax.swing.JTextPane();
        jRadioButtonDasmDotIfPBlockComment = new javax.swing.JRadioButton();
        jScrollPaneDasmDotIfPBlockComment = new javax.swing.JScrollPane();
        jTextPaneDasmDotIfPBlockComment = new javax.swing.JTextPane();
        jLabelKickMultiSpriteDeclaration = new javax.swing.JLabel();
        jLabelKickMonoSpriteDeclaration = new javax.swing.JLabel();
        jRadioButtonKickByteHexMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonKickByteHexMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneKickByteHexMultiSprite = new javax.swing.JScrollPane();
        jTextPaneKickByteHexMultiSprite = new javax.swing.JTextPane();
        jScrollPaneKickByteHexMonoSprite = new javax.swing.JScrollPane();
        jTextPaneKickByteHexMonoSprite = new javax.swing.JTextPane();
        jRadioButtonKickByteBinMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonKickByteBinMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneKickByteBinMultiSprite = new javax.swing.JScrollPane();
        jTextPaneKickByteBinMultiSprite = new javax.swing.JTextPane();
        jScrollPaneKickByteBinMonoSprite = new javax.swing.JScrollPane();
        jTextPaneKickByteBinMonoSprite = new javax.swing.JTextPane();
        jRadioButtonKickMacroHexMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonKickMacroHexMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneKickMacroHexMultiSprite = new javax.swing.JScrollPane();
        jTextPaneKickMacroHexMultiSprite = new javax.swing.JTextPane();
        jScrollPaneKickMacroHexMonoSprite = new javax.swing.JScrollPane();
        jTextPaneKickMacroHexMonoSprite = new javax.swing.JTextPane();
        jRadioButtonKickMacroBinMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonKickMacroBinMultiSprite = new javax.swing.JRadioButton();
        jScrollPanekickMacroBinMultiSprite = new javax.swing.JScrollPane();
        jTextPaneKickMacroBinMultiSprite = new javax.swing.JTextPane();
        jScrollPaneKickMacroBinMonoSprite = new javax.swing.JScrollPane();
        jTextPaneKickMacroBinMonoSprite = new javax.swing.JTextPane();
        jLabelKickTribyteDeclaration = new javax.swing.JLabel();
        jRadioButtonKickMacroTribyte = new javax.swing.JRadioButton();
        jScrollPaneKickMacroTribyte = new javax.swing.JScrollPane();
        jTextPaneKickMacroTribyte = new javax.swing.JTextPane();
        jLabelKickLongDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDwordLong = new javax.swing.JRadioButton();
        jScrollPaneKickDwordLong = new javax.swing.JScrollPane();
        jTextPaneKickDwordLong = new javax.swing.JTextPane();
        jLabelKickWordSwappedDeclaration = new javax.swing.JLabel();
        jRadioButtonKickMacroWordSwapped = new javax.swing.JRadioButton();
        jScrollPaneKickMacroWordSwapped = new javax.swing.JScrollPane();
        jTextPaneKickMacroWordSwapped = new javax.swing.JTextPane();
        jLabelKickTextDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotText = new javax.swing.JRadioButton();
        jScrollPaneKickDotText = new javax.swing.JScrollPane();
        jTextPaneKickDotText = new javax.swing.JTextPane();
        jRadioButtonKickDotByByte = new javax.swing.JRadioButton();
        jScrollPaneKickDotByByte = new javax.swing.JScrollPane();
        jTextPaneKickDotByByte = new javax.swing.JTextPane();
        jRadioButtonKickDotWoWord = new javax.swing.JRadioButton();
        jScrollPaneKickDotWoWord = new javax.swing.JScrollPane();
        jTextPaneKickDotWoWord = new javax.swing.JTextPane();
        jRadioButtonKickDotDwLong = new javax.swing.JRadioButton();
        jScrollPaneKickDotDwLong = new javax.swing.JScrollPane();
        jTextPaneKickDotDwLong = new javax.swing.JTextPane();
        jCheckBoxKickColonMacro = new javax.swing.JCheckBox();
        jPanelTass64 = new javax.swing.JPanel();
        jLabelTass64StartingDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64DotCpuAStarting = new javax.swing.JRadioButton();
        jScrollPaneDasmTass64DotCpuAStarting = new javax.swing.JScrollPane();
        jTextPaneTass64DotCpuAStarting = new javax.swing.JTextPane();
        jLabelTass64OriginDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64AsterixOrigin = new javax.swing.JRadioButton();
        jScrollPaneTass64ASterixOrigin = new javax.swing.JScrollPane();
        jTextPaneTass64AsterixOrigin = new javax.swing.JTextPane();
        jLabelTass64CommentDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64SemicolonComment = new javax.swing.JRadioButton();
        jScrollPaneTass64SemicolonComment = new javax.swing.JScrollPane();
        jTextPaneTass64SemicolonComment = new javax.swing.JTextPane();
        jLabelTass64BlockCommentDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64SemicolonBlockComment = new javax.swing.JRadioButton();
        jScrollPaneTass64SemicolonBlockComment = new javax.swing.JScrollPane();
        jTextPaneTass64SemicolonBlockComment = new javax.swing.JTextPane();
        jRadioButtontass64DotIfFiBlockComment = new javax.swing.JRadioButton();
        jScrollPaneTass64DotIfFiBlockComment = new javax.swing.JScrollPane();
        jTextPaneTass664DotIfFiBlockComment1 = new javax.swing.JTextPane();
        jRadioButtonTass64DotCommentBlockComment = new javax.swing.JRadioButton();
        jScrollPaneTass64DotComment = new javax.swing.JScrollPane();
        jTextPaneTass64DotCommentBlockComment = new javax.swing.JTextPane();
        jLabelTass64LabelDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64LabelNameColon = new javax.swing.JRadioButton();
        jScrollPaneTass64LabelName = new javax.swing.JScrollPane();
        jTextPaneTass64LabelNameColon = new javax.swing.JTextPane();
        jLabelTass64WordDeclaration = new javax.swing.JLabel();
        jLabelTass64ByteDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64DotByte = new javax.swing.JRadioButton();
        jRadioButtonTass64DotWord = new javax.swing.JRadioButton();
        jScrollPaneTass64DotWord = new javax.swing.JScrollPane();
        jTextPaneTass64DotWord = new javax.swing.JTextPane();
        jScrollPaneTass64DotByte = new javax.swing.JScrollPane();
        jTextPaneTass64DotByte = new javax.swing.JTextPane();
        jRadioButtonTass64DotCharByte = new javax.swing.JRadioButton();
        jRadioButtonTass64DotSintWord = new javax.swing.JRadioButton();
        jScrollPaneTass64DotSintWord = new javax.swing.JScrollPane();
        jTextPaneTass64DotSintWord = new javax.swing.JTextPane();
        jScrollPaneTass64DotCharByte = new javax.swing.JScrollPane();
        jTextPaneTass64DotCharByte = new javax.swing.JTextPane();
        jLabelTass64MonoSpriteDeclaration = new javax.swing.JLabel();
        jLabelTass64MultiSpriteDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64ByteHexMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonTass64ByteHexMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneTass64ByteHexMultiSprite = new javax.swing.JScrollPane();
        TmpxPaneTass64ByteHexMultiSprite = new javax.swing.JTextPane();
        jScrollPaneTass64ByteHexMonoSprite = new javax.swing.JScrollPane();
        jTextPaneTass64ByteHexMonoSprite = new javax.swing.JTextPane();
        jRadioButtonTass64ByteBinMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonTass64ByteBinMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneTass64ByteBinMultiSprite = new javax.swing.JScrollPane();
        jTextPaneTass64ByteBinMultiSprite = new javax.swing.JTextPane();
        jScrollPaneTass64ByteBinMonoSprite = new javax.swing.JScrollPane();
        jTextPaneTass64ByteBinMonoSprite = new javax.swing.JTextPane();
        jRadioButtonTass64MacroHexMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonTass64MacroHexMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneTass64MacroHexMultiSprite = new javax.swing.JScrollPane();
        jTextPaneTass64MacroHexMultiSprite = new javax.swing.JTextPane();
        jScrollPaneTass64MacroHexMonoSprite = new javax.swing.JScrollPane();
        jTextPaneTass64MacroHexMonoSprite = new javax.swing.JTextPane();
        jRadioButtonTass64MacroBinMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonTass64MacroBinMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneTass64MacroBinMultiSprite = new javax.swing.JScrollPane();
        jTextPaneTass64MacroBinMultiSprite = new javax.swing.JTextPane();
        jScrollPaneTass64MacroBinMonoSprite = new javax.swing.JScrollPane();
        jTextPaneTass64MacroBinMonoSprite = new javax.swing.JTextPane();
        jLabelTass64TribyteDeclaration = new javax.swing.JLabel();
        jRadioButtonDotTass64LongTribyte = new javax.swing.JRadioButton();
        jScrollPaneTass64DotLongTribyte = new javax.swing.JScrollPane();
        jTextPaneTass64DotLongTribyte = new javax.swing.JTextPane();
        jRadioButtonTass64DotLintTribyte = new javax.swing.JRadioButton();
        jScrollPaneTass64DotLintTribyte = new javax.swing.JScrollPane();
        jTextPaneTass64DotLintTribyte = new javax.swing.JTextPane();
        jLabelTass64LongDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64DotDwordLong = new javax.swing.JRadioButton();
        jScrollPaneTass64DotDwordLong = new javax.swing.JScrollPane();
        jTextPaneTass64DotDwordLong = new javax.swing.JTextPane();
        jRadioButtonTass64DotDlintLong = new javax.swing.JRadioButton();
        jScrollPaneTass64DotDlintLong = new javax.swing.JScrollPane();
        jTextPaneTass64DotDlintLong = new javax.swing.JTextPane();
        jLabelTass65WordSwappedDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64MacroWordSwapped = new javax.swing.JRadioButton();
        jScrollPaneTass64MacroWordSwapped = new javax.swing.JScrollPane();
        jTextPaneTass64MacroWordSwapped = new javax.swing.JTextPane();
        jLabelTass65TextDeclaration = new javax.swing.JLabel();
        jRadioButtonTass64DotText = new javax.swing.JRadioButton();
        jScrollPaneTass64DotText = new javax.swing.JScrollPane();
        jTextPaneTass64DotText = new javax.swing.JTextPane();
        jPanelLook = new javax.swing.JPanel();
        jRadioButtonLookJava = new javax.swing.JRadioButton();
        jRadioButtonLookMac = new javax.swing.JRadioButton();
        jRadioButtonLookMetal = new javax.swing.JRadioButton();
        jRadioButtonLookWin = new javax.swing.JRadioButton();
        jRadioButtonLookGtk = new javax.swing.JRadioButton();
        jRadioButtonLookNimbus = new javax.swing.JRadioButton();
        jLabelLook = new javax.swing.JLabel();
        jLabelTheme = new javax.swing.JLabel();
        jRadioButtonOcean = new javax.swing.JRadioButton();
        jRadioButtonSteel = new javax.swing.JRadioButton();
        jRadioButtonAqua = new javax.swing.JRadioButton();
        jRadioButtonCharcoal = new javax.swing.JRadioButton();
        jRadioButtonHighContrast = new javax.swing.JRadioButton();
        jRadioButtonEmerald = new javax.swing.JRadioButton();
        jRadioButtonRuby = new javax.swing.JRadioButton();
        jRadioButtonLookCWin = new javax.swing.JRadioButton();
        jLabelBracket = new javax.swing.JLabel();
        jRadioButtonLookSynth = new javax.swing.JRadioButton();
        jLabelArrow = new javax.swing.JLabel();
        jScrollPaneList = new javax.swing.JScrollPane();
        jListLaf = new javax.swing.JList<>();
        jLabelFlatLaf = new javax.swing.JLabel();
        jPanelDn = new javax.swing.JPanel();
        jButtonLoad = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanelOption.setLayout(new java.awt.BorderLayout());

        jTabbedPaneOption.setFocusable(false);
        jTabbedPaneOption.setName("Options"); // NOI18N
        jTabbedPaneOption.setPreferredSize(new java.awt.Dimension(831, 842));

        jLabelIllegalOpcodeStyle.setText("Illegal opcode style:");

        buttonGroupIllegalOpcodeStyle.add(jRadioButtonStyle1);
        jRadioButtonStyle1.setSelected(true);
        jRadioButtonStyle1.setText("ANE, ISB, SHY, SHS");
        jRadioButtonStyle1.setToolTipText("Mode use by John west and Marko M\"akel\"a");
        jRadioButtonStyle1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonStyle1ItemStateChanged(evt);
            }
        });

        buttonGroupIllegalOpcodeStyle.add(jRadioButtonStyle2);
        jRadioButtonStyle2.setText("AXA, ISC, SYH, SSH");
        jRadioButtonStyle2.setToolTipText("Mode use by Juergen Buchmueller");
        jRadioButtonStyle2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonStyle2ItemStateChanged(evt);
            }
        });

        buttonGroupIllegalOpcodeStyle.add(jRadioButtonStyle3);
        jRadioButtonStyle3.setText("XAA, INS, SAY, TAS");
        jRadioButtonStyle3.setToolTipText("Mode use by Adam Vardy");
        jRadioButtonStyle3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonStyle3ItemStateChanged(evt);
            }
        });

        jLabelLanguage.setText("Language of comments:");

        buttonGroupLanguage.add(jRadioButtonLangEnglish);
        jRadioButtonLangEnglish.setSelected(true);
        jRadioButtonLangEnglish.setText("English");
        jRadioButtonLangEnglish.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLangEnglishItemStateChanged(evt);
            }
        });

        buttonGroupLanguage.add(jRadioButtonLangItalian);
        jRadioButtonLangItalian.setText("Italian");
        jRadioButtonLangItalian.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLangItalianItemStateChanged(evt);
            }
        });

        jCheckBoxEraseDComm.setSelected(true);
        jCheckBoxEraseDComm.setText("Erase DASM automatic comment when mark a memory location as Data");
        jCheckBoxEraseDComm.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxEraseDCommItemStateChanged(evt);
            }
        });

        jCheckBoxOpcodeFormattingPreview.setSelected(true);
        jCheckBoxOpcodeFormattingPreview.setText("Opcode formatting as Upper case (NOP, JMP, ...) insteas of Lower case (nop, jmp, ...) for preview");
        jCheckBoxOpcodeFormattingPreview.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxOpcodeFormattingPreviewItemStateChanged(evt);
            }
        });

        jCheckBoxUndefinedCode.setSelected(true);
        jCheckBoxUndefinedCode.setText("Undefined code/data used as code instead of data");
        jCheckBoxUndefinedCode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxUndefinedCodeItemStateChanged(evt);
            }
        });

        jSpinnerMaxLength.setModel(new javax.swing.SpinnerNumberModel(25, 5, 40, 1));
        jSpinnerMaxLength.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaxLengthStateChanged(evt);
            }
        });

        jLabelMaxLength.setText("Max lenght of label (some assembler has a limit):");

        jLabelAggregate.setText("Aggregate up to X values on a data row of type:");

        jSpinnerMaxByteAggregate.setModel(new javax.swing.SpinnerNumberModel(8, 2, 8, 1));
        jSpinnerMaxByteAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaxByteAggregateStateChanged(evt);
            }
        });

        jLabelPSIDinitsong.setText("PSID init songs label:");

        jTextFieldInitSongs.setText("initSongs");
        jTextFieldInitSongs.setToolTipText("Label to use for the PSID starting init routine");
        jTextFieldInitSongs.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldInitSongsFocusLost(evt);
            }
        });

        jLabelPSIDplaysound.setText("PSID play sound label:");

        jTextFieldPlaySound.setText("playSound");
        jTextFieldPlaySound.setToolTipText("Label to use for PSID play sound routine");
        jTextFieldPlaySound.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldPlaySoundFocusLost(evt);
            }
        });

        jLabelSIDfreqLo.setText("SID frequency table low label:");

        jTextFieldSidFreqLo.setText("frequencyLo");
        jTextFieldSidFreqLo.setToolTipText("Label to use for low address of frequency table");
        jTextFieldSidFreqLo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldSidFreqLoFocusLost(evt);
            }
        });

        jLabelSIDfreqHi.setText("SID frequency table high label:");

        jTextFieldSidFreqHi.setText("frequencyHi");
        jTextFieldSidFreqHi.setToolTipText("Label to use for high address of frequenct table");
        jTextFieldSidFreqHi.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldSidFreqHiFocusLost(evt);
            }
        });

        jCheckBoxOpcodeFormattingSource.setText("Opcode formatting as Upper case (NOP, JMP, ...) insteas of Lower case (nop, jmp, ...) for source");
        jCheckBoxOpcodeFormattingSource.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxOpcodeFormattingSourceItemStateChanged(evt);
            }
        });

        jCheckBoxErasePlus.setSelected(true);
        jCheckBoxErasePlus.setText("Erase relative + address when mark a memory location as Data");
        jCheckBoxErasePlus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxErasePlusItemStateChanged(evt);
            }
        });

        jLabelInstrSep.setText("Instruction separator in start of row of source:");

        jSpinnerInstrSpaces.setModel(new javax.swing.SpinnerNumberModel(6, 0, 20, 1));
        jSpinnerInstrSpaces.setToolTipText("At least 1 space or 1 tabs is necessary");
        jSpinnerInstrSpaces.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerInstrSpacesStateChanged(evt);
            }
        });

        jSpinnerInstrTabs.setModel(new javax.swing.SpinnerNumberModel(0, 0, 8, 1));
        jSpinnerInstrTabs.setToolTipText("At least 1 space or 1 tabs is necessary");
        jSpinnerInstrTabs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerInstrTabsStateChanged(evt);
            }
        });

        jLabelInstrSpace.setText("Spaces:");

        jLabelInstrTabs.setText("Tabs:");

        jLabelDataSep.setText("Data separator in start of row of source:");

        jLabelDataSpace.setText("Spaces:");

        jSpinnerDataSpaces.setModel(new javax.swing.SpinnerNumberModel(2, 0, 20, 1));
        jSpinnerDataSpaces.setToolTipText("At least 1 space or 1 tabs is necessary");
        jSpinnerDataSpaces.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerDataSpacesStateChanged(evt);
            }
        });

        jLabelDataTabs.setText("Tabs:");

        jSpinnerDataTabs.setModel(new javax.swing.SpinnerNumberModel(0, 0, 8, 1));
        jSpinnerDataTabs.setToolTipText("At least 1 space or 1 tabs is necessary");
        jSpinnerDataTabs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerDataTabsStateChanged(evt);
            }
        });

        jCheckBoxLabel.setText("Label is on a separated line from instruction");
        jCheckBoxLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxLabelActionPerformed(evt);
            }
        });

        jLabelMaxByte.setText("Byte:");

        jLabelMaxWord.setText("Word:");

        jSpinnerMaxWordAggregate.setModel(new javax.swing.SpinnerNumberModel(4, 2, 8, 1));
        jSpinnerMaxWordAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaxWordAggregateStateChanged(evt);
            }
        });

        jLabelMaxTribyte.setText("Tribyte:");

        jSpinnerMaxTribyteAggregate.setModel(new javax.swing.SpinnerNumberModel(3, 2, 8, 1));
        jSpinnerMaxTribyteAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaxTribyteAggregateStateChanged(evt);
            }
        });

        jLabelMaxLong.setText("Long:");

        jSpinnerMaxLongAggregate.setModel(new javax.swing.SpinnerNumberModel(4, 2, 8, 1));
        jSpinnerMaxLongAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaxLongAggregateStateChanged(evt);
            }
        });

        jLabelTmpPath.setText("Temp. Path for assembler compilation:");

        jTextFieldTmpPath.setEditable(false);

        jButtonBrowse.setText("Browse");
        jButtonBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseActionPerformed(evt);
            }
        });

        jLabelMaxSwapped.setText("Swapped");

        jSpinnerMaxSwappedAggregate.setModel(new javax.swing.SpinnerNumberModel(4, 2, 8, 1));
        jSpinnerMaxSwappedAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaxSwappedAggregateStateChanged(evt);
            }
        });

        jLabelMaxText.setText("Text:");

        jSpinnerMaxTextAggregate.setModel(new javax.swing.SpinnerNumberModel(32, 2, 40, 1));
        jSpinnerMaxTextAggregate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMaxTextAggregateStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelPreviewLayout = new javax.swing.GroupLayout(jPanelPreview);
        jPanelPreview.setLayout(jPanelPreviewLayout);
        jPanelPreviewLayout.setHorizontalGroup(
            jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelIllegalOpcodeStyle, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelLanguage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                .addComponent(jRadioButtonStyle1)
                                .addGap(47, 47, 47)
                                .addComponent(jRadioButtonStyle2, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButtonStyle3))
                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                .addComponent(jRadioButtonLangEnglish, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonLangItalian)))
                        .addContainerGap(45, Short.MAX_VALUE))
                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelPSIDinitsong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelSIDfreqLo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelPSIDplaysound, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelInstrSep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelSIDfreqHi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelDataSep, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24)
                                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldPlaySound, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldInitSongs, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldSidFreqLo, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldSidFreqHi, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                                .addComponent(jLabelInstrSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jSpinnerInstrSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                                .addComponent(jLabelDataSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jSpinnerDataSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelInstrTabs)
                                            .addComponent(jLabelDataTabs))
                                        .addGap(10, 10, 10)
                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jSpinnerDataTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSpinnerInstrTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(jCheckBoxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelMaxLength, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxUndefinedCode, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxErasePlus, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxEraseDComm, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxOpcodeFormattingSource, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxOpcodeFormattingPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                .addComponent(jLabelTmpPath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldTmpPath, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonBrowse))
                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                .addGap(405, 405, 405)
                                .addComponent(jSpinnerMaxLength, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                        .addGap(405, 405, 405)
                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelMaxByte, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabelMaxTribyte, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabelMaxSwapped, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabelAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                        .addComponent(jSpinnerMaxSwappedAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(24, 24, 24)
                                        .addComponent(jLabelMaxText, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSpinnerMaxTextAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jSpinnerMaxTribyteAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSpinnerMaxByteAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(24, 24, 24)
                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelMaxWord, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabelMaxLong, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jSpinnerMaxLongAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSpinnerMaxWordAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanelPreviewLayout.setVerticalGroup(
            jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPreviewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelIllegalOpcodeStyle)
                    .addComponent(jRadioButtonStyle1)
                    .addComponent(jRadioButtonStyle2)
                    .addComponent(jRadioButtonStyle3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelLanguage)
                    .addComponent(jRadioButtonLangEnglish)
                    .addComponent(jRadioButtonLangItalian))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxOpcodeFormattingPreview)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxOpcodeFormattingSource)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxEraseDComm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxErasePlus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxUndefinedCode)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelMaxByte)
                            .addComponent(jSpinnerMaxByteAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelMaxWord)
                            .addComponent(jSpinnerMaxWordAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelMaxTribyte)
                            .addComponent(jSpinnerMaxTribyteAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelMaxLong)
                            .addComponent(jSpinnerMaxLongAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelMaxSwapped)
                            .addComponent(jSpinnerMaxSwappedAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelMaxText)
                            .addComponent(jSpinnerMaxTextAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelPreviewLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabelAggregate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerMaxLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMaxLength))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPSIDinitsong)
                    .addComponent(jTextFieldInitSongs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPSIDplaysound)
                    .addComponent(jTextFieldPlaySound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSIDfreqLo)
                    .addComponent(jTextFieldSidFreqLo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSIDfreqHi)
                    .addComponent(jTextFieldSidFreqHi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelInstrSep)
                    .addComponent(jLabelInstrSpace)
                    .addComponent(jSpinnerInstrSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelInstrTabs)
                    .addComponent(jSpinnerInstrTabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelDataSep)
                    .addComponent(jLabelDataSpace)
                    .addComponent(jSpinnerDataSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDataTabs)
                    .addComponent(jSpinnerDataTabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTmpPath)
                    .addComponent(jTextFieldTmpPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowse))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPaneOption.addTab("Option", jPanelPreview);

        jLabelautocomment.setText("Automatic add comments to those known locations:");

        jCheckBoxC64ZeroPage.setSelected(true);
        jCheckBoxC64ZeroPage.setText("Zero page area ($00..$FF)");
        jCheckBoxC64ZeroPage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64ZeroPageItemStateChanged(evt);
            }
        });

        jCheckBoxC64StackArea.setSelected(true);
        jCheckBoxC64StackArea.setText("Stack area ($100..$1FF)");
        jCheckBoxC64StackArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64StackAreaItemStateChanged(evt);
            }
        });

        jCheckBoxC64_200Area.setSelected(true);
        jCheckBoxC64_200Area.setText("Support area for BASIC/KERNAL part 1 ($200..$2FF)");
        jCheckBoxC64_200Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64_200AreaItemStateChanged(evt);
            }
        });

        jCheckBoxC64_300Area.setSelected(true);
        jCheckBoxC64_300Area.setText("Support area for BASIC/KERNAL part 2 ($300..$3FF)");
        jCheckBoxC64_300Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64_300AreaItemStateChanged(evt);
            }
        });

        jCheckBoxC64ScreenArea.setSelected(true);
        jCheckBoxC64ScreenArea.setText("Screen area ($400..$7FF)");
        jCheckBoxC64ScreenArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64ScreenAreaItemStateChanged(evt);
            }
        });

        jCheckBoxC64FreeArea.setText("BASIC (free) area ($800..$9FFF)");
        jCheckBoxC64FreeArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64FreeAreaItemStateChanged(evt);
            }
        });

        jCheckBoxC64BasicRom.setSelected(true);
        jCheckBoxC64BasicRom.setText("BASIC ROM ($A000..$BFFF)");
        jCheckBoxC64BasicRom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64BasicRomItemStateChanged(evt);
            }
        });

        jCheckBoxC64FreeRam.setSelected(true);
        jCheckBoxC64FreeRam.setText("Free Ram ($C000..$CFFF)");
        jCheckBoxC64FreeRam.setEnabled(false);
        jCheckBoxC64FreeRam.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64FreeRamItemStateChanged(evt);
            }
        });

        jCheckC64BoxVicII.setSelected(true);
        jCheckC64BoxVicII.setText("VIC II chip ($D000..$D3FF)");
        jCheckC64BoxVicII.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckC64BoxVicIIItemStateChanged(evt);
            }
        });

        jCheckC64BoxSid.setSelected(true);
        jCheckC64BoxSid.setText("SID chip ($D400..$D7FF)");
        jCheckC64BoxSid.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckC64BoxSidItemStateChanged(evt);
            }
        });

        jCheckBoxC64Color.setSelected(true);
        jCheckBoxC64Color.setText("Color RAM ($D800..$DBFF)");
        jCheckBoxC64Color.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64ColorItemStateChanged(evt);
            }
        });

        jCheckBoxC64Cia1.setSelected(true);
        jCheckBoxC64Cia1.setText("CIA 1 ($DC00..$DCFF)");
        jCheckBoxC64Cia1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64Cia1ItemStateChanged(evt);
            }
        });

        jCheckBoxC64Cia2.setSelected(true);
        jCheckBoxC64Cia2.setText("CIA 2 ($DD00..$DDFF)");
        jCheckBoxC64Cia2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64Cia2ItemStateChanged(evt);
            }
        });

        jCheckBoxC64KernalRom.setSelected(true);
        jCheckBoxC64KernalRom.setText("KERNAL ROM ($E000..$FFFF)");
        jCheckBoxC64KernalRom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC64KernalRomItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelC64CommLayout = new javax.swing.GroupLayout(jPanelC64Comm);
        jPanelC64Comm.setLayout(jPanelC64CommLayout);
        jPanelC64CommLayout.setHorizontalGroup(
            jPanelC64CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelC64CommLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelC64CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jCheckBoxC64ScreenArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64KernalRom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64Cia1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64Color, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckC64BoxSid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckC64BoxVicII, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64FreeRam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64FreeArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64_200Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64StackArea, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64ZeroPage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64_300Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64BasicRom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC64Cia2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelC64CommLayout.setVerticalGroup(
            jPanelC64CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelC64CommLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxC64ZeroPage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64StackArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64_200Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64_300Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64ScreenArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64FreeArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64BasicRom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64FreeRam)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckC64BoxVicII)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckC64BoxSid)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64Color)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64Cia1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64Cia2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC64KernalRom)
                .addContainerGap(469, Short.MAX_VALUE))
        );

        jTabbedPaneComm.addTab("C64", jPanelC64Comm);

        jCheckBoxC1541ZeroPage.setSelected(true);
        jCheckBoxC1541ZeroPage.setText("Zero page area ($00..$FF)");
        jCheckBoxC1541ZeroPage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541ZeroPageItemStateChanged(evt);
            }
        });

        jCheckBoxC1541StackArea.setSelected(true);
        jCheckBoxC1541StackArea.setText("Stack area ($100..$1FF)");
        jCheckBoxC1541StackArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541StackAreaItemStateChanged(evt);
            }
        });

        jCheckBoxC1541_200Area.setSelected(true);
        jCheckBoxC1541_200Area.setText("Support area for KERNAL  ($200..$2FF)");
        jCheckBoxC1541_200Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541_200AreaItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Via1.setSelected(true);
        jCheckBoxC1541Via1.setText("VIA #1 ($1800..$180F)");
        jCheckBoxC1541Via1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Via1ItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Via2.setSelected(true);
        jCheckBoxC1541Via2.setText("VIA #2 ($1C00..$1C0F)");
        jCheckBoxC1541Via2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Via2ItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Kernal.setSelected(true);
        jCheckBoxC1541Kernal.setText("Kernal ($C000..$FFFF)");
        jCheckBoxC1541Kernal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541KernalItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Buffer0.setText("Buffer #0 ($300..$3FF)");
        jCheckBoxC1541Buffer0.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Buffer0ItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Buffer1.setText("Buffer #1 ($400..$4FF)");
        jCheckBoxC1541Buffer1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Buffer1ItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Buffer2.setText("Buffer #2 ($500..$5FF)");
        jCheckBoxC1541Buffer2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Buffer2ItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Buffer3.setText("Buffer #3 ($600..$6FF)");
        jCheckBoxC1541Buffer3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Buffer3ItemStateChanged(evt);
            }
        });

        jCheckBoxC1541Buffer4.setText("Buffer #4 ($700..$7FF)");
        jCheckBoxC1541Buffer4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC1541Buffer4ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelC1541CommLayout = new javax.swing.GroupLayout(jPanelC1541Comm);
        jPanelC1541Comm.setLayout(jPanelC1541CommLayout);
        jPanelC1541CommLayout.setHorizontalGroup(
            jPanelC1541CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelC1541CommLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelC1541CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCheckBoxC1541Buffer4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Buffer3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Buffer2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Buffer1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Buffer0, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Kernal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Via2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541Via1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541_200Area, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541StackArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC1541ZeroPage, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE))
                .addGap(379, 379, 379))
        );
        jPanelC1541CommLayout.setVerticalGroup(
            jPanelC1541CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelC1541CommLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxC1541ZeroPage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541StackArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541_200Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Buffer0)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Buffer1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Buffer2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Buffer3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Buffer4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Via1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Via2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC1541Kernal)
                .addContainerGap(538, Short.MAX_VALUE))
        );

        jTabbedPaneComm.addTab("C1541", jPanelC1541Comm);

        jCheckBoxC128ZeroPage.setSelected(true);
        jCheckBoxC128ZeroPage.setText("Zero page area ($00..$FF)");
        jCheckBoxC128ZeroPage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128ZeroPageItemStateChanged(evt);
            }
        });

        jCheckBoxC128StackArea.setSelected(true);
        jCheckBoxC128StackArea.setText("Stack area ($100..$1FF)");
        jCheckBoxC128StackArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128StackAreaItemStateChanged(evt);
            }
        });

        jCheckBoxC128_300Area.setSelected(true);
        jCheckBoxC128_300Area.setText("Support area for BASIC/KERNAL part 2 ($300..$3FF)");
        jCheckBoxC128_300Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128_300AreaItemStateChanged(evt);
            }
        });

        jCheckBoxC128_200Area.setSelected(true);
        jCheckBoxC128_200Area.setText("Support area for BASIC/KERNAL part 1 ($200..$2FF)");
        jCheckBoxC128_200Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128_200AreaItemStateChanged(evt);
            }
        });

        jCheckBoxC128ScreenArea.setSelected(true);
        jCheckBoxC128ScreenArea.setText("Screen area ($400..$7E7)");
        jCheckBoxC128ScreenArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128ScreenAreaItemStateChanged(evt);
            }
        });

        jCheckBoxC128UserBasic.setSelected(true);
        jCheckBoxC128UserBasic.setText("User BASIC area ($7E8..$12FF)");
        jCheckBoxC128UserBasic.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128UserBasicItemStateChanged(evt);
            }
        });

        jCheckBoxC128AppProgArea.setText("Application program area ($1300..$1BFF)");
        jCheckBoxC128AppProgArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128AppProgAreaItemStateChanged(evt);
            }
        });

        jCheckBoxC128VideoColor.setText("Video Color ($1C00..$1FFF)");
        jCheckBoxC128VideoColor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128VideoColorItemStateChanged(evt);
            }
        });

        jCheckBoxC128ScreenMem.setText("Screen memory ($2000..$3FFF)");
        jCheckBoxC128ScreenMem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128ScreenMemItemStateChanged(evt);
            }
        });

        jCheckBoxC128Color.setSelected(true);
        jCheckBoxC128Color.setText("Color RAM ($D800..$DBFF)");
        jCheckBoxC128Color.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128ColorItemStateChanged(evt);
            }
        });

        jCheckBoxC128BasicRom.setSelected(true);
        jCheckBoxC128BasicRom.setText("BASIC ROM ($4000..$CFFF)");
        jCheckBoxC128BasicRom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128BasicRomItemStateChanged(evt);
            }
        });

        jCheckBoxC128VicII.setSelected(true);
        jCheckBoxC128VicII.setText("VIC II chip ($D000..$D3FF)");
        jCheckBoxC128VicII.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128VicIIItemStateChanged(evt);
            }
        });

        jCheckBoxC128Sid.setSelected(true);
        jCheckBoxC128Sid.setText("SID chip ($D400..$D4FF)");
        jCheckBoxC128Sid.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128SidItemStateChanged(evt);
            }
        });

        jCheckBoxC128MMU.setSelected(true);
        jCheckBoxC128MMU.setText("MMU ($D500..$D50B)");
        jCheckBoxC128MMU.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128MMUItemStateChanged(evt);
            }
        });

        jCheckBoxC128VDC.setSelected(true);
        jCheckBoxC128VDC.setText("VDC ($D600..$D624)");
        jCheckBoxC128VDC.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128VDCItemStateChanged(evt);
            }
        });

        jCheckBoxC128Cia1.setSelected(true);
        jCheckBoxC128Cia1.setText("CIA 1 ($DC00..$DCFF)");
        jCheckBoxC128Cia1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128Cia1ItemStateChanged(evt);
            }
        });

        jCheckBoxC128Cia2.setSelected(true);
        jCheckBoxC128Cia2.setText("CIA 2 ($DD00..$DDFF)");
        jCheckBoxC128Cia2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128Cia2ItemStateChanged(evt);
            }
        });

        jCheckBoxC128DMA.setSelected(true);
        jCheckBoxC128DMA.setText("DMA Controller ($DF00..$DF0A)");
        jCheckBoxC128DMA.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128DMAItemStateChanged(evt);
            }
        });

        jCheckBoxC128KernalRom.setSelected(true);
        jCheckBoxC128KernalRom.setText("KERNAL ROM ($E000..$FFFF)");
        jCheckBoxC128KernalRom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxC128KernalRomItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelC128CommLayout = new javax.swing.GroupLayout(jPanelC128Comm);
        jPanelC128Comm.setLayout(jPanelC128CommLayout);
        jPanelC128CommLayout.setHorizontalGroup(
            jPanelC128CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelC128CommLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelC128CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxC128ZeroPage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128StackArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128_200Area, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128_300Area, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128ScreenArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128UserBasic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128AppProgArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128VideoColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128ScreenMem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128BasicRom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128VicII)
                    .addComponent(jCheckBoxC128Sid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128MMU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxC128VDC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jPanelC128CommLayout.createSequentialGroup()
                .addGroup(jPanelC128CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelC128CommLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jCheckBoxC128Color, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelC128CommLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelC128CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jCheckBoxC128Cia1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxC128Cia2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxC128DMA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxC128KernalRom, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(411, Short.MAX_VALUE))
        );
        jPanelC128CommLayout.setVerticalGroup(
            jPanelC128CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelC128CommLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxC128ZeroPage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128StackArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128_200Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128_300Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128ScreenArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128UserBasic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128AppProgArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128VideoColor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128ScreenMem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128BasicRom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128VicII)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128Sid)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128MMU)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128VDC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128Color)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128Cia1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128Cia2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128DMA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxC128KernalRom)
                .addContainerGap(354, Short.MAX_VALUE))
        );

        jTabbedPaneComm.addTab("C128", jPanelC128Comm);

        jCheckBoxVic20StackArea.setSelected(true);
        jCheckBoxVic20StackArea.setText("Stack area ($100..$1FF)");
        jCheckBoxVic20StackArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20StackAreaItemStateChanged(evt);
            }
        });

        jCheckBoxVic20ZeroPage.setSelected(true);
        jCheckBoxVic20ZeroPage.setText("Zero page area ($00..$FF)");
        jCheckBoxVic20ZeroPage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20ZeroPageItemStateChanged(evt);
            }
        });

        jCheckBoxVic20_200Area.setSelected(true);
        jCheckBoxVic20_200Area.setText("Support area for BASIC/KERNAL part 1 ($200..$2FF)");
        jCheckBoxVic20_200Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20_200AreaItemStateChanged(evt);
            }
        });

        jCheckBoxVic20_300Area.setSelected(true);
        jCheckBoxVic20_300Area.setText("Support area for BASIC/KERNAL part 2 ($300..$3FF)");
        jCheckBoxVic20_300Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20_300AreaItemStateChanged(evt);
            }
        });

        jCheckBoxVic20_400Area.setSelected(true);
        jCheckBoxVic20_400Area.setText("Support area for BASIC/KERNAL part 3 ($400..$4FF)");
        jCheckBoxVic20_400Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20_400AreaItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Vic.setSelected(true);
        jCheckBoxVic20Vic.setText("VIC ($9000..$900F)");
        jCheckBoxVic20Vic.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20VicItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Via1.setSelected(true);
        jCheckBoxVic20Via1.setText("Via #1 ($9010..$901F)");
        jCheckBoxVic20Via1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20Via1ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Via2.setSelected(true);
        jCheckBoxVic20Via2.setText("Via #2 ($9020..$902F)");
        jCheckBoxVic20Via2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20Via2ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20UserBasic.setText("User BASIC area ($1000..$1DFF)");
        jCheckBoxVic20UserBasic.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20UserBasicItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Screen.setText("Screen memory ($1E00..$1FFF)");
        jCheckBoxVic20Screen.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20ScreenItemStateChanged(evt);
            }
        });

        jCheckBoxVic20_8kExp1.setText("8K expansion block 1 ($2000..$3FFF)");
        jCheckBoxVic20_8kExp1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20_8kExp1ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20_8kExp2.setText("8K expansion block 2 ($4000..$5FFF)");
        jCheckBoxVic20_8kExp2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20_8kExp2ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20_8kExp3.setText("8K expansion block 3 ($6000..$7FFF)");
        jCheckBoxVic20_8kExp3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20_8kExp3ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Character.setText("4K character ($8000..$8FFF)");
        jCheckBoxVic20Character.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20CharacterItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Color.setText("Color RAM ($9400..$97FF)");
        jCheckBoxVic20Color.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20ColorItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Block2.setText("I/O block 2 ($9800..$9BFF)");
        jCheckBoxVic20Block2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20Block2ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Block3.setText("I/O block 3 ($9C00..$9FFF)");
        jCheckBoxVic20Block3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20Block3ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20Block4.setText("8K decoded ($A0000..$BFFF)");
        jCheckBoxVic20Block4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20Block4ItemStateChanged(evt);
            }
        });

        jCheckBoxVic20BasicRom.setSelected(true);
        jCheckBoxVic20BasicRom.setText("BASIC ROM ($C0000..$DFFF)");
        jCheckBoxVic20BasicRom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20BasicRomItemStateChanged(evt);
            }
        });

        jCheckBoxVic20KernalRom.setSelected(true);
        jCheckBoxVic20KernalRom.setText("KERNAL ROM ($E0000..$FFFF)");
        jCheckBoxVic20KernalRom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVic20KernalRomItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelVic20CommLayout = new javax.swing.GroupLayout(jPanelVic20Comm);
        jPanelVic20Comm.setLayout(jPanelVic20CommLayout);
        jPanelVic20CommLayout.setHorizontalGroup(
            jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelVic20CommLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxVic20ZeroPage, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jCheckBoxVic20StackArea, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20Color, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20Via2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20Via1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20Vic, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20Character, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20_8kExp3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20_8kExp2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20_8kExp1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20Screen, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20UserBasic, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20_400Area, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jCheckBoxVic20_300Area, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jCheckBoxVic20_200Area, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(jCheckBoxVic20Block2, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jCheckBoxVic20Block3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20Block4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20BasicRom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxVic20KernalRom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(405, Short.MAX_VALUE))
        );
        jPanelVic20CommLayout.setVerticalGroup(
            jPanelVic20CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelVic20CommLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxVic20ZeroPage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20StackArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20_200Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20_300Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20_400Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20UserBasic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Screen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20_8kExp1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20_8kExp2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20_8kExp3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Character)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Vic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Via1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Via2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Color)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Block2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Block3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20Block4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20BasicRom, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVic20KernalRom, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPaneComm.addTab("Vic20", jPanelVic20Comm);

        jCheckBoxPlus4ZeroPage.setSelected(true);
        jCheckBoxPlus4ZeroPage.setText("Zero page area ($00..$FF)");
        jCheckBoxPlus4ZeroPage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4ZeroPageItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4StackArea.setSelected(true);
        jCheckBoxPlus4StackArea.setText("Stack area ($100..$1FF)");
        jCheckBoxPlus4StackArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4StackAreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_200Area.setSelected(true);
        jCheckBoxPlus4_200Area.setText("Support area for BASIC/KERNAL part 1 ($200..$2FF)");
        jCheckBoxPlus4_200Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_200AreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_300Area.setSelected(true);
        jCheckBoxPlus4_300Area.setText("Support area for BASIC/KERNAL part 2 ($300..$3FF)");
        jCheckBoxPlus4_300Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_300AreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_400Area.setSelected(true);
        jCheckBoxPlus4_400Area.setText("Support area for BASIC/KERNAL part 3 ($400..$4FF)");
        jCheckBoxPlus4_400Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_400AreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_500Area.setSelected(true);
        jCheckBoxPlus4_500Area.setText("Support area for BASIC/KERNAL part 4 ($500..$5FF)");
        jCheckBoxPlus4_500Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_500AreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_600Area.setSelected(true);
        jCheckBoxPlus4_600Area.setText("Support area for BASIC/KERNAL part 5 ($600..$6FF)");
        jCheckBoxPlus4_600Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_600AreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_700Area.setSelected(true);
        jCheckBoxPlus4_700Area.setText("Support area for BASIC/KERNAL part 6 ($700..$7FF)");
        jCheckBoxPlus4_700Area.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_700AreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4ColorArea.setText("Color memory ($800..$BFF)");
        jCheckBoxPlus4ColorArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4ColorAreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4VideoArea.setText("Video memory ($C00..$CFF)");
        jCheckBoxPlus4VideoArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4VideoAreaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4BasicRamP.setText("BASIC RAM without graphics ($1000..$17FF)");
        jCheckBoxPlus4BasicRamP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4BasicRamPItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4Luminance.setText("Luminance ($1800..$1BFF)");
        jCheckBoxPlus4Luminance.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4LuminanceItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4ColorBitmap.setText("Color for bitmap($1C00..$1FFF)");
        jCheckBoxPlus4ColorBitmap.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4ColorBitmapItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4GraphicData.setText("Graphics data ($2000..$3FFF)");
        jCheckBoxPlus4GraphicData.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4GraphicDataItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4BasicRamN.setText("BASIC RAM with graphics ($4000..$7FFF)");
        jCheckBoxPlus4BasicRamN.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4BasicRamNItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4BasicRom.setText("BASIC ROM ($8000..$BFFF)");
        jCheckBoxPlus4BasicRom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4BasicRomItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4BasicExt.setText("BASIC Expansion ($C000..$CFFF)");
        jCheckBoxPlus4BasicExt.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4BasicExtItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4Caracter.setText("Caracter table ($D000..$DFFF)");
        jCheckBoxPlus4Caracter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4CaracterItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4Acia.setSelected(true);
        jCheckBoxPlus4Acia.setText("6551 ACIA ($FD00..$FD0F)");
        jCheckBoxPlus4Acia.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4AciaItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_6529B_1.setSelected(true);
        jCheckBoxPlus4_6529B_1.setText("6529B #1 ($FD10..$FD1F)");
        jCheckBoxPlus4_6529B_1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_6529B_1ItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4_6529B_2.setSelected(true);
        jCheckBoxPlus4_6529B_2.setText("6529B #2 ($FD30..$FD3F)");
        jCheckBoxPlus4_6529B_2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4_6529B_2ItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4Ted.setSelected(true);
        jCheckBoxPlus4Ted.setText("TED ($FF00..$FF1F)");
        jCheckBoxPlus4Ted.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4TedItemStateChanged(evt);
            }
        });

        jCheckBoxPlus4Kernal.setSelected(true);
        jCheckBoxPlus4Kernal.setText("Kernal ($FF20..$FFFF)");
        jCheckBoxPlus4Kernal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxPlus4KernalItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanelPlus4CommLayout = new javax.swing.GroupLayout(jPanelPlus4Comm);
        jPanelPlus4Comm.setLayout(jPanelPlus4CommLayout);
        jPanelPlus4CommLayout.setHorizontalGroup(
            jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
                        .addComponent(jCheckBoxPlus4_200Area, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(382, 382, 382))
                    .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
                        .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jCheckBoxPlus4_600Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCheckBoxPlus4_700Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jCheckBoxPlus4ColorArea, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4VideoArea, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4BasicRamP, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4Luminance, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4ColorBitmap, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4GraphicData, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4BasicRamN, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4BasicRom, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4BasicExt, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4Caracter, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jCheckBoxPlus4_400Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCheckBoxPlus4_500Area, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jCheckBoxPlus4ZeroPage, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                                .addComponent(jCheckBoxPlus4StackArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jCheckBoxPlus4_300Area, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(393, Short.MAX_VALUE))
                    .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
                        .addGroup(jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxPlus4Ted, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4Kernal, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4_6529B_1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4_6529B_2, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxPlus4Acia, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanelPlus4CommLayout.setVerticalGroup(
            jPanelPlus4CommLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPlus4CommLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxPlus4ZeroPage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4StackArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4_200Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4_300Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4_400Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4_500Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4_600Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4_700Area)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4ColorArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4VideoArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4BasicRamP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4Luminance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4ColorBitmap)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4GraphicData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4BasicRamN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4BasicRom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4BasicExt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4Caracter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4Acia)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4_6529B_1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4_6529B_2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4Ted)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlus4Kernal)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPaneComm.addTab("Plus4", jPanelPlus4Comm);

        javax.swing.GroupLayout jPanelCommentLayout = new javax.swing.GroupLayout(jPanelComment);
        jPanelComment.setLayout(jPanelCommentLayout);
        jPanelCommentLayout.setHorizontalGroup(
            jPanelCommentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCommentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCommentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCommentLayout.createSequentialGroup()
                        .addComponent(jLabelautocomment, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTabbedPaneComm, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanelCommentLayout.setVerticalGroup(
            jPanelCommentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCommentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelautocomment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPaneComm)
                .addContainerGap())
        );

        jTabbedPaneOption.addTab("Comments", jPanelComment);

        jLabelAutoComment.setText("Apply the output assembler syntax of:");

        jComboBoxAssembler.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxAssemblerItemStateChanged(evt);
            }
        });

        jCheckBoxDasmF3Comp.setText("Make source compatible with -f3 option");
        jCheckBoxDasmF3Comp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxDasmF3CompActionPerformed(evt);
            }
        });

        jLabelDasmByteDeclaration.setText("Byte:");

        buttonGroupDasmByte.add(jRadioButtonDasmDotByte);
        jRadioButtonDasmDotByte.setSelected(true);
        jRadioButtonDasmDotByte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmDotByteItemStateChanged(evt);
            }
        });

        buttonGroupDasmByte.add(jRadioButtonDasmByte);
        jRadioButtonDasmByte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmByteItemStateChanged(evt);
            }
        });

        buttonGroupDasmByte.add(jRadioButtonDasmDcByte);
        jRadioButtonDasmDcByte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmDcByteItemStateChanged(evt);
            }
        });

        jLabelDasmLabelDeclaration.setText("Label:");

        buttonGroupDasmLabel.add(jRadioButtonDasmLabelName);
        jRadioButtonDasmLabelName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmLabelNameItemStateChanged(evt);
            }
        });

        buttonGroupDasmLabel.add(jRadioButtonDasmLabelNameColon);
        jRadioButtonDasmLabelNameColon.setSelected(true);
        jRadioButtonDasmLabelNameColon.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmLabelNameColonItemStateChanged(evt);
            }
        });

        buttonGroupDasmByte.add(jRadioButtonDasmDcBByte);
        jRadioButtonDasmDcBByte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmDcBByteItemStateChanged(evt);
            }
        });

        jLabelDasmWordDeclaration.setText("Word:");

        buttonGroupDasmWord.add(jRadioButtonDasmDotWord);
        jRadioButtonDasmDotWord.setSelected(true);
        jRadioButtonDasmDotWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmDotWordItemStateChanged(evt);
            }
        });

        buttonGroupDasmWord.add(jRadioButtonDasmWord);
        jRadioButtonDasmWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmWordItemStateChanged(evt);
            }
        });

        buttonGroupDasmWord.add(jRadioButtonDasmDcWWord);
        jRadioButtonDasmDcWWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmDcWWordItemStateChanged(evt);
            }
        });

        jScrollPaneDasmDotByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDotByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDotByte.setEditable(false);
        jTextPaneDasmDotByte.setContentType("text/html"); // NOI18N
        jTextPaneDasmDotByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .byte</b> <font color='red'>$xx</font><br>\n     <b> .byte</b> <font color='blue'>dd</font><br>\n     <b> .byte</b> <font color='green'>%bb</font><br>\n     <b> .byte</b> <font color='purple'>'c</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDotByte.setViewportView(jTextPaneDasmDotByte);
        jTextPaneDasmDotByte.getAccessibleContext().setAccessibleName("");

        jScrollPaneDasmByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmByte.setEditable(false);
        jTextPaneDasmByte.setContentType("text/html"); // NOI18N
        jTextPaneDasmByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> byte</b> <font color='red'>$xx</font><br>\n     <b> byte</b> <font color='blue'>dd</font><br>\n     <b> byte</b> <font color='green'>%bb</font><br>\n     <b> byte</b> <font color='purple'>'c</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmByte.setViewportView(jTextPaneDasmByte);

        jScrollPaneDasmDcByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDcByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDcByte.setEditable(false);
        jTextPaneDasmDcByte.setContentType("text/html"); // NOI18N
        jTextPaneDasmDcByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> dc</b> <font color='red'>$xx</font><br>\n     <b> dc</b> <font color='blue'>dd</font><br>\n     <b> dc</b> <font color='green'>%bb</font><br>\n     <b> dc</b> <font color='purple'>'c</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDcByte.setViewportView(jTextPaneDasmDcByte);

        jScrollPaneDasmDCBByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDCBByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDcBByte.setEditable(false);
        jTextPaneDasmDcBByte.setContentType("text/html"); // NOI18N
        jTextPaneDasmDcBByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> dc.b</b> <font color='red'>$xx</font><br>\n     <b> dc.b</b> <font color='blue'>dd</font><br>\n     <b> dc.b</b> <font color='green'>%bb</font><br>\n     <b> dc.b</b> <font color='purple'>'c</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDCBByte.setViewportView(jTextPaneDasmDcBByte);

        jScrollPaneDasmDotWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDotWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDotWord.setEditable(false);
        jTextPaneDasmDotWord.setContentType("text/html"); // NOI18N
        jTextPaneDasmDotWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .word</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDotWord.setViewportView(jTextPaneDasmDotWord);

        jScrollPaneDasmWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmWord.setEditable(false);
        jTextPaneDasmWord.setContentType("text/html"); // NOI18N
        jTextPaneDasmWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> word</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmWord.setViewportView(jTextPaneDasmWord);

        jScrollPaneDasmDcWWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDcWWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDcWWord.setEditable(false);
        jTextPaneDasmDcWWord.setContentType("text/html"); // NOI18N
        jTextPaneDasmDcWWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> dc.w</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDcWWord.setViewportView(jTextPaneDasmDcWWord);

        jScrollPaneDasmLabelName.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmLabelName.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmLabelName.setEditable(false);
        jTextPaneDasmLabelName.setContentType("text/html"); // NOI18N
        jTextPaneDasmLabelName.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <font color='black'>zzzz</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmLabelName.setViewportView(jTextPaneDasmLabelName);

        jScrollPaneDasmLabelNameColon.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmLabelNameColon.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmLabelNameColon.setEditable(false);
        jTextPaneDasmLabelNameColon.setContentType("text/html"); // NOI18N
        jTextPaneDasmLabelNameColon.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <font color='black'>zzzz</font><b>:</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmLabelNameColon.setViewportView(jTextPaneDasmLabelNameColon);

        jLabelDasmCommentDeclaration.setText("Comment:");

        buttonGroupDasmComment.add(jRadioButtonDasmCstyleComment);
        jRadioButtonDasmCstyleComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmCstyleCommentItemStateChanged(evt);
            }
        });

        jScrollPaneDasmLabelName1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmLabelName1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmSemicolonComment.setEditable(false);
        jTextPaneDasmSemicolonComment.setContentType("text/html"); // NOI18N
        jTextPaneDasmSemicolonComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>;</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmLabelName1.setViewportView(jTextPaneDasmSemicolonComment);

        buttonGroupDasmComment.add(jRadioButtonDasmSemicolonComment);
        jRadioButtonDasmSemicolonComment.setSelected(true);
        jRadioButtonDasmSemicolonComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmSemicolonCommentItemStateChanged(evt);
            }
        });

        jScrollPaneDasmCstyleComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmCstyleComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmCstyleComment.setEditable(false);
        jTextPaneDasmCstyleComment.setContentType("text/html"); // NOI18N
        jTextPaneDasmCstyleComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>/*</b> xxx <b'>*/</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmCstyleComment.setViewportView(jTextPaneDasmCstyleComment);

        jLabelDasmBlockCommentDeclaration.setText("Block Comment:");

        buttonGroupDasmBlockComment.add(jRadioButtonDasmSemicolonBlockComment);
        jRadioButtonDasmSemicolonBlockComment.setSelected(true);
        jRadioButtonDasmSemicolonBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmSemicolonBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneDasmLabelName3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmLabelName3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmSemicolonBlockComment.setEditable(false);
        jTextPaneDasmSemicolonBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneDasmSemicolonBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>;</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmLabelName3.setViewportView(jTextPaneDasmSemicolonBlockComment);

        buttonGroupDasmBlockComment.add(jRadioButtonDasmCstyleBlockComment);
        jRadioButtonDasmCstyleBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmCstyleBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneDasmLabelName4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmLabelName4.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmCstyleBlockComment.setEditable(false);
        jTextPaneDasmCstyleBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneDasmCstyleBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>/*</b> xxx <b'>*/</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmLabelName4.setViewportView(jTextPaneDasmCstyleBlockComment);

        buttonGroupDasmBlockComment.add(jRadioButtonDasmIfBlockComment);
        jRadioButtonDasmIfBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmIfBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneDasmLabelName5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmLabelName5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmIfBlockComment.setEditable(false);
        jTextPaneDasmIfBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneDasmIfBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>if 0</b> xxx <b'>endif</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmLabelName5.setViewportView(jTextPaneDasmIfBlockComment);

        jLabelDasmOriginDeclaration.setText("Origin:");

        buttonGroupDasmOrigin.add(jRadioButtonDasmDotOrigin);
        jRadioButtonDasmDotOrigin.setSelected(true);
        jRadioButtonDasmDotOrigin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmDotOriginItemStateChanged(evt);
            }
        });

        jScrollPaneDasmLabelName8.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmLabelName8.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDotOrigin.setEditable(false);
        jTextPaneDasmDotOrigin.setContentType("text/html"); // NOI18N
        jTextPaneDasmDotOrigin.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>.org</b> $xxyy\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmLabelName8.setViewportView(jTextPaneDasmDotOrigin);

        buttonGroupDasmOrigin.add(jRadioButtonDasmOrigin);
        jRadioButtonDasmOrigin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmOriginItemStateChanged(evt);
            }
        });

        jScrollPaneDasmLabelName9.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmLabelName9.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmOrigin.setEditable(false);
        jTextPaneDasmOrigin.setContentType("text/html"); // NOI18N
        jTextPaneDasmOrigin.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>org</b> $xxyy\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmLabelName9.setViewportView(jTextPaneDasmOrigin);

        jLabelDasmStarting.setText("Starting:");

        buttonGroupDasmStarting.add(jRadioButtonDasmProcStarting);
        jRadioButtonDasmProcStarting.setSelected(true);
        jRadioButtonDasmProcStarting.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmProcStartingItemStateChanged(evt);
            }
        });

        jScrollPaneDasmLabelName15.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmLabelName15.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmProcStarting.setEditable(false);
        jTextPaneDasmProcStarting.setContentType("text/html"); // NOI18N
        jTextPaneDasmProcStarting.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>processor</b> 6502\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmLabelName15.setViewportView(jTextPaneDasmProcStarting);

        jLabelDasmMonoSpriteDeclaration.setText("Monocolor sprite:");

        buttonGroupDasmMonoSprite.add(jRadioButtonDasmByteHexMonoSprite);
        jRadioButtonDasmByteHexMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmByteHexMonoSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneDasmByteHexMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmByteHexMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmByteHexMonoSprite.setEditable(false);
        jTextPaneDasmByteHexMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneDasmByteHexMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> [byte]</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmByteHexMonoSprite.setViewportView(jTextPaneDasmByteHexMonoSprite);

        buttonGroupDasmMonoSprite.add(jRadioButtonDasmByteBinMonoSprite);
        jRadioButtonDasmByteBinMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmByteBinMonoSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneDasmByteBinMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmByteBinMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmByteBinMonoSprite.setEditable(false);
        jTextPaneDasmByteBinMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneDasmByteBinMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[byte]</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmByteBinMonoSprite.setViewportView(jTextPaneDasmByteBinMonoSprite);

        buttonGroupDasmMonoSprite.add(jRadioButtonDasmMacroHexMonoSprite);
        jRadioButtonDasmMacroHexMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmMacroHexMonoSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneDasmMacroHexMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmMacroHexMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmMacroHexMonoSprite.setEditable(false);
        jTextPaneDasmMacroHexMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneDasmMacroHexMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmMacroHexMonoSprite.setViewportView(jTextPaneDasmMacroHexMonoSprite);

        buttonGroupDasmMonoSprite.add(jRadioButtonDasmMacroBinMonoSprite);
        jRadioButtonDasmMacroBinMonoSprite.setSelected(true);
        jRadioButtonDasmMacroBinMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmMacroBinMonoSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneDasmMacroBinMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmMacroBinMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmMacroBinMonoSprite.setEditable(false);
        jTextPaneDasmMacroBinMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneDasmMacroBinMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmMacroBinMonoSprite.setViewportView(jTextPaneDasmMacroBinMonoSprite);

        jLabelDasmMultiSpriteDeclaration.setText("Multicolor sprite:");

        buttonGroupDasmMultiSprite.add(jRadioButtonDasmByteHexMultiSprite);
        jRadioButtonDasmByteHexMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmByteHexMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneDasmByteHexMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmByteHexMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmByteHexMultiSprite.setEditable(false);
        jTextPaneDasmByteHexMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneDasmByteHexMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> [byte]</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmByteHexMultiSprite.setViewportView(jTextPaneDasmByteHexMultiSprite);

        buttonGroupDasmMultiSprite.add(jRadioButtonDasmByteBinMultiSprite);
        jRadioButtonDasmByteBinMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmByteBinMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneDasmByteBinMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmByteBinMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmByteBinMultiSprite.setEditable(false);
        jTextPaneDasmByteBinMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneDasmByteBinMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[byte]</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmByteBinMultiSprite.setViewportView(jTextPaneDasmByteBinMultiSprite);

        buttonGroupDasmMultiSprite.add(jRadioButtonDasmMacroHexMultiSprite);
        jRadioButtonDasmMacroHexMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmMacroHexMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneDasmMacroHexMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmMacroHexMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmMacroHexMultiSprite.setEditable(false);
        jTextPaneDasmMacroHexMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneDasmMacroHexMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmMacroHexMultiSprite.setViewportView(jTextPaneDasmMacroHexMultiSprite);

        buttonGroupDasmMultiSprite.add(jRadioButtonDasmMacroBinMultiSprite);
        jRadioButtonDasmMacroBinMultiSprite.setSelected(true);
        jRadioButtonDasmMacroBinMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmMacroBinMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneDasmMacroBinMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmMacroBinMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmMacroBinMultiSprite.setEditable(false);
        jTextPaneDasmMacroBinMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneDasmMacroBinMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmMacroBinMultiSprite.setViewportView(jTextPaneDasmMacroBinMultiSprite);

        jLabelDasmTribyteDeclaration.setText("Tribyte:");

        buttonGroupDasmTribyte.add(jRadioButtonDasmMacroTribyte);
        jRadioButtonDasmMacroTribyte.setSelected(true);
        jRadioButtonDasmMacroTribyte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmMacroTribyteItemStateChanged(evt);
            }
        });

        jScrollPaneDasmMacroTribyte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmMacroTribyte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmMacroTribyte.setEditable(false);
        jTextPaneDasmMacroTribyte.setContentType("text/html"); // NOI18N
        jTextPaneDasmMacroTribyte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac]</b> <font color='red'>$xxyyzz</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmMacroTribyte.setViewportView(jTextPaneDasmMacroTribyte);

        jLabelDasmLongDeclaration.setText("Long:");

        buttonGroupDasmLong.add(jRadioButtonDasmDotLong);
        jRadioButtonDasmDotLong.setSelected(true);
        jRadioButtonDasmDotLong.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmDotLongItemStateChanged(evt);
            }
        });

        jScrollPaneDasmDotLong.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDotLong.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDotLong.setEditable(false);
        jTextPaneDasmDotLong.setContentType("text/html"); // NOI18N
        jTextPaneDasmDotLong.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .long</b> <font color='red'>$xxyyzzkk</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDotLong.setViewportView(jTextPaneDasmDotLong);

        buttonGroupDasmLong.add(jRadioButtonDasmLong);
        jRadioButtonDasmLong.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmLongItemStateChanged(evt);
            }
        });

        jScrollPaneDasmLong.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmLong.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmLong.setEditable(false);
        jTextPaneDasmLong.setContentType("text/html"); // NOI18N
        jTextPaneDasmLong.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> long</b> <font color='red'>$xxyyzzkk</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmLong.setViewportView(jTextPaneDasmLong);

        buttonGroupDasmLong.add(jRadioButtonDasmDcLLong);
        jRadioButtonDasmDcLLong.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmDcLLongItemStateChanged(evt);
            }
        });

        jScrollPaneDasmDcLLong.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDcLLong.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDcLLong.setEditable(false);
        jTextPaneDasmDcLLong.setContentType("text/html"); // NOI18N
        jTextPaneDasmDcLLong.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> dc.l</b> <font color='red'>$xxyyzzkk</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDcLLong.setViewportView(jTextPaneDasmDcLLong);

        jLabelDasmWordSwappedDeclaration.setText("Word swapped:");

        buttonGroupDasmWordSwapped.add(jRadioButtonDasmDcDotSWordSwapped);
        jRadioButtonDasmDcDotSWordSwapped.setSelected(true);
        jRadioButtonDasmDcDotSWordSwapped.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmDcDotSWordSwappedItemStateChanged(evt);
            }
        });

        jScrollPaneDasmDcDotSWordSwapped.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDcDotSWordSwapped.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDcDotSWordSwapped.setEditable(false);
        jTextPaneDasmDcDotSWordSwapped.setContentType("text/html"); // NOI18N
        jTextPaneDasmDcDotSWordSwapped.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .dc.s</b> <font color='red'>$yyxx</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDcDotSWordSwapped.setViewportView(jTextPaneDasmDcDotSWordSwapped);

        jLabelDasmTextDeclaration.setText("Text:");

        buttonGroupDasmText.add(jRadioButtonDasmDotByteText);
        jRadioButtonDasmDotByteText.setSelected(true);
        jRadioButtonDasmDotByteText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmDotByteTextItemStateChanged(evt);
            }
        });

        jScrollPaneDasmDotByteText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDotByteText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDotByteText.setEditable(false);
        jTextPaneDasmDotByteText.setContentType("text/html"); // NOI18N
        jTextPaneDasmDotByteText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .byte</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDotByteText.setViewportView(jTextPaneDasmDotByteText);

        buttonGroupDasmText.add(jRadioButtonDasmByteText);
        jRadioButtonDasmByteText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmByteTextItemStateChanged(evt);
            }
        });

        jScrollPaneDasmByteText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmByteText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmByteText.setEditable(false);
        jTextPaneDasmByteText.setContentType("text/html"); // NOI18N
        jTextPaneDasmByteText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>byte</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmByteText.setViewportView(jTextPaneDasmByteText);

        buttonGroupDasmText.add(jRadioButtonDasmDcText);
        jRadioButtonDasmDcText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmDcTextItemStateChanged(evt);
            }
        });

        jScrollPaneDasmMacroHexMonoSprite1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmMacroHexMonoSprite1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDcText.setEditable(false);
        jTextPaneDasmDcText.setContentType("text/html"); // NOI18N
        jTextPaneDasmDcText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>dc</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmMacroHexMonoSprite1.setViewportView(jTextPaneDasmDcText);

        buttonGroupDasmText.add(jRadioButtonDasmDcDotBText);
        jRadioButtonDasmDcDotBText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmDcDotBTextItemStateChanged(evt);
            }
        });

        jScrollPaneDasmDcDotBText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDcDotBText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDcDotBText.setEditable(false);
        jTextPaneDasmDcDotBText.setContentType("text/html"); // NOI18N
        jTextPaneDasmDcDotBText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>dc.b</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDcDotBText.setViewportView(jTextPaneDasmDcDotBText);

        jLabelDasmNumTextDeclaration.setText("Text #num char:");

        buttonGroupDasmNumText.add(jRadioButtonDasmDotByteNumText);
        jRadioButtonDasmDotByteNumText.setSelected(true);
        jRadioButtonDasmDotByteNumText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmDotByteNumTextItemStateChanged(evt);
            }
        });

        jScrollPaneDasmDotByteNumText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDotByteNumText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDotByteNumText.setEditable(false);
        jTextPaneDasmDotByteNumText.setContentType("text/html"); // NOI18N
        jTextPaneDasmDotByteNumText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .byte</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDotByteNumText.setViewportView(jTextPaneDasmDotByteNumText);

        buttonGroupDasmNumText.add(jRadioButtonDasmByteNumText);
        jRadioButtonDasmByteNumText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmByteNumTextItemStateChanged(evt);
            }
        });

        jScrollPaneDasmByteNumText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmByteNumText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmByteNumText.setEditable(false);
        jTextPaneDasmByteNumText.setContentType("text/html"); // NOI18N
        jTextPaneDasmByteNumText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>byte</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmByteNumText.setViewportView(jTextPaneDasmByteNumText);

        buttonGroupDasmNumText.add(jRadioButtonDasmDcNumText);
        jRadioButtonDasmDcNumText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmDcNumTextItemStateChanged(evt);
            }
        });

        jScrollPaneDasmDcNumText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDcNumText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDcNumText.setEditable(false);
        jTextPaneDasmDcNumText.setContentType("text/html"); // NOI18N
        jTextPaneDasmDcNumText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>dc</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDcNumText.setViewportView(jTextPaneDasmDcNumText);

        buttonGroupDasmNumText.add(jRadioButtonDasmDcDotBNumText);
        jRadioButtonDasmDcDotBNumText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmDcDotBNumTextItemStateChanged(evt);
            }
        });

        jScrollPaneDasmDcDotBNumText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDcDotBNumText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDcDotBNumText.setEditable(false);
        jTextPaneDasmDcDotBNumText.setContentType("text/html"); // NOI18N
        jTextPaneDasmDcDotBNumText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>dc.b</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDcDotBNumText.setViewportView(jTextPaneDasmDcDotBNumText);

        jLabelDasmZeroTextDeclaration.setText("Text 0 terminated:");

        buttonGroupDasmZeroText.add(jRadioButtonDasmDotByteZeroText);
        jRadioButtonDasmDotByteZeroText.setSelected(true);
        jRadioButtonDasmDotByteZeroText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmDotByteZeroTextItemStateChanged(evt);
            }
        });

        jScrollPaneDasmDotByteZeroText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDotByteZeroText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDotByteZeroText.setEditable(false);
        jTextPaneDasmDotByteZeroText.setContentType("text/html"); // NOI18N
        jTextPaneDasmDotByteZeroText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .byte</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDotByteZeroText.setViewportView(jTextPaneDasmDotByteZeroText);

        buttonGroupDasmZeroText.add(jRadioButtonDasmByteZeroText);
        jRadioButtonDasmByteZeroText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmByteZeroTextItemStateChanged(evt);
            }
        });

        jScrollPaneDasmByteZeroText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmByteZeroText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmByteText2.setEditable(false);
        jTextPaneDasmByteText2.setContentType("text/html"); // NOI18N
        jTextPaneDasmByteText2.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>byte</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmByteZeroText.setViewportView(jTextPaneDasmByteText2);

        buttonGroupDasmZeroText.add(jRadioButtonDasmDcZeroText);
        jRadioButtonDasmDcZeroText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmDcZeroTextItemStateChanged(evt);
            }
        });

        jScrollPaneDasmDcZeroText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDcZeroText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDcZeroText.setEditable(false);
        jTextPaneDasmDcZeroText.setContentType("text/html"); // NOI18N
        jTextPaneDasmDcZeroText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>dc</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDcZeroText.setViewportView(jTextPaneDasmDcZeroText);

        buttonGroupDasmZeroText.add(jRadioButtonDasmDcDotBZeroText);
        jRadioButtonDasmDcDotBZeroText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmDcDotBZeroTextItemStateChanged(evt);
            }
        });

        jScrollPaneDasmDcDotBZeroText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDcDotBZeroText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDcDotB2.setEditable(false);
        jTextPaneDasmDcDotB2.setContentType("text/html"); // NOI18N
        jTextPaneDasmDcDotB2.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>dc.b</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDcDotBZeroText.setViewportView(jTextPaneDasmDcDotB2);

        javax.swing.GroupLayout jPanelDasmLayout = new javax.swing.GroupLayout(jPanelDasm);
        jPanelDasm.setLayout(jPanelDasmLayout);
        jPanelDasmLayout.setHorizontalGroup(
            jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDasmLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jCheckBoxDasmF3Comp, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDasmLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelDasmZeroTextDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelDasmLayout.createSequentialGroup()
                        .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelDasmTribyteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanelDasmLayout.createSequentialGroup()
                                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelDasmByteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelDasmLabelDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelDasmWordDeclaration, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelDasmStarting, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelDasmOriginDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                                    .addComponent(jLabelDasmCommentDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelDasmBlockCommentDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLabelDasmLongDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonDasmProcStarting)
                            .addComponent(jRadioButtonDasmDotOrigin)
                            .addComponent(jRadioButtonDasmSemicolonComment)
                            .addComponent(jRadioButtonDasmSemicolonBlockComment)
                            .addComponent(jRadioButtonDasmLabelName)
                            .addComponent(jRadioButtonDasmDotByte)
                            .addComponent(jRadioButtonDasmDotWord)
                            .addComponent(jRadioButtonDasmMacroTribyte)
                            .addComponent(jRadioButtonDasmDotLong)))
                    .addGroup(jPanelDasmLayout.createSequentialGroup()
                        .addComponent(jLabelDasmWordSwappedDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonDasmDcDotSWordSwapped))
                    .addComponent(jLabelDasmMonoSpriteDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDasmMultiSpriteDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDasmTextDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDasmNumTextDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelDasmLayout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonDasmDotByteZeroText)
                            .addComponent(jRadioButtonDasmByteHexMonoSprite)
                            .addComponent(jRadioButtonDasmByteHexMultiSprite)
                            .addComponent(jRadioButtonDasmDotByteText)
                            .addComponent(jRadioButtonDasmDotByteNumText))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneDasmLabelName15)
                    .addComponent(jScrollPaneDasmLabelName8)
                    .addComponent(jScrollPaneDasmLabelName1)
                    .addComponent(jScrollPaneDasmLabelName3)
                    .addComponent(jScrollPaneDasmLabelName)
                    .addComponent(jScrollPaneDasmDotByte)
                    .addComponent(jScrollPaneDasmDotWord)
                    .addComponent(jScrollPaneDasmDcDotSWordSwapped)
                    .addComponent(jScrollPaneDasmMacroTribyte)
                    .addComponent(jScrollPaneDasmDotLong, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPaneDasmByteHexMonoSprite)
                    .addComponent(jScrollPaneDasmByteHexMultiSprite)
                    .addComponent(jScrollPaneDasmDotByteText)
                    .addComponent(jScrollPaneDasmDotByteNumText)
                    .addComponent(jScrollPaneDasmDotByteZeroText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelDasmLayout.createSequentialGroup()
                        .addComponent(jRadioButtonDasmByteZeroText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneDasmByteZeroText, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonDasmDcZeroText))
                    .addGroup(jPanelDasmLayout.createSequentialGroup()
                        .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelDasmLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButtonDasmOrigin)
                                    .addComponent(jRadioButtonDasmCstyleComment)
                                    .addComponent(jRadioButtonDasmCstyleBlockComment)
                                    .addComponent(jRadioButtonDasmLabelNameColon)
                                    .addComponent(jRadioButtonDasmByte)
                                    .addComponent(jRadioButtonDasmWord)
                                    .addComponent(jRadioButtonDasmLong)))
                            .addComponent(jRadioButtonDasmByteBinMonoSprite)
                            .addComponent(jRadioButtonDasmByteBinMultiSprite)
                            .addComponent(jRadioButtonDasmByteText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneDasmLabelName9)
                            .addComponent(jScrollPaneDasmCstyleComment)
                            .addComponent(jScrollPaneDasmLabelName4)
                            .addComponent(jScrollPaneDasmLabelNameColon)
                            .addComponent(jScrollPaneDasmByte)
                            .addComponent(jScrollPaneDasmWord)
                            .addComponent(jScrollPaneDasmLong, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPaneDasmByteBinMonoSprite)
                            .addComponent(jScrollPaneDasmByteBinMultiSprite)
                            .addComponent(jScrollPaneDasmByteText, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonDasmIfBlockComment)
                            .addComponent(jRadioButtonDasmDcByte)
                            .addComponent(jRadioButtonDasmDcWWord)
                            .addComponent(jRadioButtonDasmDcLLong)
                            .addComponent(jRadioButtonDasmMacroHexMonoSprite)
                            .addComponent(jRadioButtonDasmMacroHexMultiSprite)
                            .addComponent(jRadioButtonDasmDcText)))
                    .addGroup(jPanelDasmLayout.createSequentialGroup()
                        .addComponent(jRadioButtonDasmByteNumText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneDasmByteNumText, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonDasmDcNumText)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneDasmLabelName5)
                    .addComponent(jScrollPaneDasmDcByte, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPaneDasmDcWWord)
                    .addComponent(jScrollPaneDasmDcLLong)
                    .addComponent(jScrollPaneDasmMacroHexMonoSprite)
                    .addComponent(jScrollPaneDasmMacroHexMultiSprite)
                    .addComponent(jScrollPaneDasmMacroHexMonoSprite1)
                    .addComponent(jScrollPaneDasmDcNumText)
                    .addComponent(jScrollPaneDasmDcZeroText))
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelDasmLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jRadioButtonDasmDcDotBZeroText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneDasmDcDotBZeroText, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelDasmLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonDasmDcBByte)
                            .addComponent(jRadioButtonDasmMacroBinMonoSprite)
                            .addComponent(jRadioButtonDasmMacroBinMultiSprite)
                            .addComponent(jRadioButtonDasmDcDotBText)
                            .addComponent(jRadioButtonDasmDcDotBNumText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneDasmDCBByte, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPaneDasmMacroBinMonoSprite)
                            .addComponent(jScrollPaneDasmMacroBinMultiSprite)
                            .addComponent(jScrollPaneDasmDcDotBText, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPaneDasmDcDotBNumText, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(101, 101, 101))
        );
        jPanelDasmLayout.setVerticalGroup(
            jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDasmLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxDasmF3Comp)
                .addGap(19, 19, 19)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelDasmStarting)
                    .addComponent(jRadioButtonDasmProcStarting)
                    .addComponent(jScrollPaneDasmLabelName15, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelDasmOriginDeclaration)
                    .addComponent(jRadioButtonDasmDotOrigin)
                    .addComponent(jScrollPaneDasmLabelName8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmOrigin)
                    .addComponent(jScrollPaneDasmLabelName9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelDasmCommentDeclaration)
                    .addComponent(jRadioButtonDasmSemicolonComment)
                    .addComponent(jScrollPaneDasmLabelName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmCstyleComment)
                    .addComponent(jScrollPaneDasmCstyleComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelDasmBlockCommentDeclaration)
                    .addComponent(jRadioButtonDasmSemicolonBlockComment)
                    .addComponent(jScrollPaneDasmLabelName3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmCstyleBlockComment)
                    .addComponent(jScrollPaneDasmLabelName4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmIfBlockComment)
                    .addComponent(jScrollPaneDasmLabelName5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelDasmLabelDeclaration)
                    .addComponent(jRadioButtonDasmLabelName)
                    .addComponent(jScrollPaneDasmLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPaneDasmLabelNameColon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmLabelNameColon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelDasmByteDeclaration)
                    .addComponent(jRadioButtonDasmDotByte)
                    .addComponent(jScrollPaneDasmDotByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmByte)
                    .addComponent(jScrollPaneDasmByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmDcByte)
                    .addComponent(jScrollPaneDasmDcByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmDcBByte)
                    .addComponent(jScrollPaneDasmDCBByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelDasmWordDeclaration)
                    .addComponent(jRadioButtonDasmDotWord)
                    .addComponent(jScrollPaneDasmDotWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmWord)
                    .addComponent(jScrollPaneDasmWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmDcWWord)
                    .addComponent(jScrollPaneDasmDcWWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelDasmWordSwappedDeclaration)
                    .addComponent(jRadioButtonDasmDcDotSWordSwapped)
                    .addComponent(jScrollPaneDasmDcDotSWordSwapped, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelDasmTribyteDeclaration)
                    .addComponent(jRadioButtonDasmMacroTribyte)
                    .addComponent(jScrollPaneDasmMacroTribyte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelDasmLongDeclaration)
                    .addComponent(jRadioButtonDasmDotLong)
                    .addComponent(jScrollPaneDasmDotLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmLong)
                    .addComponent(jScrollPaneDasmLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmDcLLong)
                    .addComponent(jScrollPaneDasmDcLLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelDasmMonoSpriteDeclaration)
                    .addComponent(jRadioButtonDasmByteHexMonoSprite)
                    .addComponent(jScrollPaneDasmByteHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmByteBinMonoSprite)
                    .addComponent(jScrollPaneDasmByteBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmMacroHexMonoSprite)
                    .addComponent(jScrollPaneDasmMacroHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmMacroBinMonoSprite)
                    .addComponent(jScrollPaneDasmMacroBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelDasmMultiSpriteDeclaration)
                    .addComponent(jRadioButtonDasmByteHexMultiSprite)
                    .addComponent(jScrollPaneDasmByteHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmByteBinMultiSprite)
                    .addComponent(jScrollPaneDasmByteBinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmMacroHexMultiSprite)
                    .addComponent(jScrollPaneDasmMacroHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmMacroBinMultiSprite)
                    .addComponent(jScrollPaneDasmMacroBinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelDasmTextDeclaration)
                    .addComponent(jRadioButtonDasmDotByteText)
                    .addComponent(jScrollPaneDasmDotByteText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmByteText)
                    .addComponent(jScrollPaneDasmByteText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmDcText)
                    .addComponent(jScrollPaneDasmMacroHexMonoSprite1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmDcDotBText)
                    .addComponent(jScrollPaneDasmDcDotBText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelDasmNumTextDeclaration)
                    .addComponent(jRadioButtonDasmDotByteNumText)
                    .addComponent(jScrollPaneDasmDotByteNumText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmByteNumText)
                    .addComponent(jScrollPaneDasmByteNumText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmDcNumText)
                    .addComponent(jScrollPaneDasmDcNumText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmDcDotBNumText)
                    .addComponent(jScrollPaneDasmDcDotBNumText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDasmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelDasmZeroTextDeclaration)
                    .addComponent(jRadioButtonDasmDotByteZeroText)
                    .addComponent(jScrollPaneDasmDotByteZeroText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmByteZeroText)
                    .addComponent(jScrollPaneDasmByteZeroText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmDcZeroText)
                    .addComponent(jScrollPaneDasmDcZeroText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmDcDotBZeroText)
                    .addComponent(jScrollPaneDasmDcDotBZeroText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPaneAssembler.addTab("Dasm", jPanelDasm);

        jLabelTmpxLabelDeclaration.setText("Label:");

        buttonGroupTmpxLabel.add(jRadioButtonTmpxLabelName);
        jRadioButtonTmpxLabelName.setSelected(true);

        jScrollPaneTmpxByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxLabelName.setEditable(false);
        jTextPaneTmpxLabelName.setContentType("text/html"); // NOI18N
        jTextPaneTmpxLabelName.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <font color='black'>zzzz</font>\n    </p\n  </body>\n</html>\n");
        jScrollPaneTmpxByte.setViewportView(jTextPaneTmpxLabelName);

        jLabelTmpxByteDeclaration.setText("Byte:");

        buttonGroupTmpxByte.add(jRadioButtonTmpxDotByte);
        jRadioButtonTmpxDotByte.setSelected(true);

        jScrollPaneTmpxWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxDotByte.setEditable(false);
        jTextPaneTmpxDotByte.setContentType("text/html"); // NOI18N
        jTextPaneTmpxDotByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .byte</b> <font color='red'>$xx</font><br>\n     <b> .byte</b> <font color='blue'>dd</font><br>\n     <b> .byte</b> <font color='green'>%bb</font><br>\n     <b> .byte</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxWord.setViewportView(jTextPaneTmpxDotByte);

        jLabelTmpxWordDeclaration.setText("Word:");

        buttonGroupTmpxWord.add(jRadioButtonTmpxDotWord);
        jRadioButtonTmpxDotWord.setSelected(true);
        jRadioButtonTmpxDotWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxDotWordItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxDotWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxDotWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxDotWord.setEditable(false);
        jTextPaneTmpxDotWord.setContentType("text/html"); // NOI18N
        jTextPaneTmpxDotWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .word</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxDotWord.setViewportView(jTextPaneTmpxDotWord);

        jLabelTmpxCommentDeclaration.setText("Comment:");

        buttonGroupTmpxComment.add(jRadioButtonTmpxSemicolonComment);
        jRadioButtonTmpxSemicolonComment.setSelected(true);
        jRadioButtonTmpxSemicolonComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxSemicolonCommentItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxSemicolonComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxSemicolonComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxSemicolonComment.setEditable(false);
        jTextPaneTmpxSemicolonComment.setContentType("text/html"); // NOI18N
        jTextPaneTmpxSemicolonComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>;</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxSemicolonComment.setViewportView(jTextPaneTmpxSemicolonComment);

        jLabelTmpxBlockCommentDeclaration.setText("Block Comment:");

        buttonGroupTmpxBlockComment.add(jRadioButtonTmpxSemicolonBlockComment);
        jRadioButtonTmpxSemicolonBlockComment.setSelected(true);
        jRadioButtonTmpxSemicolonBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxSemicolonBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxSemicolonBlockComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxSemicolonBlockComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxSemicolonBlockComment.setEditable(false);
        jTextPaneTmpxSemicolonBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneTmpxSemicolonBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>;</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxSemicolonBlockComment.setViewportView(jTextPaneTmpxSemicolonBlockComment);

        jLabelTmpxOriginDeclaration.setText("Origin:");

        buttonGroupTmpxOrigin.add(jRadioButtonTmpxAsterixOrigin);
        jRadioButtonTmpxAsterixOrigin.setSelected(true);
        jRadioButtonTmpxAsterixOrigin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxAsterixOriginItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxAsterixOrigin.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxAsterixOrigin.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxAsterixOrigin.setEditable(false);
        jTextPaneTmpxAsterixOrigin.setContentType("text/html"); // NOI18N
        jTextPaneTmpxAsterixOrigin.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>*=</b>$xxyy\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxAsterixOrigin.setViewportView(jTextPaneTmpxAsterixOrigin);

        buttonGroupTmpxBlockComment.add(jRadioButtonTmpxDotIfBlockComment);
        jRadioButtonTmpxDotIfBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxDotIfBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxDotIfBlockComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxDotIfBlockComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxDotIfBlockComment.setEditable(false);
        jTextPaneTmpxDotIfBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneTmpxDotIfBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>if 0</b> xxx <b'>endif</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxDotIfBlockComment.setViewportView(jTextPaneTmpxDotIfBlockComment);

        jLabelTmpxStartingDeclaration.setText("Starting:");

        buttonGroupTmpxStarting.add(jRadioButtonTmpxFakeStarting);
        jRadioButtonTmpxFakeStarting.setSelected(true);
        jRadioButtonTmpxFakeStarting.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxFakeStartingItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxFakeStarting.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxFakeStarting.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxFakeStarting.setEditable(false);
        jTextPaneTmpxFakeStarting.setContentType("text/html"); // NOI18N
        jTextPaneTmpxFakeStarting.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>cpu</b>  = 6502\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxFakeStarting.setViewportView(jTextPaneTmpxFakeStarting);

        jLabelTmpxMonoSpriteDeclaration.setText("Monocolor sprite:");

        jLabelTmpxMultiSpriteDeclaration.setText("Multicolor sprite:");

        buttonGroupTmpxMonoSprite.add(jRadioButtonTmpxByteHexMonoSprite);
        jRadioButtonTmpxByteHexMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxByteHexMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupTmpxMultiSprite.add(jRadioButtonTmpxByteHexMultiSprite);
        jRadioButtonTmpxByteHexMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxByteHexMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxByteHexMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxByteHexMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        TmpxPaneTmpxByteHexMultiSprite.setEditable(false);
        TmpxPaneTmpxByteHexMultiSprite.setContentType("text/html"); // NOI18N
        TmpxPaneTmpxByteHexMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> [byte]</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxByteHexMultiSprite.setViewportView(TmpxPaneTmpxByteHexMultiSprite);

        jScrollPaneTmpxByteHexMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxByteHexMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxByteHexMonoSprite.setEditable(false);
        jTextPaneTmpxByteHexMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneTmpxByteHexMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> [byte]</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxByteHexMonoSprite.setViewportView(jTextPaneTmpxByteHexMonoSprite);

        buttonGroupTmpxMonoSprite.add(jRadioButtonTmpxByteBinMonoSprite);
        jRadioButtonTmpxByteBinMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxByteBinMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupTmpxMultiSprite.add(jRadioButtonTmpxByteBinMultiSprite);
        jRadioButtonTmpxByteBinMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxByteBinMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxByteBinMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxByteBinMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxByteBinMultiSprite.setEditable(false);
        jTextPaneTmpxByteBinMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneTmpxByteBinMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[byte]</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxByteBinMultiSprite.setViewportView(jTextPaneTmpxByteBinMultiSprite);

        jScrollPaneTmpxByteBinMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxByteBinMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxByteBinMonoSprite.setEditable(false);
        jTextPaneTmpxByteBinMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneTmpxByteBinMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[byte]</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxByteBinMonoSprite.setViewportView(jTextPaneTmpxByteBinMonoSprite);

        buttonGroupTmpxMonoSprite.add(jRadioButtonTmpxMacroHexMonoSprite);
        jRadioButtonTmpxMacroHexMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxMacroHexMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupTmpxMultiSprite.add(jRadioButtonTmpxMacroHexMultiSprite);
        jRadioButtonTmpxMacroHexMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxMacroHexMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxMacroHexMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxMacroHexMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxMacroHexMultiSprite.setEditable(false);
        jTextPaneTmpxMacroHexMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneTmpxMacroHexMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxMacroHexMultiSprite.setViewportView(jTextPaneTmpxMacroHexMultiSprite);

        jScrollPaneTmpxMacroHexMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxMacroHexMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxMacroHexMonoSprite.setEditable(false);
        jTextPaneTmpxMacroHexMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneTmpxMacroHexMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxMacroHexMonoSprite.setViewportView(jTextPaneTmpxMacroHexMonoSprite);

        buttonGroupTmpxMonoSprite.add(jRadioButtonTmpxMacroBinMonoSprite);
        jRadioButtonTmpxMacroBinMonoSprite.setSelected(true);
        jRadioButtonTmpxMacroBinMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxMacroBinMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupTmpxMultiSprite.add(jRadioButtonTmpxMacroBinMultiSprite);
        jRadioButtonTmpxMacroBinMultiSprite.setSelected(true);
        jRadioButtonTmpxMacroBinMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxMacroBinMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxMacroBinMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxMacroBinMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxMacroBinMultiSprite.setEditable(false);
        jTextPaneTmpxMacroBinMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneTmpxMacroBinMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxMacroBinMultiSprite.setViewportView(jTextPaneTmpxMacroBinMultiSprite);

        jScrollPaneTmpxMacroBinMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxMacroBinMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxMacroBinMonoSprite.setEditable(false);
        jTextPaneTmpxMacroBinMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneTmpxMacroBinMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxMacroBinMonoSprite.setViewportView(jTextPaneTmpxMacroBinMonoSprite);

        jLabelTmpxTribyteDeclaration.setText("Tribyte:");

        buttonGroupTmpxTribyte.add(jRadioButtonTmpxMacroTribyte);
        jRadioButtonTmpxMacroTribyte.setSelected(true);
        jRadioButtonTmpxMacroTribyte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxMacroTribyteItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxMacroTribyte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxMacroTribyte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxMacroTribyte.setEditable(false);
        jTextPaneTmpxMacroTribyte.setContentType("text/html"); // NOI18N
        jTextPaneTmpxMacroTribyte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac]</b> <font color='red'>$xxyyzz</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxMacroTribyte.setViewportView(jTextPaneTmpxMacroTribyte);

        jLabelTmpxLongDeclaration.setText("Long:");

        buttonGroupTmpxLong.add(jRadioButtonTmpxMacroLong);
        jRadioButtonTmpxMacroLong.setSelected(true);
        jRadioButtonTmpxMacroLong.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxMacroLongItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxMacroLong.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxMacroLong.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxMacroLong.setEditable(false);
        jTextPaneTmpxMacroLong.setContentType("text/html"); // NOI18N
        jTextPaneTmpxMacroLong.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac]</b> <font color='red'>$xxyyzzkk</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxMacroLong.setViewportView(jTextPaneTmpxMacroLong);

        jLabelTmpxWordSwappedDeclaration.setText("Word Swapped:");

        buttonGroupTmpxWordSwapped.add(jRadioButtonTmpxMacroWordSwapped);
        jRadioButtonTmpxMacroWordSwapped.setSelected(true);
        jRadioButtonTmpxMacroWordSwapped.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxMacroWordSwappedItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxMacroWordSwapped.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxMacroWordSwapped.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxMacroWordSwapped.setEditable(false);
        jTextPaneTmpxMacroWordSwapped.setContentType("text/html"); // NOI18N
        jTextPaneTmpxMacroWordSwapped.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac]</b> <font color='red'>$yyxx</font><br>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxMacroWordSwapped.setViewportView(jTextPaneTmpxMacroWordSwapped);

        jLabelTmpxTextDeclaration.setText("Text:");

        buttonGroupTmpxText.add(jRadioButtonTmpxDotText);
        jRadioButtonTmpxDotText.setSelected(true);
        jRadioButtonTmpxDotText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTmpxDotTextItemStateChanged(evt);
            }
        });

        jScrollPaneTmpxDotText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTmpxDotText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTmpxDotText.setEditable(false);
        jTextPaneTmpxDotText.setContentType("text/html"); // NOI18N
        jTextPaneTmpxDotText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTmpxDotText.setViewportView(jTextPaneTmpxDotText);

        javax.swing.GroupLayout jPanelTMPxLayout = new javax.swing.GroupLayout(jPanelTMPx);
        jPanelTMPx.setLayout(jPanelTMPxLayout);
        jPanelTMPxLayout.setHorizontalGroup(
            jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTMPxLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelTmpxWordDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTmpxByteDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanelTMPxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelTMPxLayout.createSequentialGroup()
                        .addComponent(jLabelTmpxTextDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 178, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelTMPxLayout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(jRadioButtonTmpxDotText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneTmpxDotText))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelTMPxLayout.createSequentialGroup()
                        .addComponent(jLabelTmpxWordSwappedDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonTmpxMacroWordSwapped)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneTmpxMacroWordSwapped))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelTMPxLayout.createSequentialGroup()
                        .addComponent(jLabelTmpxLongDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonTmpxMacroLong)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneTmpxMacroLong))
                    .addGroup(jPanelTMPxLayout.createSequentialGroup()
                        .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelTmpxLabelDeclaration, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelTmpxBlockCommentDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                                    .addComponent(jLabelTmpxCommentDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelTmpxOriginDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelTmpxStartingDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jLabelTmpxMonoSpriteDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelTmpxMultiSpriteDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelTmpxTribyteDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonTmpxFakeStarting)
                            .addComponent(jRadioButtonTmpxAsterixOrigin)
                            .addComponent(jRadioButtonTmpxSemicolonComment)
                            .addComponent(jRadioButtonTmpxSemicolonBlockComment)
                            .addComponent(jRadioButtonTmpxLabelName)
                            .addComponent(jRadioButtonTmpxDotByte)
                            .addComponent(jRadioButtonTmpxDotWord)
                            .addComponent(jRadioButtonTmpxMacroTribyte)
                            .addComponent(jRadioButtonTmpxByteHexMonoSprite)
                            .addComponent(jRadioButtonTmpxByteHexMultiSprite))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneTmpxSemicolonComment)
                            .addComponent(jScrollPaneTmpxSemicolonBlockComment)
                            .addComponent(jScrollPaneTmpxByte)
                            .addComponent(jScrollPaneTmpxWord)
                            .addComponent(jScrollPaneTmpxDotWord)
                            .addComponent(jScrollPaneTmpxMacroTribyte)
                            .addComponent(jScrollPaneTmpxByteHexMultiSprite)
                            .addComponent(jScrollPaneTmpxFakeStarting)
                            .addComponent(jScrollPaneTmpxAsterixOrigin)
                            .addGroup(jPanelTMPxLayout.createSequentialGroup()
                                .addComponent(jScrollPaneTmpxByteHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonTmpxByteBinMultiSprite)
                    .addComponent(jRadioButtonTmpxByteBinMonoSprite)
                    .addComponent(jRadioButtonTmpxDotIfBlockComment))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelTMPxLayout.createSequentialGroup()
                        .addComponent(jScrollPaneTmpxDotIfBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(325, Short.MAX_VALUE))
                    .addGroup(jPanelTMPxLayout.createSequentialGroup()
                        .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneTmpxByteBinMonoSprite)
                            .addComponent(jScrollPaneTmpxByteBinMultiSprite))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonTmpxMacroHexMonoSprite)
                            .addComponent(jRadioButtonTmpxMacroHexMultiSprite))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPaneTmpxMacroHexMonoSprite)
                            .addComponent(jScrollPaneTmpxMacroHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanelTMPxLayout.createSequentialGroup()
                                .addComponent(jRadioButtonTmpxMacroBinMultiSprite)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPaneTmpxMacroBinMultiSprite))
                            .addGroup(jPanelTMPxLayout.createSequentialGroup()
                                .addComponent(jRadioButtonTmpxMacroBinMonoSprite)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPaneTmpxMacroBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(83, 83, 83))))
        );
        jPanelTMPxLayout.setVerticalGroup(
            jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTMPxLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxStartingDeclaration)
                    .addComponent(jRadioButtonTmpxFakeStarting)
                    .addComponent(jScrollPaneTmpxFakeStarting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxOriginDeclaration)
                    .addComponent(jRadioButtonTmpxAsterixOrigin)
                    .addComponent(jScrollPaneTmpxAsterixOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxCommentDeclaration)
                    .addComponent(jRadioButtonTmpxSemicolonComment)
                    .addComponent(jScrollPaneTmpxSemicolonComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxBlockCommentDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTmpxSemicolonBlockComment)
                    .addComponent(jScrollPaneTmpxSemicolonBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTmpxDotIfBlockComment)
                    .addComponent(jScrollPaneTmpxDotIfBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxLabelDeclaration)
                    .addComponent(jRadioButtonTmpxLabelName)
                    .addComponent(jScrollPaneTmpxByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxByteDeclaration)
                    .addComponent(jRadioButtonTmpxDotByte)
                    .addComponent(jScrollPaneTmpxWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxWordDeclaration)
                    .addComponent(jRadioButtonTmpxDotWord)
                    .addComponent(jScrollPaneTmpxDotWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxWordSwappedDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTmpxMacroWordSwapped)
                    .addComponent(jScrollPaneTmpxMacroWordSwapped, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxTribyteDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTmpxMacroTribyte)
                    .addComponent(jScrollPaneTmpxMacroTribyte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxLongDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTmpxMacroLong)
                    .addComponent(jScrollPaneTmpxMacroLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxMonoSpriteDeclaration)
                    .addComponent(jRadioButtonTmpxByteHexMonoSprite)
                    .addComponent(jScrollPaneTmpxByteHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTmpxByteBinMonoSprite)
                    .addComponent(jScrollPaneTmpxByteBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTmpxMacroHexMonoSprite)
                    .addComponent(jScrollPaneTmpxMacroHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTmpxMacroBinMonoSprite)
                    .addComponent(jScrollPaneTmpxMacroBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxMultiSpriteDeclaration)
                    .addComponent(jRadioButtonTmpxByteHexMultiSprite)
                    .addComponent(jScrollPaneTmpxByteHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTmpxByteBinMultiSprite)
                    .addComponent(jScrollPaneTmpxByteBinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTmpxMacroHexMultiSprite)
                    .addComponent(jScrollPaneTmpxMacroHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTmpxMacroBinMultiSprite)
                    .addComponent(jScrollPaneTmpxMacroBinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTMPxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTmpxTextDeclaration)
                    .addComponent(jRadioButtonTmpxDotText)
                    .addComponent(jScrollPaneTmpxDotText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(321, Short.MAX_VALUE))
        );

        jTabbedPaneAssembler.addTab("TMPx", jPanelTMPx);

        jLabelCa65LabelDeclaration.setText("Label:");

        buttonGroupCa65Label.add(jRadioButtonCa65LabelNameColon);
        jRadioButtonCa65LabelNameColon.setSelected(true);
        jRadioButtonCa65LabelNameColon.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65LabelNameColonItemStateChanged(evt);
            }
        });

        jScrollPaneCa65LabelName.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65LabelName.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65LabelNameColon.setEditable(false);
        jTextPaneCa65LabelNameColon.setContentType("text/html"); // NOI18N
        jTextPaneCa65LabelNameColon.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <font color='black'>zzzz</font><b>:</b>\n    </p\n  </body>\n</html>\n");
        jScrollPaneCa65LabelName.setViewportView(jTextPaneCa65LabelNameColon);

        jLabelC65ByteDeclaration.setText("Byte:");

        buttonGroupCa65Byte.add(jRadioButtonCa65DotByte);
        jRadioButtonCa65DotByte.setSelected(true);
        jRadioButtonCa65DotByte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65DotByteItemStateChanged(evt);
            }
        });

        jScrollPaneC65DotByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneC65DotByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65DotByte.setEditable(false);
        jTextPaneCa65DotByte.setContentType("text/html"); // NOI18N
        jTextPaneCa65DotByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .byte</b> <font color='red'>$xx</font><br>\n     <b> .byte</b> <font color='blue'>dd</font><br>\n     <b> .byte</b> <font color='green'>%bb</font><br>\n     <b> .byte</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneC65DotByte.setViewportView(jTextPaneCa65DotByte);

        buttonGroupCa65Byte.add(jRadioButtonCa65DotBytByte);
        jRadioButtonCa65DotBytByte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65DotBytByteItemStateChanged(evt);
            }
        });

        jScrollPaneCa65DotBytByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65DotBytByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65DotBytByte.setEditable(false);
        jTextPaneCa65DotBytByte.setContentType("text/html"); // NOI18N
        jTextPaneCa65DotBytByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .byt</b> <font color='red'>$xx</font><br>\n     <b> .byt</b> <font color='blue'>dd</font><br>\n     <b> .byt</b> <font color='green'>%bb</font><br>\n     <b> .byt</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneCa65DotBytByte.setViewportView(jTextPaneCa65DotBytByte);

        jLabelC65WordDeclaration.setText("Word:");

        buttonGroupC65Word.add(jRadioButtonCa65DotWord);
        jRadioButtonCa65DotWord.setSelected(true);
        jRadioButtonCa65DotWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65DotWordItemStateChanged(evt);
            }
        });

        jScrollPaneCa65DotWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65DotWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65DotWord.setEditable(false);
        jTextPaneCa65DotWord.setContentType("text/html"); // NOI18N
        jTextPaneCa65DotWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .word</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneCa65DotWord.setViewportView(jTextPaneCa65DotWord);

        jScrollPaneC65DotDByteWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneC65DotDByteWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65DotDByteWord.setEditable(false);
        jTextPaneCa65DotDByteWord.setContentType("text/html"); // NOI18N
        jTextPaneCa65DotDByteWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .dbyte</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneC65DotDByteWord.setViewportView(jTextPaneCa65DotDByteWord);

        buttonGroupC65Word.add(jRadioButtonCa65DotDByteWord);
        jRadioButtonCa65DotDByteWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65DotDByteWordItemStateChanged(evt);
            }
        });

        jLabelCa65OriginDeclaration.setText("Origin:");

        buttonGroupCa65Origin.add(jRadioButtonCa65DotOrigin);
        jRadioButtonCa65DotOrigin.setSelected(true);
        jRadioButtonCa65DotOrigin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65DotOriginItemStateChanged(evt);
            }
        });

        jScrollPaneCa65DotOrigin.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65DotOrigin.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneC65DotOrigin.setEditable(false);
        jTextPaneC65DotOrigin.setContentType("text/html"); // NOI18N
        jTextPaneC65DotOrigin.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>.org</b> $xxyy\n    </p>\n  </body>\n</html>\n");
        jScrollPaneCa65DotOrigin.setViewportView(jTextPaneC65DotOrigin);

        jLabelCa65CommentDeclaration.setText("Comment:");

        buttonGroupCa65Comment.add(jRadioButtonCa65SemicolonComment);
        jRadioButtonCa65SemicolonComment.setSelected(true);
        jRadioButtonCa65SemicolonComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65SemicolonCommentItemStateChanged(evt);
            }
        });

        jScrollPaneCa65SemicolonComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65SemicolonComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneC65SemicolonComment.setEditable(false);
        jTextPaneC65SemicolonComment.setContentType("text/html"); // NOI18N
        jTextPaneC65SemicolonComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>;</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneCa65SemicolonComment.setViewportView(jTextPaneC65SemicolonComment);

        jLabelCa65BlockCommentDeclaration.setText("Block Comment:");

        buttonGroupCa65BlockComment.add(jRadioButtonCa65SemicolonBlockComment);
        jRadioButtonCa65SemicolonBlockComment.setSelected(true);
        jRadioButtonCa65SemicolonBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65SemicolonBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneCa65Comment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65Comment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65Comment.setEditable(false);
        jTextPaneCa65Comment.setContentType("text/html"); // NOI18N
        jTextPaneCa65Comment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>;</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneCa65Comment.setViewportView(jTextPaneCa65Comment);

        jLabeCa65StartingDeclaration.setText("Starting:");

        buttonGroupCa65Starting.add(jRadioButtonCa65DotP02Starting);
        jRadioButtonCa65DotP02Starting.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65DotP02StartingItemStateChanged(evt);
            }
        });

        jScrollPaneDasmLabelName17.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmLabelName17.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneC65DotP02Starting.setEditable(false);
        jTextPaneC65DotP02Starting.setContentType("text/html"); // NOI18N
        jTextPaneC65DotP02Starting.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>.p02</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmLabelName17.setViewportView(jTextPaneC65DotP02Starting);

        buttonGroupCa65Starting.add(jRadioButtonCa65DotSetcpuStarting);
        jRadioButtonCa65DotSetcpuStarting.setSelected(true);
        jRadioButtonCa65DotSetcpuStarting.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65DotSetcpuStartingItemStateChanged(evt);
            }
        });

        jScrollPaneDasmLabelName18.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmLabelName18.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneC65DotSetcpuStarting.setEditable(false);
        jTextPaneC65DotSetcpuStarting.setContentType("text/html"); // NOI18N
        jTextPaneC65DotSetcpuStarting.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>.setcpu</b> \"6502x\"\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmLabelName18.setViewportView(jTextPaneC65DotSetcpuStarting);

        jLabelCa65MonoSpriteDeclaration.setText("Monocolor sprite:");

        jLabelCa65MultiSpriteDeclaration.setText("Multicolor sprite:");

        buttonGroupCa65MonoSprite.add(jRadioButtonCa65ByteHexMonoSprite);
        jRadioButtonCa65ByteHexMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65ByteHexMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupCa65MultiSprite.add(jRadioButtonCa65ByteHexMultiSprite);
        jRadioButtonCa65ByteHexMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65ByteHexMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneCa65ByteHexMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65ByteHexMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65ByteHexMultiSprite.setEditable(false);
        jTextPaneCa65ByteHexMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneCa65ByteHexMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> [byte]</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneCa65ByteHexMultiSprite.setViewportView(jTextPaneCa65ByteHexMultiSprite);

        jScrollPaneCa65ByteHexMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65ByteHexMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65ByteHexMonoSprite.setEditable(false);
        jTextPaneCa65ByteHexMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneCa65ByteHexMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> [byte]</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneCa65ByteHexMonoSprite.setViewportView(jTextPaneCa65ByteHexMonoSprite);

        buttonGroupCa65MonoSprite.add(jRadioButtonCa65ByteBinMonoSprite);
        jRadioButtonCa65ByteBinMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65ByteBinMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupCa65MultiSprite.add(jRadioButtonCa65ByteBinMultiSprite);
        jRadioButtonCa65ByteBinMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65ByteBinMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneDasmByteBinMultiSprite1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmByteBinMultiSprite1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmByteBinMultiSprite1.setEditable(false);
        jTextPaneDasmByteBinMultiSprite1.setContentType("text/html"); // NOI18N
        jTextPaneDasmByteBinMultiSprite1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[byte]</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmByteBinMultiSprite1.setViewportView(jTextPaneDasmByteBinMultiSprite1);

        jScrollPaneCa65ByteBinMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65ByteBinMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65ByteBinMonoSprite.setEditable(false);
        jTextPaneCa65ByteBinMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneCa65ByteBinMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[byte]</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneCa65ByteBinMonoSprite.setViewportView(jTextPaneCa65ByteBinMonoSprite);

        buttonGroupCa65MonoSprite.add(jRadioButtonCa65MacroHexMonoSprite);
        jRadioButtonCa65MacroHexMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65MacroHexMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupCa65MultiSprite.add(jRadioButtonCa65MacroHexMultiSprite);
        jRadioButtonCa65MacroHexMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65MacroHexMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneCa65MacroHexMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65MacroHexMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65MacroHexMultiSprite.setEditable(false);
        jTextPaneCa65MacroHexMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneCa65MacroHexMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneCa65MacroHexMultiSprite.setViewportView(jTextPaneCa65MacroHexMultiSprite);

        jScrollPaneCa65MacroHexMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65MacroHexMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65MacroHexMonoSprite.setEditable(false);
        jTextPaneCa65MacroHexMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneCa65MacroHexMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneCa65MacroHexMonoSprite.setViewportView(jTextPaneCa65MacroHexMonoSprite);

        buttonGroupCa65MonoSprite.add(jRadioButtonCa65MacroBinMonoSprite);
        jRadioButtonCa65MacroBinMonoSprite.setSelected(true);
        jRadioButtonCa65MacroBinMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65MacroBinMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupCa65MultiSprite.add(jRadioButtonCa65MacroBinMultiSprite);
        jRadioButtonCa65MacroBinMultiSprite.setSelected(true);
        jRadioButtonCa65MacroBinMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65MacroBinMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneCa65MacroBinMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65MacroBinMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65MacroBinMultiSprite.setEditable(false);
        jTextPaneCa65MacroBinMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneCa65MacroBinMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneCa65MacroBinMultiSprite.setViewportView(jTextPaneCa65MacroBinMultiSprite);

        jScrollPaneCa65MacroBinMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65MacroBinMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65MacroBinMonoSprite.setEditable(false);
        jTextPaneCa65MacroBinMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneCa65MacroBinMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneCa65MacroBinMonoSprite.setViewportView(jTextPaneCa65MacroBinMonoSprite);

        jLabelCa65TribyteDeclaration.setText("Tribyte:");

        buttonGroupCa65Tribyte.add(jRadioButtonCa65MacroTribyte);
        jRadioButtonCa65MacroTribyte.setSelected(true);
        jRadioButtonCa65MacroTribyte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65MacroTribyteItemStateChanged(evt);
            }
        });

        jScrollPaneCa65MacroTribyte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65MacroTribyte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65MacroTribyte.setEditable(false);
        jTextPaneCa65MacroTribyte.setContentType("text/html"); // NOI18N
        jTextPaneCa65MacroTribyte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac]</b> <font color='red'>$xxyyzz</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneCa65MacroTribyte.setViewportView(jTextPaneCa65MacroTribyte);

        jLabelC65LongDeclaration.setText("Long:");

        buttonGroupCa65Long.add(jRadioButtonCa65DotLong);
        jRadioButtonCa65DotLong.setSelected(true);

        jScrollPaneCa65DotDWordLong.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65DotDWordLong.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65DotDwordLong.setEditable(false);
        jTextPaneCa65DotDwordLong.setContentType("text/html"); // NOI18N
        jTextPaneCa65DotDwordLong.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .dword</b> <font color='red'>$xxyyzzkk</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneCa65DotDWordLong.setViewportView(jTextPaneCa65DotDwordLong);

        jLabelCa65WordSwappedDeclaration.setText("Word swapped:");

        buttonGroupCa65WordSwapped.add(jRadioButtonCa65DotDbytWordSwapped);
        jRadioButtonCa65DotDbytWordSwapped.setSelected(true);
        jRadioButtonCa65DotDbytWordSwapped.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65DotDbytWordSwappedItemStateChanged(evt);
            }
        });

        jScrollPaneCa65DotDbytWordSwapped.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65DotDbytWordSwapped.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65DotDbytWordSwapped.setEditable(false);
        jTextPaneCa65DotDbytWordSwapped.setContentType("text/html"); // NOI18N
        jTextPaneCa65DotDbytWordSwapped.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .dbyt</b> <font color='red'>$yyxx</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneCa65DotDbytWordSwapped.setViewportView(jTextPaneCa65DotDbytWordSwapped);

        jLabelCa65TextDeclaration.setText("Text:");

        buttonGroupCa65Text.add(jRadioButtonCa65DotByteText);
        jRadioButtonCa65DotByteText.setSelected(true);
        jRadioButtonCa65DotByteText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65DotByteTextItemStateChanged(evt);
            }
        });

        jScrollPaneCa65DotByteText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65DotByteText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65DotByteText.setEditable(false);
        jTextPaneCa65DotByteText.setContentType("text/html"); // NOI18N
        jTextPaneCa65DotByteText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .byte</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneCa65DotByteText.setViewportView(jTextPaneCa65DotByteText);

        buttonGroupCa65Text.add(jRadioButtonCa65DotBytText);
        jRadioButtonCa65DotBytText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCa65DotBytTextItemStateChanged(evt);
            }
        });

        jScrollPaneCa65DotBytText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneCa65DotBytText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneCa65DotBytText.setEditable(false);
        jTextPaneCa65DotBytText.setContentType("text/html"); // NOI18N
        jTextPaneCa65DotBytText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>.byt</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneCa65DotBytText.setViewportView(jTextPaneCa65DotBytText);

        javax.swing.GroupLayout jPanelCa65Layout = new javax.swing.GroupLayout(jPanelCa65);
        jPanelCa65.setLayout(jPanelCa65Layout);
        jPanelCa65Layout.setHorizontalGroup(
            jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCa65Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabelCa65CommentDeclaration, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelC65ByteDeclaration, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelC65WordDeclaration, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelCa65LabelDeclaration, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelCa65BlockCommentDeclaration, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelCa65OriginDeclaration, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabeCa65StartingDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabelC65LongDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCa65TribyteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabelCa65MultiSpriteDeclaration, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelCa65MonoSpriteDeclaration, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelCa65WordSwappedDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonCa65DotP02Starting)
                    .addComponent(jRadioButtonCa65DotOrigin)
                    .addComponent(jRadioButtonCa65SemicolonComment)
                    .addComponent(jRadioButtonCa65SemicolonBlockComment)
                    .addComponent(jRadioButtonCa65LabelNameColon)
                    .addComponent(jRadioButtonCa65DotByte)
                    .addComponent(jRadioButtonCa65DotWord)
                    .addComponent(jRadioButtonCa65DotDbytWordSwapped)
                    .addComponent(jRadioButtonCa65MacroTribyte)
                    .addComponent(jRadioButtonCa65DotLong)
                    .addComponent(jRadioButtonCa65ByteHexMonoSprite)
                    .addComponent(jRadioButtonCa65ByteHexMultiSprite)
                    .addComponent(jRadioButtonCa65DotByteText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCa65Layout.createSequentialGroup()
                        .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneDasmLabelName17)
                            .addComponent(jScrollPaneCa65DotOrigin)
                            .addComponent(jScrollPaneCa65SemicolonComment)
                            .addComponent(jScrollPaneCa65Comment)
                            .addComponent(jScrollPaneCa65LabelName)
                            .addComponent(jScrollPaneC65DotByte)
                            .addComponent(jScrollPaneCa65DotWord, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelCa65Layout.createSequentialGroup()
                        .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPaneCa65ByteHexMonoSprite, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                            .addComponent(jScrollPaneCa65DotByteText)
                            .addComponent(jScrollPaneCa65DotDWordLong)
                            .addComponent(jScrollPaneCa65MacroTribyte)
                            .addComponent(jScrollPaneCa65DotDbytWordSwapped, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                            .addComponent(jScrollPaneCa65ByteHexMultiSprite))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonCa65DotSetcpuStarting)
                    .addComponent(jRadioButtonCa65DotBytByte)
                    .addComponent(jRadioButtonCa65DotDByteWord)
                    .addComponent(jRadioButtonCa65ByteBinMonoSprite)
                    .addComponent(jRadioButtonCa65ByteBinMultiSprite)
                    .addComponent(jRadioButtonCa65DotBytText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCa65Layout.createSequentialGroup()
                        .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneDasmLabelName18)
                            .addComponent(jScrollPaneCa65DotBytByte)
                            .addComponent(jScrollPaneC65DotDByteWord, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(306, 306, 306))
                    .addGroup(jPanelCa65Layout.createSequentialGroup()
                        .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPaneCa65DotBytText, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                                .addComponent(jScrollPaneDasmByteBinMultiSprite1))
                            .addGroup(jPanelCa65Layout.createSequentialGroup()
                                .addComponent(jScrollPaneCa65ByteBinMonoSprite)
                                .addGap(7, 7, 7)))
                        .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonCa65MacroHexMonoSprite)
                            .addComponent(jRadioButtonCa65MacroHexMultiSprite))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPaneCa65MacroHexMultiSprite)
                            .addComponent(jScrollPaneCa65MacroHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanelCa65Layout.createSequentialGroup()
                                .addComponent(jRadioButtonCa65MacroBinMultiSprite)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPaneCa65MacroBinMultiSprite))
                            .addGroup(jPanelCa65Layout.createSequentialGroup()
                                .addComponent(jRadioButtonCa65MacroBinMonoSprite)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPaneCa65MacroBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(33, 33, 33))))
            .addGroup(jPanelCa65Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabelCa65TextDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(648, Short.MAX_VALUE))
        );
        jPanelCa65Layout.setVerticalGroup(
            jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCa65Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabeCa65StartingDeclaration)
                    .addComponent(jRadioButtonCa65DotP02Starting)
                    .addComponent(jScrollPaneDasmLabelName17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonCa65DotSetcpuStarting)
                    .addComponent(jScrollPaneDasmLabelName18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelCa65OriginDeclaration)
                    .addComponent(jRadioButtonCa65DotOrigin)
                    .addComponent(jScrollPaneCa65DotOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelCa65CommentDeclaration)
                    .addComponent(jRadioButtonCa65SemicolonComment)
                    .addComponent(jScrollPaneCa65SemicolonComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelCa65BlockCommentDeclaration)
                    .addComponent(jRadioButtonCa65SemicolonBlockComment)
                    .addComponent(jScrollPaneCa65Comment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelCa65LabelDeclaration)
                    .addComponent(jRadioButtonCa65LabelNameColon)
                    .addComponent(jScrollPaneCa65LabelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelC65ByteDeclaration)
                    .addComponent(jRadioButtonCa65DotByte)
                    .addComponent(jScrollPaneC65DotByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonCa65DotBytByte)
                    .addComponent(jScrollPaneCa65DotBytByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelC65WordDeclaration)
                    .addComponent(jRadioButtonCa65DotWord)
                    .addComponent(jScrollPaneCa65DotWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonCa65DotDByteWord)
                    .addComponent(jScrollPaneC65DotDByteWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelCa65WordSwappedDeclaration)
                    .addComponent(jRadioButtonCa65DotDbytWordSwapped)
                    .addComponent(jScrollPaneCa65DotDbytWordSwapped, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCa65Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonCa65MacroTribyte)
                            .addComponent(jScrollPaneCa65MacroTribyte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelCa65Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabelCa65TribyteDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelC65LongDeclaration)
                    .addComponent(jRadioButtonCa65DotLong)
                    .addComponent(jScrollPaneCa65DotDWordLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelCa65MonoSpriteDeclaration)
                    .addComponent(jRadioButtonCa65ByteHexMonoSprite)
                    .addComponent(jRadioButtonCa65ByteBinMonoSprite)
                    .addComponent(jScrollPaneCa65ByteBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonCa65MacroHexMonoSprite)
                    .addComponent(jScrollPaneCa65MacroHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonCa65MacroBinMonoSprite)
                    .addComponent(jScrollPaneCa65MacroBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPaneCa65ByteHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelCa65MultiSpriteDeclaration)
                    .addComponent(jRadioButtonCa65ByteHexMultiSprite)
                    .addComponent(jScrollPaneCa65ByteHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonCa65ByteBinMultiSprite)
                    .addComponent(jScrollPaneDasmByteBinMultiSprite1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonCa65MacroHexMultiSprite)
                    .addComponent(jScrollPaneCa65MacroHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonCa65MacroBinMultiSprite)
                    .addComponent(jScrollPaneCa65MacroBinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelCa65Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelCa65TextDeclaration)
                    .addComponent(jRadioButtonCa65DotByteText)
                    .addComponent(jScrollPaneCa65DotByteText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonCa65DotBytText)
                    .addComponent(jScrollPaneCa65DotBytText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(330, Short.MAX_VALUE))
        );

        jTabbedPaneAssembler.addTab("CA65", jPanelCa65);

        jLabelAcmeLabelDeclaration.setText("Label:");

        buttonGroupAcmeLabel.add(jRadioButtonAcmeLabelName);
        jRadioButtonAcmeLabelName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeLabelNameItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeLabelName.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeLabelName.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeLabelName.setEditable(false);
        jTextPaneAcmeLabelName.setContentType("text/html"); // NOI18N
        jTextPaneAcmeLabelName.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <font color='black'>zzzz</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeLabelName.setViewportView(jTextPaneAcmeLabelName);

        buttonGroupAcmeLabel.add(jRadioButtonAcmeLabelNameColon);
        jRadioButtonAcmeLabelNameColon.setSelected(true);
        jRadioButtonAcmeLabelNameColon.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeLabelNameColonItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeLabelNameColon.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeLabelNameColon.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeLabelNameColon.setEditable(false);
        jTextPaneAcmeLabelNameColon.setContentType("text/html"); // NOI18N
        jTextPaneAcmeLabelNameColon.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <font color='black'>zzzz</font><b>:</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeLabelNameColon.setViewportView(jTextPaneAcmeLabelNameColon);

        jLabelAcmeByteDeclaration.setText("Byte:");

        buttonGroupAcmeByte.add(jRadioButtonAcmeMarkByte);
        jRadioButtonAcmeMarkByte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeMarkByteItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeMarkByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMarkByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMarkByte.setEditable(false);
        jTextPaneAcmeMarkByte.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMarkByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> !byte</b> <font color='red'>$xx</font><br>\n     <b> !byte</b> <font color='blue'>dd</font><br>\n     <b> !byte</b> <font color='green'>%bb</font><br>\n     <b> !byte</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMarkByte.setViewportView(jTextPaneAcmeMarkByte);

        buttonGroupAcmeByte.add(jRadioButtonAcmeMark8Byte);
        jRadioButtonAcmeMark8Byte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeMark8ByteItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeMark8Byte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMark8Byte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMark8Byte.setEditable(false);
        jTextPaneAcmeMark8Byte.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMark8Byte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b> !8</b> <font color='red'>$xx</font><br>\n     <b> !8</b> <font color='blue'>dd</font><br>\n     <b> !8</b> <font color='green'>%bb</font><br>\n     <b> !8</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMark8Byte.setViewportView(jTextPaneAcmeMark8Byte);

        jLabelAcmeWordDeclaration.setText("Word:");

        buttonGroupAcmeWord.add(jRadioButtonAcmeMarkWord);
        jRadioButtonAcmeMarkWord.setSelected(true);
        jRadioButtonAcmeMarkWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeMarkWordItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeMarkWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMarkWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMarkWord.setEditable(false);
        jTextPaneAcmeMarkWord.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMarkWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> !word</b> <font color='red'>$xxyy</font><br>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMarkWord.setViewportView(jTextPaneAcmeMarkWord);

        buttonGroupAcmeWord.add(jRadioButtonAcmeMark16Word);
        jRadioButtonAcmeMark16Word.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeMark16WordItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeMark16Word.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMark16Word.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMark16Word.setEditable(false);
        jTextPaneAcmeMark16Word.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMark16Word.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b> !16</b> <font color='red'>$xxyy</font><br>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMark16Word.setViewportView(jTextPaneAcmeMark16Word);

        jLabelAcmeStartingDeclaration.setText("Starting:");

        buttonGroupAcmeStarting.add(jRadioButtonAcmeMarkCpuStarting);
        jRadioButtonAcmeMarkCpuStarting.setSelected(true);
        jRadioButtonAcmeMarkCpuStarting.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeMarkCpuStartingItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeLabelMarkCpuStarting.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeLabelMarkCpuStarting.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMarkCpuStarting.setEditable(false);
        jTextPaneAcmeMarkCpuStarting.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMarkCpuStarting.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>!cpu</b> 6510</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeLabelMarkCpuStarting.setViewportView(jTextPaneAcmeMarkCpuStarting);

        jLabelScmeOriginDeclaration.setText("Origin:");

        buttonGroupAcmeOrigin.add(jRadioButtonAcmeAsterixOrigin);
        jRadioButtonAcmeAsterixOrigin.setSelected(true);
        jRadioButtonAcmeAsterixOrigin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeAsterixOriginItemStateChanged(evt);
            }
        });

        jScrollPaneDasmLabelAsterixOrigin.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmLabelAsterixOrigin.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeAsterixOrigin.setEditable(false);
        jTextPaneAcmeAsterixOrigin.setContentType("text/html"); // NOI18N
        jTextPaneAcmeAsterixOrigin.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>*=</b>$xxyy\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmLabelAsterixOrigin.setViewportView(jTextPaneAcmeAsterixOrigin);

        jLabelAcmeCommentDeclaration1.setText("Comment:");

        buttonGroupAcmeComment.add(jRadioButtonAcmeSemicolonComment);
        jRadioButtonAcmeSemicolonComment.setSelected(true);
        jRadioButtonAcmeSemicolonComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeSemicolonCommentItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeSemicolonComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeSemicolonComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeSemicolonComment.setEditable(false);
        jTextPaneAcmeSemicolonComment.setContentType("text/html"); // NOI18N
        jTextPaneAcmeSemicolonComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>;</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeSemicolonComment.setViewportView(jTextPaneAcmeSemicolonComment);

        jLabelAcmeBlockCommentDeclaration.setText("Block Comment:");

        buttonGroupAcmeBlockComment.add(jRadioButtonAcmeSemicolonBlockComment);
        jRadioButtonAcmeSemicolonBlockComment.setSelected(true);
        jRadioButtonAcmeSemicolonBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeSemicolonBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeSemicolonBlockComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeSemicolonBlockComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeSemicolonBlockComment.setEditable(false);
        jTextPaneAcmeSemicolonBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneAcmeSemicolonBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>;</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeSemicolonBlockComment.setViewportView(jTextPaneAcmeSemicolonBlockComment);

        buttonGroupAcmeBlockComment.add(jRadioButtonAcmeMarkIfBlockComment);
        jRadioButtonAcmeMarkIfBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeMarkIfBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeMarkIfBlockComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMarkIfBlockComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMarkIfBlockComment.setEditable(false);
        jTextPaneAcmeMarkIfBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMarkIfBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>!if 0 {</b> xxx <b'>}</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMarkIfBlockComment.setViewportView(jTextPaneAcmeMarkIfBlockComment);

        jLabelAcmeMonoSpriteDeclaration.setText("Monocolor sprite:");

        jLabelAcmeMultiSpriteDeclaration.setText("Multicolor sprite:");

        buttonGroupAcmeMonoSprite.add(jRadioButtonAcme24HexMonoSprite);
        jRadioButtonAcme24HexMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcme24HexMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupAcmeMultiSprite.add(jRadioButtonAcme24HexMultiSprite);
        jRadioButtonAcme24HexMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcme24HexMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeByteHexMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeByteHexMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcme24HexMultiSprite.setEditable(false);
        jTextPaneAcme24HexMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneAcme24HexMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>!24</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeByteHexMultiSprite.setViewportView(jTextPaneAcme24HexMultiSprite);

        jScrollPaneAcme24HexMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcme24HexMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcme24HexMonoSprite.setEditable(false);
        jTextPaneAcme24HexMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneAcme24HexMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> !24</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcme24HexMonoSprite.setViewportView(jTextPaneAcme24HexMonoSprite);

        buttonGroupAcmeMonoSprite.add(jRadioButtonAcme24BinMonoSprite);
        jRadioButtonAcme24BinMonoSprite.setSelected(true);
        jRadioButtonAcme24BinMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcme24BinMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupAcmeMultiSprite.add(jRadioButtonAcme24BinMultiSprite);
        jRadioButtonAcme24BinMultiSprite.setSelected(true);
        jRadioButtonAcme24BinMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcme24BinMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneAcme24BinMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcme24BinMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcme24BinMultiSprite.setEditable(false);
        jTextPaneAcme24BinMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneAcme24BinMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>!24</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcme24BinMultiSprite.setViewportView(jTextPaneAcme24BinMultiSprite);

        jScrollPaneAcme24BinMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcme24BinMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcme24BinMonoSprite.setEditable(false);
        jTextPaneAcme24BinMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneAcme24BinMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>!24</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcme24BinMonoSprite.setViewportView(jTextPaneAcme24BinMonoSprite);

        buttonGroupAcmeMonoSprite.add(jRadioButtonAcmeMacroHexMonoSprite);
        jRadioButtonAcmeMacroHexMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeMacroHexMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupAcmeMultiSprite.add(jRadioButtonAcmeMacroHexMultiSprite);
        jRadioButtonAcmeMacroHexMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeMacroHexMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeMacroHexMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMacroHexMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMacroHexMultiSprite.setEditable(false);
        jTextPaneAcmeMacroHexMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMacroHexMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMacroHexMultiSprite.setViewportView(jTextPaneAcmeMacroHexMultiSprite);

        jScrollPaneAcmeMacroHexMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMacroHexMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMacroHexMonoSprite.setEditable(false);
        jTextPaneAcmeMacroHexMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMacroHexMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMacroHexMonoSprite.setViewportView(jTextPaneAcmeMacroHexMonoSprite);

        buttonGroupAcmeMonoSprite.add(jRadioButtonAcmeMacroBinMonoSprite);
        jRadioButtonAcmeMacroBinMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeMacroBinMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupAcmeMultiSprite.add(jRadioButtonAcmeMacroBinMultiSprite);
        jRadioButtonAcmeMacroBinMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeMacroBinMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeMacroBinMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMacroBinMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMacroBinMultiSprite.setEditable(false);
        jTextPaneAcmeMacroBinMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMacroBinMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMacroBinMultiSprite.setViewportView(jTextPaneAcmeMacroBinMultiSprite);

        jScrollPaneAcmeMacroBinMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMacroBinMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMacroBinMonoSprite.setEditable(false);
        jTextPaneAcmeMacroBinMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMacroBinMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMacroBinMonoSprite.setViewportView(jTextPaneAcmeMacroBinMonoSprite);

        buttonGroupAcmeByte.add(jRadioButtonAcmeMark08Byte);
        jRadioButtonAcmeMark08Byte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeMark08ByteItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeMark08Byte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMark08Byte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMark08Byte.setEditable(false);
        jTextPaneAcmeMark08Byte.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMark08Byte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b> !08</b> <font color='red'>$xx</font><br>\n     <b> !08</b> <font color='blue'>dd</font><br>\n     <b> !08</b> <font color='green'>%bb</font><br>\n     <b> !08</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMark08Byte.setViewportView(jTextPaneAcmeMark08Byte);

        buttonGroupAcmeByte.add(jRadioButtonAcmeMarkByByte);
        jRadioButtonAcmeMarkByByte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeMarkByByteItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeMarkByByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMarkByByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMarkByByte.setEditable(false);
        jTextPaneAcmeMarkByByte.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMarkByByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b> !by</b> <font color='red'>$xx</font><br>\n     <b> !by</b> <font color='blue'>dd</font><br>\n     <b> !by</b> <font color='green'>%bb</font><br>\n     <b> !by</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMarkByByte.setViewportView(jTextPaneAcmeMarkByByte);

        jLabelAcmeTribyteDeclaration.setText("Tribyte:");

        buttonGroupAcmeTribyte.add(jRadioButtonAcmeMarkTwentyfourTribyte);
        jRadioButtonAcmeMarkTwentyfourTribyte.setSelected(true);
        jRadioButtonAcmeMarkTwentyfourTribyte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeMarkTwentyfourTribyteItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeTwentyfourTribyte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeTwentyfourTribyte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMarkTwentyfourTribyte.setEditable(false);
        jTextPaneAcmeMarkTwentyfourTribyte.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMarkTwentyfourTribyte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>!24</b> <font color='red'>$xxyyzz</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeTwentyfourTribyte.setViewportView(jTextPaneAcmeMarkTwentyfourTribyte);

        jLabelAcmeLongDeclaration.setText("Long:");

        buttonGroupAcmeLong.add(jRadioButtonAcmeMarkThirtytwoLong);
        jRadioButtonAcmeMarkThirtytwoLong.setSelected(true);
        jRadioButtonAcmeMarkThirtytwoLong.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeMarkThirtytwoLongItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeMarkThirtytwoLong.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMarkThirtytwoLong.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMarkThirtytwoLong.setEditable(false);
        jTextPaneAcmeMarkThirtytwoLong.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMarkThirtytwoLong.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> !32</b> <font color='red'>$xxyyzzkk</font><br>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMarkThirtytwoLong.setViewportView(jTextPaneAcmeMarkThirtytwoLong);

        jLabelAcmeWordSwappedDeclaration.setText("Word Swapped:");

        buttonGroupAcmeWordSwapped.add(jRadioButtonAcmeMacroWordSwapped);
        jRadioButtonAcmeMacroWordSwapped.setSelected(true);
        jRadioButtonAcmeMacroWordSwapped.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeMacroWordSwappedItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeMacroWordSwapped.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMacroWordSwapped.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMacroWordSwapped.setEditable(false);
        jTextPaneAcmeMacroWordSwapped.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMacroWordSwapped.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac]</b> <font color='red'>$yyxx</font><br>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMacroWordSwapped.setViewportView(jTextPaneAcmeMacroWordSwapped);

        jLabelAcmeTextDeclaration.setText("Text:");

        buttonGroupDasmText.add(jRadioButtonAcmeMarkText);
        jRadioButtonAcmeMarkText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeMarkTextItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeMarkText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMarkText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMarkText.setEditable(false);
        jTextPaneAcmeMarkText.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMarkText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMarkText.setViewportView(jTextPaneAcmeMarkText);

        buttonGroupDasmText.add(jRadioButtonAcmeMarkTxText);
        jRadioButtonAcmeMarkTxText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeMarkTxTextItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeMarkTxText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMarkTxText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneAcmeMarkTxText.setEditable(false);
        jTextPaneAcmeMarkTxText.setContentType("text/html"); // NOI18N
        jTextPaneAcmeMarkTxText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>!tx</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMarkTxText.setViewportView(jTextPaneAcmeMarkTxText);

        buttonGroupDasmText.add(jRadioButtonAcmeMarkRawText);
        jRadioButtonAcmeMarkRawText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAcmeMarkRawTextItemStateChanged(evt);
            }
        });

        jScrollPaneAcmeMarkRawText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneAcmeMarkRawText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDcText1.setEditable(false);
        jTextPaneDasmDcText1.setContentType("text/html"); // NOI18N
        jTextPaneDasmDcText1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>!raw</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneAcmeMarkRawText.setViewportView(jTextPaneDasmDcText1);

        javax.swing.GroupLayout jPanelAcmeLayout = new javax.swing.GroupLayout(jPanelAcme);
        jPanelAcme.setLayout(jPanelAcmeLayout);
        jPanelAcmeLayout.setHorizontalGroup(
            jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAcmeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelAcmeTextDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelAcmeTribyteDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabelAcmeCommentDeclaration1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelAcmeStartingDeclaration, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelScmeOriginDeclaration, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelAcmeBlockCommentDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE))
                    .addComponent(jLabelAcmeLongDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabelAcmeByteDeclaration, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelAcmeWordDeclaration, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelAcmeWordSwappedDeclaration, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelAcmeMonoSpriteDeclaration, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                        .addComponent(jLabelAcmeMultiSpriteDeclaration, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelAcmeLabelDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonAcmeMarkText)
                    .addComponent(jRadioButtonAcme24HexMultiSprite)
                    .addComponent(jRadioButtonAcme24HexMonoSprite)
                    .addComponent(jRadioButtonAcmeMarkThirtytwoLong)
                    .addComponent(jRadioButtonAcmeMarkTwentyfourTribyte)
                    .addComponent(jRadioButtonAcmeMacroWordSwapped)
                    .addComponent(jRadioButtonAcmeMarkWord)
                    .addComponent(jRadioButtonAcmeMarkByte)
                    .addComponent(jRadioButtonAcmeLabelName)
                    .addComponent(jRadioButtonAcmeSemicolonBlockComment)
                    .addComponent(jRadioButtonAcmeSemicolonComment)
                    .addComponent(jRadioButtonAcmeAsterixOrigin)
                    .addComponent(jRadioButtonAcmeMarkCpuStarting))
                .addGap(2, 2, 2)
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneAcmeMarkText)
                    .addComponent(jScrollPaneAcmeByteHexMultiSprite)
                    .addComponent(jScrollPaneAcme24HexMonoSprite)
                    .addComponent(jScrollPaneAcmeMarkThirtytwoLong, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                    .addComponent(jScrollPaneAcmeTwentyfourTribyte)
                    .addComponent(jScrollPaneAcmeMacroWordSwapped)
                    .addComponent(jScrollPaneAcmeMarkWord)
                    .addComponent(jScrollPaneAcmeMarkByte)
                    .addComponent(jScrollPaneAcmeLabelName)
                    .addComponent(jScrollPaneAcmeSemicolonBlockComment)
                    .addComponent(jScrollPaneAcmeSemicolonComment)
                    .addComponent(jScrollPaneDasmLabelAsterixOrigin)
                    .addComponent(jScrollPaneAcmeLabelMarkCpuStarting))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonAcmeMarkIfBlockComment)
                    .addComponent(jRadioButtonAcmeLabelNameColon)
                    .addComponent(jRadioButtonAcmeMark8Byte)
                    .addComponent(jRadioButtonAcmeMark16Word)
                    .addComponent(jRadioButtonAcme24BinMonoSprite)
                    .addComponent(jRadioButtonAcme24BinMultiSprite)
                    .addComponent(jRadioButtonAcmeMarkTxText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneAcmeMarkIfBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPaneAcmeLabelNameColon, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelAcmeLayout.createSequentialGroup()
                        .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneAcmeMark8Byte, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPaneAcmeMark16Word, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPaneAcme24BinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPaneAcme24BinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPaneAcmeMarkTxText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonAcmeMark08Byte)
                            .addComponent(jRadioButtonAcmeMacroHexMonoSprite)
                            .addComponent(jRadioButtonAcmeMacroHexMultiSprite)
                            .addComponent(jRadioButtonAcmeMarkRawText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPaneAcmeMark08Byte)
                            .addComponent(jScrollPaneAcmeMacroHexMonoSprite)
                            .addComponent(jScrollPaneAcmeMarkRawText)
                            .addComponent(jScrollPaneAcmeMacroHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAcmeLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonAcmeMacroBinMonoSprite)
                            .addComponent(jRadioButtonAcmeMacroBinMultiSprite)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAcmeLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonAcmeMarkByByte)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAcmeLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPaneAcmeMarkByByte, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPaneAcmeMacroBinMultiSprite)
                        .addComponent(jScrollPaneAcmeMacroBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(77, 77, 77))
        );
        jPanelAcmeLayout.setVerticalGroup(
            jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAcmeLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelAcmeStartingDeclaration)
                    .addComponent(jRadioButtonAcmeMarkCpuStarting)
                    .addComponent(jScrollPaneAcmeLabelMarkCpuStarting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelScmeOriginDeclaration)
                    .addComponent(jRadioButtonAcmeAsterixOrigin)
                    .addComponent(jScrollPaneDasmLabelAsterixOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelAcmeCommentDeclaration1)
                    .addComponent(jRadioButtonAcmeSemicolonComment)
                    .addComponent(jScrollPaneAcmeSemicolonComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelAcmeBlockCommentDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonAcmeSemicolonBlockComment)
                    .addComponent(jScrollPaneAcmeSemicolonBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonAcmeMarkIfBlockComment)
                    .addComponent(jScrollPaneAcmeMarkIfBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelAcmeLabelDeclaration)
                    .addComponent(jRadioButtonAcmeLabelName)
                    .addComponent(jScrollPaneAcmeLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonAcmeLabelNameColon)
                    .addComponent(jScrollPaneAcmeLabelNameColon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jScrollPaneAcmeMarkByByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonAcmeMarkByByte)
                    .addComponent(jScrollPaneAcmeMark08Byte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonAcmeMark08Byte)
                    .addComponent(jScrollPaneAcmeMark8Byte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonAcmeMark8Byte)
                    .addComponent(jScrollPaneAcmeMarkByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonAcmeMarkByte)
                    .addComponent(jLabelAcmeByteDeclaration))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelAcmeWordDeclaration)
                    .addComponent(jRadioButtonAcmeMarkWord)
                    .addComponent(jScrollPaneAcmeMarkWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonAcmeMark16Word)
                    .addComponent(jScrollPaneAcmeMark16Word, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelAcmeWordSwappedDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonAcmeMacroWordSwapped)
                    .addComponent(jScrollPaneAcmeMacroWordSwapped, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAcmeLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonAcmeMarkTwentyfourTribyte)
                            .addComponent(jScrollPaneAcmeTwentyfourTribyte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelAcmeLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabelAcmeTribyteDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelAcmeLongDeclaration)
                    .addComponent(jRadioButtonAcmeMarkThirtytwoLong)
                    .addComponent(jScrollPaneAcmeMarkThirtytwoLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelAcmeMonoSpriteDeclaration)
                    .addComponent(jRadioButtonAcme24HexMonoSprite)
                    .addComponent(jScrollPaneAcme24HexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonAcme24BinMonoSprite)
                    .addComponent(jScrollPaneAcme24BinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonAcmeMacroHexMonoSprite)
                    .addComponent(jScrollPaneAcmeMacroHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonAcmeMacroBinMonoSprite)
                    .addComponent(jScrollPaneAcmeMacroBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelAcmeMultiSpriteDeclaration)
                    .addComponent(jRadioButtonAcme24HexMultiSprite)
                    .addComponent(jScrollPaneAcmeByteHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonAcme24BinMultiSprite)
                    .addComponent(jScrollPaneAcme24BinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonAcmeMacroHexMultiSprite)
                    .addComponent(jScrollPaneAcmeMacroHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonAcmeMacroBinMultiSprite)
                    .addComponent(jScrollPaneAcmeMacroBinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelAcmeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jScrollPaneAcmeMarkRawText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonAcmeMarkRawText)
                    .addComponent(jScrollPaneAcmeMarkTxText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonAcmeMarkTxText)
                    .addComponent(jScrollPaneAcmeMarkText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonAcmeMarkText)
                    .addComponent(jLabelAcmeTextDeclaration))
                .addContainerGap(319, Short.MAX_VALUE))
        );

        jTabbedPaneAssembler.addTab("ACME", jPanelAcme);

        jLabelKickLabelDeclaration.setText("Label:");

        buttonGroupKickLabel.add(jRadioButtonKickLabelNameColon);
        jRadioButtonKickLabelNameColon.setSelected(true);
        jRadioButtonKickLabelNameColon.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickLabelNameColonItemStateChanged(evt);
            }
        });

        jScrollPaneKickLabelNameColon.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickLabelNameColon.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickLabelNameColon.setEditable(false);
        jTextPaneKickLabelNameColon.setContentType("text/html"); // NOI18N
        jTextPaneKickLabelNameColon.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <font color='black'>zzzz</font><b>:</b>\n    </p\n  </body>\n</html>\n");
        jScrollPaneKickLabelNameColon.setViewportView(jTextPaneKickLabelNameColon);

        jLabelKickByteDeclaration.setText("Byte:");

        buttonGroupKickByte.add(jRadioButtonKickDotByte);
        jRadioButtonKickDotByte.setSelected(true);
        jRadioButtonKickDotByte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotByteItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotByte.setEditable(false);
        jTextPaneKickDotByte.setContentType("text/html"); // NOI18N
        jTextPaneKickDotByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .byte</b> <font color='red'>$xx</font><br>\n     <b> .byte</b> <font color='blue'>dd</font><br>\n     <b> .byte</b> <font color='green'>%bb</font><br>\n     <b> .byte</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotByte.setViewportView(jTextPaneKickDotByte);

        jLabelKickWordDeclaration.setText("Word:");

        buttonGroupKickWord.add(jRadioButtonKickDotWord);
        jRadioButtonKickDotWord.setSelected(true);
        jRadioButtonKickDotWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotWordItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotWord.setEditable(false);
        jTextPaneKickDotWord.setContentType("text/html"); // NOI18N
        jTextPaneKickDotWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .word</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotWord.setViewportView(jTextPaneKickDotWord);

        jLabelKickStartingDeclaration.setText("Starting:");

        buttonGroupKickStarting.add(jRadioButtonKickDotCpuUndStarting);
        jRadioButtonKickDotCpuUndStarting.setSelected(true);
        jRadioButtonKickDotCpuUndStarting.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotCpuUndStartingItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotCpuUndStarting.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotCpuUndStarting.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotCpuUndStarting.setEditable(false);
        jTextPaneKickDotCpuUndStarting.setContentType("text/html"); // NOI18N
        jTextPaneKickDotCpuUndStarting.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>.cpu</b> _6502\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotCpuUndStarting.setViewportView(jTextPaneKickDotCpuUndStarting);

        jLabelKickCommentDeclaration.setText("Comment:");

        buttonGroupKickComment.add(jRadioButtonKickDoubleBarComment);
        jRadioButtonKickDoubleBarComment.setSelected(true);
        jRadioButtonKickDoubleBarComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDoubleBarCommentItemStateChanged(evt);
            }
        });

        jScrollPaneKickDoubleBarComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDoubleBarComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDoubleBarComment.setEditable(false);
        jTextPaneKickDoubleBarComment.setContentType("text/html"); // NOI18N
        jTextPaneKickDoubleBarComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>//</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDoubleBarComment.setViewportView(jTextPaneKickDoubleBarComment);

        jLabelKickOriginDeclaration.setText("Origin:");

        buttonGroupKickOrigin.add(jRadioButtonKickAsterixOrigin);
        jRadioButtonKickAsterixOrigin.setSelected(true);
        jRadioButtonKickAsterixOrigin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickAsterixOriginItemStateChanged(evt);
            }
        });

        jScrollPaneKickAsterixOrigin.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickAsterixOrigin.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickAsterixOrigin.setEditable(false);
        jTextPaneKickAsterixOrigin.setContentType("text/html"); // NOI18N
        jTextPaneKickAsterixOrigin.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>*=</b>$xxyy\n    </p>\n  </body>\n</html>");
        jScrollPaneKickAsterixOrigin.setViewportView(jTextPaneKickAsterixOrigin);

        buttonGroupKickOrigin.add(jRadioButtonKickDotPcOrigin);
        jRadioButtonKickDotPcOrigin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotPcOriginItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotPcOrigin.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotPcOrigin.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotPcOrigin.setEditable(false);
        jTextPaneKickDotPcOrigin.setContentType("text/html"); // NOI18N
        jTextPaneKickDotPcOrigin.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>.pc</b> $xxyy\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotPcOrigin.setViewportView(jTextPaneKickDotPcOrigin);

        jLabelKickBlockCommentDeclaration.setText("Block Comment:");

        buttonGroupKickBlockComment.add(jRadioButtonKickDoubleBarBlockComment);
        jRadioButtonKickDoubleBarBlockComment.setSelected(true);
        jRadioButtonKickDoubleBarBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDoubleBarBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneKickDoubleBarBlockComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDoubleBarBlockComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDoubleBarBlockComment.setEditable(false);
        jTextPaneKickDoubleBarBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneKickDoubleBarBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>//</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDoubleBarBlockComment.setViewportView(jTextPaneKickDoubleBarBlockComment);

        buttonGroupKickBlockComment.add(jRadioButtonKickCstyleBlockComment);
        jRadioButtonKickCstyleBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickCstyleBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneKickCstyleBlockComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickCstyleBlockComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickCstyleBlockComment.setEditable(false);
        jTextPaneKickCstyleBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneKickCstyleBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>/*</b> xxx <b'>*/</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickCstyleBlockComment.setViewportView(jTextPaneKickCstyleBlockComment);

        buttonGroupKickBlockComment.add(jRadioButtonDasmDotIfPBlockComment);
        jRadioButtonDasmDotIfPBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmDotIfPBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneDasmDotIfPBlockComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmDotIfPBlockComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmDotIfPBlockComment.setEditable(false);
        jTextPaneDasmDotIfPBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneDasmDotIfPBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>if (0)</b> {xxx}\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmDotIfPBlockComment.setViewportView(jTextPaneDasmDotIfPBlockComment);

        jLabelKickMultiSpriteDeclaration.setText("Multicolor sprite:");

        jLabelKickMonoSpriteDeclaration.setText("Monocolor sprite:");

        buttonGroupKickMonoSprite.add(jRadioButtonKickByteHexMonoSprite);
        jRadioButtonKickByteHexMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickByteHexMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupKickMultiSprite.add(jRadioButtonKickByteHexMultiSprite);
        jRadioButtonKickByteHexMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickByteHexMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneKickByteHexMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickByteHexMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickByteHexMultiSprite.setEditable(false);
        jTextPaneKickByteHexMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickByteHexMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> [byte]</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickByteHexMultiSprite.setViewportView(jTextPaneKickByteHexMultiSprite);

        jScrollPaneKickByteHexMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickByteHexMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickByteHexMonoSprite.setEditable(false);
        jTextPaneKickByteHexMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickByteHexMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> [byte]</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickByteHexMonoSprite.setViewportView(jTextPaneKickByteHexMonoSprite);

        buttonGroupKickMonoSprite.add(jRadioButtonKickByteBinMonoSprite);
        jRadioButtonKickByteBinMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickByteBinMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupKickMultiSprite.add(jRadioButtonKickByteBinMultiSprite);
        jRadioButtonKickByteBinMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickByteBinMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneKickByteBinMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickByteBinMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickByteBinMultiSprite.setEditable(false);
        jTextPaneKickByteBinMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickByteBinMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[byte]</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickByteBinMultiSprite.setViewportView(jTextPaneKickByteBinMultiSprite);

        jScrollPaneKickByteBinMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickByteBinMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickByteBinMonoSprite.setEditable(false);
        jTextPaneKickByteBinMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickByteBinMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[byte]</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickByteBinMonoSprite.setViewportView(jTextPaneKickByteBinMonoSprite);

        buttonGroupKickMonoSprite.add(jRadioButtonKickMacroHexMonoSprite);
        jRadioButtonKickMacroHexMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroHexMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupKickMultiSprite.add(jRadioButtonKickMacroHexMultiSprite);
        jRadioButtonKickMacroHexMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroHexMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneKickMacroHexMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickMacroHexMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroHexMultiSprite.setEditable(false);
        jTextPaneKickMacroHexMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroHexMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.macro] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickMacroHexMultiSprite.setViewportView(jTextPaneKickMacroHexMultiSprite);

        jScrollPaneKickMacroHexMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickMacroHexMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroHexMonoSprite.setEditable(false);
        jTextPaneKickMacroHexMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroHexMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.macro] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickMacroHexMonoSprite.setViewportView(jTextPaneKickMacroHexMonoSprite);

        buttonGroupKickMonoSprite.add(jRadioButtonKickMacroBinMonoSprite);
        jRadioButtonKickMacroBinMonoSprite.setSelected(true);
        jRadioButtonKickMacroBinMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroBinMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupKickMultiSprite.add(jRadioButtonKickMacroBinMultiSprite);
        jRadioButtonKickMacroBinMultiSprite.setSelected(true);
        jRadioButtonKickMacroBinMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroBinMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPanekickMacroBinMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPanekickMacroBinMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroBinMultiSprite.setEditable(false);
        jTextPaneKickMacroBinMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroBinMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.macro] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPanekickMacroBinMultiSprite.setViewportView(jTextPaneKickMacroBinMultiSprite);

        jScrollPaneKickMacroBinMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickMacroBinMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroBinMonoSprite.setEditable(false);
        jTextPaneKickMacroBinMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroBinMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.macro] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickMacroBinMonoSprite.setViewportView(jTextPaneKickMacroBinMonoSprite);

        jLabelKickTribyteDeclaration.setText("Tribyte:");

        buttonGroupKickTribyte.add(jRadioButtonKickMacroTribyte);
        jRadioButtonKickMacroTribyte.setSelected(true);
        jRadioButtonKickMacroTribyte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroTribyteItemStateChanged(evt);
            }
        });

        jScrollPaneKickMacroTribyte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickMacroTribyte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroTribyte.setEditable(false);
        jTextPaneKickMacroTribyte.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroTribyte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac]</b> <font color='red'>$xxyyzz</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickMacroTribyte.setViewportView(jTextPaneKickMacroTribyte);

        jLabelKickLongDeclaration.setText("Long:");

        buttonGroupKickLong.add(jRadioButtonKickDwordLong);
        jRadioButtonKickDwordLong.setSelected(true);
        jRadioButtonKickDwordLong.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDwordLongItemStateChanged(evt);
            }
        });

        jScrollPaneKickDwordLong.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDwordLong.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDwordLong.setEditable(false);
        jTextPaneKickDwordLong.setContentType("text/html"); // NOI18N
        jTextPaneKickDwordLong.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .dword</b> <font color='red'>$xxyyzzkk</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDwordLong.setViewportView(jTextPaneKickDwordLong);

        jLabelKickWordSwappedDeclaration.setText("Word Swapped:");

        buttonGroupKickWordSwapped.add(jRadioButtonKickMacroWordSwapped);
        jRadioButtonKickMacroWordSwapped.setSelected(true);
        jRadioButtonKickMacroWordSwapped.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroWordSwappedItemStateChanged(evt);
            }
        });

        jScrollPaneKickMacroWordSwapped.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickMacroWordSwapped.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroWordSwapped.setEditable(false);
        jTextPaneKickMacroWordSwapped.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroWordSwapped.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac]</b> <font color='red'>$yyxx</font><br>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickMacroWordSwapped.setViewportView(jTextPaneKickMacroWordSwapped);

        jLabelKickTextDeclaration.setText("Text:");

        buttonGroupKickText.add(jRadioButtonKickDotText);
        jRadioButtonKickDotText.setSelected(true);
        jRadioButtonKickDotText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotTextItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotText.setEditable(false);
        jTextPaneKickDotText.setContentType("text/html"); // NOI18N
        jTextPaneKickDotText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotText.setViewportView(jTextPaneKickDotText);

        buttonGroupKickByte.add(jRadioButtonKickDotByByte);
        jRadioButtonKickDotByByte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotByByteItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotByByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotByByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotByByte.setEditable(false);
        jTextPaneKickDotByByte.setContentType("text/html"); // NOI18N
        jTextPaneKickDotByByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b> .by</b> <font color='red'>$xx</font><br>\n     <b> .by</b> <font color='blue'>dd</font><br>\n     <b> .by</b> <font color='green'>%bb</font><br>\n     <b> .by</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotByByte.setViewportView(jTextPaneKickDotByByte);

        buttonGroupKickWord.add(jRadioButtonKickDotWoWord);
        jRadioButtonKickDotWoWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotWoWordItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotWoWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotWoWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotWoWord.setEditable(false);
        jTextPaneKickDotWoWord.setContentType("text/html"); // NOI18N
        jTextPaneKickDotWoWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .wo</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotWoWord.setViewportView(jTextPaneKickDotWoWord);

        buttonGroupKickLong.add(jRadioButtonKickDotDwLong);
        jRadioButtonKickDotDwLong.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotDwLongItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotDwLong.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotDwLong.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotDwLong.setEditable(false);
        jTextPaneKickDotDwLong.setContentType("text/html"); // NOI18N
        jTextPaneKickDotDwLong.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .dw</b> <font color='red'>$xxyyzzkk</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotDwLong.setViewportView(jTextPaneKickDotDwLong);

        jCheckBoxKickColonMacro.setText("Call a macro with a colon before");
        jCheckBoxKickColonMacro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxKickColonMacroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelKickAssemblerLayout = new javax.swing.GroupLayout(jPanelKickAssembler);
        jPanelKickAssembler.setLayout(jPanelKickAssemblerLayout);
        jPanelKickAssemblerLayout.setHorizontalGroup(
            jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelKickWordSwappedDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelKickAssemblerLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelKickStartingDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelKickOriginDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelKickCommentDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelKickBlockCommentDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelKickLabelDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelKickByteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelKickWordDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelKickTribyteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelKickMonoSpriteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelKickMultiSpriteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelKickLongDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelKickTextDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                        .addComponent(jRadioButtonKickDotText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPaneKickDotText, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonKickDotCpuUndStarting)
                            .addComponent(jRadioButtonKickAsterixOrigin)
                            .addComponent(jRadioButtonKickDoubleBarComment)
                            .addComponent(jRadioButtonKickDoubleBarBlockComment)
                            .addComponent(jRadioButtonKickLabelNameColon)
                            .addComponent(jRadioButtonKickDotByte)
                            .addComponent(jRadioButtonKickDotWord)
                            .addComponent(jRadioButtonKickMacroWordSwapped)
                            .addComponent(jRadioButtonKickMacroTribyte)
                            .addComponent(jRadioButtonKickDwordLong)
                            .addComponent(jRadioButtonKickByteHexMonoSprite)
                            .addComponent(jRadioButtonKickByteHexMultiSprite))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                                .addComponent(jScrollPaneKickDwordLong, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonKickDotDwLong))
                            .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPaneKickMacroWordSwapped, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPaneKickDotCpuUndStarting, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPaneKickAsterixOrigin, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPaneKickDoubleBarComment, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPaneKickDoubleBarBlockComment, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPaneKickLabelNameColon, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPaneKickDotByte, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPaneKickDotWord, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPaneKickMacroTribyte, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPaneKickByteHexMultiSprite, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelKickAssemblerLayout.createSequentialGroup()
                                        .addComponent(jScrollPaneKickByteHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButtonKickDotWoWord)
                                    .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jRadioButtonKickDotPcOrigin)
                                        .addComponent(jRadioButtonKickByteBinMonoSprite)
                                        .addComponent(jRadioButtonKickByteBinMultiSprite)
                                        .addComponent(jRadioButtonKickCstyleBlockComment, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(jRadioButtonKickDotByByte))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneKickDotPcOrigin, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(jScrollPaneKickDotByByte)
                            .addComponent(jScrollPaneKickDotWoWord)
                            .addComponent(jScrollPaneKickDotDwLong, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(jScrollPaneKickByteBinMonoSprite)
                            .addComponent(jScrollPaneKickByteBinMultiSprite)
                            .addComponent(jScrollPaneKickCstyleBlockComment))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButtonKickMacroHexMonoSprite)
                                    .addComponent(jRadioButtonKickMacroHexMultiSprite))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPaneKickMacroHexMonoSprite, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                    .addComponent(jScrollPaneKickMacroHexMultiSprite)))
                            .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                                .addComponent(jRadioButtonDasmDotIfPBlockComment)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPaneDasmDotIfPBlockComment)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonKickMacroBinMonoSprite)
                            .addComponent(jRadioButtonKickMacroBinMultiSprite, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPaneKickMacroBinMonoSprite)
                            .addComponent(jScrollPanekickMacroBinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34))))
            .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxKickColonMacro, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelKickAssemblerLayout.setVerticalGroup(
            jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxKickColonMacro)
                .addGap(12, 12, 12)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickStartingDeclaration)
                    .addComponent(jRadioButtonKickDotCpuUndStarting)
                    .addComponent(jScrollPaneKickDotCpuUndStarting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickOriginDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickAsterixOrigin)
                    .addComponent(jScrollPaneKickAsterixOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickDotPcOrigin)
                    .addComponent(jScrollPaneKickDotPcOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelKickAssemblerLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelKickCommentDeclaration)
                            .addComponent(jRadioButtonKickDoubleBarComment)
                            .addComponent(jScrollPaneKickDoubleBarComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelKickBlockCommentDeclaration)
                            .addComponent(jRadioButtonKickDoubleBarBlockComment)
                            .addComponent(jScrollPaneKickDoubleBarBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelKickLabelDeclaration)
                            .addComponent(jRadioButtonKickLabelNameColon)
                            .addComponent(jScrollPaneKickLabelNameColon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelKickByteDeclaration)
                            .addComponent(jRadioButtonKickDotByte)
                            .addComponent(jScrollPaneKickDotByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonKickDotByByte)
                            .addComponent(jScrollPaneKickDotByByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelKickWordDeclaration)
                            .addComponent(jRadioButtonKickDotWord)
                            .addComponent(jScrollPaneKickDotWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonKickDotWoWord)
                            .addComponent(jScrollPaneKickDotWoWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelKickWordSwappedDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonKickMacroWordSwapped)
                            .addComponent(jScrollPaneKickMacroWordSwapped, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButtonKickMacroTribyte)
                                    .addComponent(jScrollPaneKickMacroTribyte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabelKickTribyteDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelKickLongDeclaration)
                            .addComponent(jRadioButtonKickDwordLong)
                            .addComponent(jScrollPaneKickDwordLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonKickDotDwLong)
                            .addComponent(jScrollPaneKickDotDwLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jRadioButtonKickCstyleBlockComment)
                            .addComponent(jScrollPaneKickCstyleBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonDasmDotIfPBlockComment)
                            .addComponent(jScrollPaneDasmDotIfPBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(195, 195, 195)))
                .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jScrollPaneKickMacroBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonKickMacroBinMonoSprite))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jRadioButtonKickMacroBinMultiSprite)
                            .addComponent(jScrollPanekickMacroBinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelKickAssemblerLayout.createSequentialGroup()
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelKickMonoSpriteDeclaration)
                            .addComponent(jRadioButtonKickByteHexMonoSprite)
                            .addComponent(jScrollPaneKickByteHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonKickByteBinMonoSprite)
                            .addComponent(jScrollPaneKickByteBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonKickMacroHexMonoSprite)
                            .addComponent(jScrollPaneKickMacroHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelKickMultiSpriteDeclaration)
                            .addComponent(jRadioButtonKickByteHexMultiSprite)
                            .addComponent(jScrollPaneKickByteHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonKickByteBinMultiSprite)
                            .addComponent(jScrollPaneKickByteBinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonKickMacroHexMultiSprite)
                            .addComponent(jScrollPaneKickMacroHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelKickAssemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelKickTextDeclaration)
                            .addComponent(jRadioButtonKickDotText)
                            .addComponent(jScrollPaneKickDotText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(294, Short.MAX_VALUE))
        );

        jTabbedPaneAssembler.addTab("KickAssembler", jPanelKickAssembler);

        jLabelTass64StartingDeclaration.setText("Starting:");

        buttonGroupTass64Starting.add(jRadioButtonTass64DotCpuAStarting);
        jRadioButtonTass64DotCpuAStarting.setSelected(true);
        jRadioButtonTass64DotCpuAStarting.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotCpuAStartingItemStateChanged(evt);
            }
        });

        jScrollPaneDasmTass64DotCpuAStarting.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmTass64DotCpuAStarting.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotCpuAStarting.setEditable(false);
        jTextPaneTass64DotCpuAStarting.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotCpuAStarting.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>.cpu</b> \"6502\"\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmTass64DotCpuAStarting.setViewportView(jTextPaneTass64DotCpuAStarting);

        jLabelTass64OriginDeclaration.setText("Origin:");

        buttonGroupTass64Origin.add(jRadioButtonTass64AsterixOrigin);
        jRadioButtonTass64AsterixOrigin.setSelected(true);
        jRadioButtonTass64AsterixOrigin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64AsterixOriginItemStateChanged(evt);
            }
        });

        jScrollPaneTass64ASterixOrigin.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64ASterixOrigin.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64AsterixOrigin.setEditable(false);
        jTextPaneTass64AsterixOrigin.setContentType("text/html"); // NOI18N
        jTextPaneTass64AsterixOrigin.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>*=</b>$xxyy\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64ASterixOrigin.setViewportView(jTextPaneTass64AsterixOrigin);

        jLabelTass64CommentDeclaration.setText("Comment:");

        buttonGroupTass64Comment.add(jRadioButtonTass64SemicolonComment);
        jRadioButtonTass64SemicolonComment.setSelected(true);
        jRadioButtonTass64SemicolonComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64SemicolonCommentItemStateChanged(evt);
            }
        });

        jScrollPaneTass64SemicolonComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64SemicolonComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64SemicolonComment.setEditable(false);
        jTextPaneTass64SemicolonComment.setContentType("text/html"); // NOI18N
        jTextPaneTass64SemicolonComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>;</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64SemicolonComment.setViewportView(jTextPaneTass64SemicolonComment);

        jLabelTass64BlockCommentDeclaration.setText("Block Comment:");

        buttonGroupTass64BlockComment.add(jRadioButtonTass64SemicolonBlockComment);
        jRadioButtonTass64SemicolonBlockComment.setSelected(true);
        jRadioButtonTass64SemicolonBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64SemicolonBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneTass64SemicolonBlockComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64SemicolonBlockComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64SemicolonBlockComment.setEditable(false);
        jTextPaneTass64SemicolonBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneTass64SemicolonBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>;</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64SemicolonBlockComment.setViewportView(jTextPaneTass64SemicolonBlockComment);

        buttonGroupTass64BlockComment.add(jRadioButtontass64DotIfFiBlockComment);
        jRadioButtontass64DotIfFiBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtontass64DotIfFiBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotIfFiBlockComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotIfFiBlockComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass664DotIfFiBlockComment1.setEditable(false);
        jTextPaneTass664DotIfFiBlockComment1.setContentType("text/html"); // NOI18N
        jTextPaneTass664DotIfFiBlockComment1.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>.if 0</b> xxx <b'>.fi</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotIfFiBlockComment.setViewportView(jTextPaneTass664DotIfFiBlockComment1);

        buttonGroupTass64BlockComment.add(jRadioButtonTass64DotCommentBlockComment);
        jRadioButtonTass64DotCommentBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotCommentBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotCommentBlockComment.setEditable(false);
        jTextPaneTass64DotCommentBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotCommentBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>.comment</b> xxx <b'>.endc</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotComment.setViewportView(jTextPaneTass64DotCommentBlockComment);

        jLabelTass64LabelDeclaration.setText("Label:");

        buttonGroupTass64Label.add(jRadioButtonTass64LabelNameColon);
        jRadioButtonTass64LabelNameColon.setSelected(true);
        jRadioButtonTass64LabelNameColon.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64LabelNameColonItemStateChanged(evt);
            }
        });

        jScrollPaneTass64LabelName.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64LabelName.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64LabelNameColon.setEditable(false);
        jTextPaneTass64LabelNameColon.setContentType("text/html"); // NOI18N
        jTextPaneTass64LabelNameColon.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <font color='black'>zzzz</font><b>:</b>\n    </p\n  </body>\n</html>\n");
        jScrollPaneTass64LabelName.setViewportView(jTextPaneTass64LabelNameColon);

        jLabelTass64WordDeclaration.setText("Word:");

        jLabelTass64ByteDeclaration.setText("Byte:");

        buttonGroupTass64Byte.add(jRadioButtonTass64DotByte);
        jRadioButtonTass64DotByte.setSelected(true);
        jRadioButtonTass64DotByte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotByteItemStateChanged(evt);
            }
        });

        buttonGroupTass64Word.add(jRadioButtonTass64DotWord);
        jRadioButtonTass64DotWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotWordItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotWord.setEditable(false);
        jTextPaneTass64DotWord.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .word</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotWord.setViewportView(jTextPaneTass64DotWord);

        jScrollPaneTass64DotByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotByte.setEditable(false);
        jTextPaneTass64DotByte.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .byte</b> <font color='red'>$xx</font><br>\n     <b> .byte</b> <font color='blue'>dd</font><br>\n     <b> .byte</b> <font color='green'>%bb</font><br>\n     <b> .byte</b> <font color='purple'>'c</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotByte.setViewportView(jTextPaneTass64DotByte);

        buttonGroupTass64Byte.add(jRadioButtonTass64DotCharByte);
        jRadioButtonTass64DotCharByte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotCharByteItemStateChanged(evt);
            }
        });

        buttonGroupTass64Word.add(jRadioButtonTass64DotSintWord);
        jRadioButtonTass64DotSintWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotSintWordItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotSintWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotSintWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotSintWord.setEditable(false);
        jTextPaneTass64DotSintWord.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotSintWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .sint</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotSintWord.setViewportView(jTextPaneTass64DotSintWord);

        jScrollPaneTass64DotCharByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotCharByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotCharByte.setEditable(false);
        jTextPaneTass64DotCharByte.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotCharByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .char</b> <font color='red'>$xx</font><br>\n     <b> .char</b> <font color='blue'>dd</font><br>\n     <b> .char</b> <font color='green'>%bb</font><br>\n     <b> .char</b> <font color='purple'>'c</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotCharByte.setViewportView(jTextPaneTass64DotCharByte);

        jLabelTass64MonoSpriteDeclaration.setText("Monocolor sprite:");

        jLabelTass64MultiSpriteDeclaration.setText("Multicolor sprite:");

        buttonGroupTass64MonoSprite.add(jRadioButtonTass64ByteHexMonoSprite);
        jRadioButtonTass64ByteHexMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64ByteHexMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupTass64MultiSprite.add(jRadioButtonTass64ByteHexMultiSprite);
        jRadioButtonTass64ByteHexMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64ByteHexMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneTass64ByteHexMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64ByteHexMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        TmpxPaneTass64ByteHexMultiSprite.setEditable(false);
        TmpxPaneTass64ByteHexMultiSprite.setContentType("text/html"); // NOI18N
        TmpxPaneTass64ByteHexMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> [byte]</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64ByteHexMultiSprite.setViewportView(TmpxPaneTass64ByteHexMultiSprite);

        jScrollPaneTass64ByteHexMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64ByteHexMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64ByteHexMonoSprite.setEditable(false);
        jTextPaneTass64ByteHexMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneTass64ByteHexMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> [byte]</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64ByteHexMonoSprite.setViewportView(jTextPaneTass64ByteHexMonoSprite);

        buttonGroupTass64MonoSprite.add(jRadioButtonTass64ByteBinMonoSprite);
        jRadioButtonTass64ByteBinMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64ByteBinMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupTass64MultiSprite.add(jRadioButtonTass64ByteBinMultiSprite);
        jRadioButtonTass64ByteBinMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64ByteBinMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneTass64ByteBinMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64ByteBinMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64ByteBinMultiSprite.setEditable(false);
        jTextPaneTass64ByteBinMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneTass64ByteBinMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[byte]</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64ByteBinMultiSprite.setViewportView(jTextPaneTass64ByteBinMultiSprite);

        jScrollPaneTass64ByteBinMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64ByteBinMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64ByteBinMonoSprite.setEditable(false);
        jTextPaneTass64ByteBinMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneTass64ByteBinMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[byte]</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64ByteBinMonoSprite.setViewportView(jTextPaneTass64ByteBinMonoSprite);

        buttonGroupTass64MonoSprite.add(jRadioButtonTass64MacroHexMonoSprite);
        jRadioButtonTass64MacroHexMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64MacroHexMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupTass64MultiSprite.add(jRadioButtonTass64MacroHexMultiSprite);
        jRadioButtonTass64MacroHexMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64MacroHexMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneTass64MacroHexMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64MacroHexMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64MacroHexMultiSprite.setEditable(false);
        jTextPaneTass64MacroHexMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneTass64MacroHexMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64MacroHexMultiSprite.setViewportView(jTextPaneTass64MacroHexMultiSprite);

        jScrollPaneTass64MacroHexMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64MacroHexMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64MacroHexMonoSprite.setEditable(false);
        jTextPaneTass64MacroHexMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneTass64MacroHexMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64MacroHexMonoSprite.setViewportView(jTextPaneTass64MacroHexMonoSprite);

        buttonGroupTass64MonoSprite.add(jRadioButtonTass64MacroBinMonoSprite);
        jRadioButtonTass64MacroBinMonoSprite.setSelected(true);
        jRadioButtonTass64MacroBinMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64MacroBinMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupTass64MultiSprite.add(jRadioButtonTass64MacroBinMultiSprite);
        jRadioButtonTass64MacroBinMultiSprite.setSelected(true);
        jRadioButtonTass64MacroBinMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64MacroBinMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneTass64MacroBinMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64MacroBinMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64MacroBinMultiSprite.setEditable(false);
        jTextPaneTass64MacroBinMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneTass64MacroBinMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64MacroBinMultiSprite.setViewportView(jTextPaneTass64MacroBinMultiSprite);

        jScrollPaneTass64MacroBinMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64MacroBinMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64MacroBinMonoSprite.setEditable(false);
        jTextPaneTass64MacroBinMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneTass64MacroBinMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64MacroBinMonoSprite.setViewportView(jTextPaneTass64MacroBinMonoSprite);

        jLabelTass64TribyteDeclaration.setText("Tribyte:");

        buttonGroupTass64Tribyte.add(jRadioButtonDotTass64LongTribyte);
        jRadioButtonDotTass64LongTribyte.setSelected(true);
        jRadioButtonDotTass64LongTribyte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDotTass64LongTribyteItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotLongTribyte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotLongTribyte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotLongTribyte.setEditable(false);
        jTextPaneTass64DotLongTribyte.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotLongTribyte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .long</b> <font color='red'>$xxyyzz</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotLongTribyte.setViewportView(jTextPaneTass64DotLongTribyte);

        buttonGroupTass64Tribyte.add(jRadioButtonTass64DotLintTribyte);
        jRadioButtonTass64DotLintTribyte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotLintTribyteItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotLintTribyte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotLintTribyte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotLintTribyte.setEditable(false);
        jTextPaneTass64DotLintTribyte.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotLintTribyte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .lint</b> <font color='red'>$xxyyzz</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotLintTribyte.setViewportView(jTextPaneTass64DotLintTribyte);

        jLabelTass64LongDeclaration.setText("Long:");

        buttonGroupTass64Word.add(jRadioButtonTass64DotDwordLong);
        jRadioButtonTass64DotDwordLong.setSelected(true);
        jRadioButtonTass64DotDwordLong.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotDwordLongItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotDwordLong.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotDwordLong.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotDwordLong.setEditable(false);
        jTextPaneTass64DotDwordLong.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotDwordLong.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .dword</b> <font color='red'>$xxyyzzkk</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotDwordLong.setViewportView(jTextPaneTass64DotDwordLong);

        buttonGroupTass64Word.add(jRadioButtonTass64DotDlintLong);
        jRadioButtonTass64DotDlintLong.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotDlintLongItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotDlintLong.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotDlintLong.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotDlintLong.setEditable(false);
        jTextPaneTass64DotDlintLong.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotDlintLong.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .dint</b> <font color='red'>$xxyyzzkk</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotDlintLong.setViewportView(jTextPaneTass64DotDlintLong);

        jLabelTass65WordSwappedDeclaration.setText("Word Swapped:");

        buttonGroupTass64WaordSwapped.add(jRadioButtonTass64MacroWordSwapped);
        jRadioButtonTass64MacroWordSwapped.setSelected(true);
        jRadioButtonTass64MacroWordSwapped.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64MacroWordSwappedItemStateChanged(evt);
            }
        });

        jScrollPaneTass64MacroWordSwapped.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64MacroWordSwapped.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64MacroWordSwapped.setEditable(false);
        jTextPaneTass64MacroWordSwapped.setContentType("text/html"); // NOI18N
        jTextPaneTass64MacroWordSwapped.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac]</b> <font color='red'>$yyxx</font><br>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64MacroWordSwapped.setViewportView(jTextPaneTass64MacroWordSwapped);

        jLabelTass65TextDeclaration.setText("Text:");

        buttonGroupTass64Text.add(jRadioButtonTass64DotText);
        jRadioButtonTass64DotText.setSelected(true);
        jRadioButtonTass64DotText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonTass64DotTextItemStateChanged(evt);
            }
        });

        jScrollPaneTass64DotText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneTass64DotText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneTass64DotText.setEditable(false);
        jTextPaneTass64DotText.setContentType("text/html"); // NOI18N
        jTextPaneTass64DotText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>.text</b> <font color='red'>\"xxx\"</font><br>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneTass64DotText.setViewportView(jTextPaneTass64DotText);

        javax.swing.GroupLayout jPanelTass64Layout = new javax.swing.GroupLayout(jPanelTass64);
        jPanelTass64.setLayout(jPanelTass64Layout);
        jPanelTass64Layout.setHorizontalGroup(
            jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTass64Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelTass64StartingDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64OriginDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64CommentDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64BlockCommentDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64LabelDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64ByteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64WordDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass65WordSwappedDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(jLabelTass64TribyteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64LongDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64MonoSpriteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass64MultiSpriteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelTass65TextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonTass64DotCpuAStarting)
                    .addComponent(jRadioButtonTass64AsterixOrigin)
                    .addComponent(jRadioButtonTass64SemicolonComment)
                    .addComponent(jRadioButtonTass64SemicolonBlockComment)
                    .addComponent(jRadioButtonTass64LabelNameColon)
                    .addComponent(jRadioButtonTass64DotByte)
                    .addComponent(jRadioButtonTass64DotWord)
                    .addComponent(jRadioButtonTass64MacroWordSwapped)
                    .addComponent(jRadioButtonDotTass64LongTribyte)
                    .addComponent(jRadioButtonTass64DotDwordLong)
                    .addComponent(jRadioButtonTass64ByteHexMonoSprite)
                    .addComponent(jRadioButtonTass64ByteHexMultiSprite)
                    .addComponent(jRadioButtonTass64DotText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneDasmTass64DotCpuAStarting)
                    .addComponent(jScrollPaneTass64ASterixOrigin)
                    .addComponent(jScrollPaneTass64SemicolonComment)
                    .addComponent(jScrollPaneTass64SemicolonBlockComment)
                    .addComponent(jScrollPaneTass64LabelName)
                    .addComponent(jScrollPaneTass64DotByte)
                    .addComponent(jScrollPaneTass64DotWord)
                    .addComponent(jScrollPaneTass64DotLongTribyte)
                    .addGroup(jPanelTass64Layout.createSequentialGroup()
                        .addComponent(jScrollPaneTass64DotDwordLong, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPaneTass64MacroWordSwapped)
                    .addComponent(jScrollPaneTass64ByteHexMonoSprite)
                    .addComponent(jScrollPaneTass64ByteHexMultiSprite)
                    .addComponent(jScrollPaneTass64DotText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonTass64DotCommentBlockComment)
                    .addComponent(jRadioButtonTass64DotCharByte)
                    .addComponent(jRadioButtonTass64DotSintWord)
                    .addComponent(jRadioButtonTass64DotLintTribyte)
                    .addComponent(jRadioButtonTass64DotDlintLong)
                    .addComponent(jRadioButtonTass64ByteBinMonoSprite)
                    .addComponent(jRadioButtonTass64ByteBinMultiSprite))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelTass64Layout.createSequentialGroup()
                        .addComponent(jScrollPaneTass64DotComment, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtontass64DotIfFiBlockComment)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPaneTass64DotIfFiBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(155, 155, 155))
                    .addGroup(jPanelTass64Layout.createSequentialGroup()
                        .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPaneTass64DotCharByte)
                            .addComponent(jScrollPaneTass64DotSintWord, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneTass64DotLintTribyte, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneTass64DotDlintLong, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneTass64ByteBinMultiSprite, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneTass64ByteBinMonoSprite, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonTass64MacroHexMonoSprite)
                            .addComponent(jRadioButtonTass64MacroHexMultiSprite))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneTass64MacroHexMultiSprite)
                            .addComponent(jScrollPaneTass64MacroHexMonoSprite))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonTass64MacroBinMonoSprite)
                            .addComponent(jRadioButtonTass64MacroBinMultiSprite))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPaneTass64MacroBinMonoSprite)
                            .addComponent(jScrollPaneTass64MacroBinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        jPanelTass64Layout.setVerticalGroup(
            jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTass64Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64StartingDeclaration)
                    .addComponent(jRadioButtonTass64DotCpuAStarting)
                    .addComponent(jScrollPaneDasmTass64DotCpuAStarting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64OriginDeclaration)
                    .addComponent(jRadioButtonTass64AsterixOrigin)
                    .addComponent(jScrollPaneTass64ASterixOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64CommentDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64SemicolonComment)
                    .addComponent(jScrollPaneTass64SemicolonComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64BlockCommentDeclaration)
                    .addComponent(jRadioButtonTass64SemicolonBlockComment)
                    .addComponent(jScrollPaneTass64SemicolonBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64DotCommentBlockComment)
                    .addComponent(jScrollPaneTass64DotComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtontass64DotIfFiBlockComment)
                    .addComponent(jScrollPaneTass64DotIfFiBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64LabelDeclaration)
                    .addComponent(jRadioButtonTass64LabelNameColon)
                    .addComponent(jScrollPaneTass64LabelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64ByteDeclaration)
                    .addComponent(jRadioButtonTass64DotByte)
                    .addComponent(jScrollPaneTass64DotByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64DotCharByte)
                    .addComponent(jScrollPaneTass64DotCharByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64WordDeclaration)
                    .addComponent(jRadioButtonTass64DotWord)
                    .addComponent(jScrollPaneTass64DotWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64DotSintWord)
                    .addComponent(jScrollPaneTass64DotSintWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass65WordSwappedDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64MacroWordSwapped)
                    .addComponent(jScrollPaneTass64MacroWordSwapped, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64TribyteDeclaration)
                    .addComponent(jRadioButtonDotTass64LongTribyte)
                    .addComponent(jScrollPaneTass64DotLongTribyte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64DotLintTribyte)
                    .addComponent(jScrollPaneTass64DotLintTribyte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64LongDeclaration)
                    .addComponent(jRadioButtonTass64DotDwordLong)
                    .addComponent(jScrollPaneTass64DotDwordLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64DotDlintLong)
                    .addComponent(jScrollPaneTass64DotDlintLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64MonoSpriteDeclaration)
                    .addComponent(jRadioButtonTass64ByteHexMonoSprite)
                    .addComponent(jScrollPaneTass64ByteHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64ByteBinMonoSprite)
                    .addComponent(jScrollPaneTass64ByteBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64MacroHexMonoSprite)
                    .addComponent(jScrollPaneTass64MacroHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64MacroBinMonoSprite)
                    .addComponent(jScrollPaneTass64MacroBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass64MultiSpriteDeclaration)
                    .addComponent(jRadioButtonTass64ByteHexMultiSprite)
                    .addComponent(jScrollPaneTass64ByteHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64ByteBinMultiSprite)
                    .addComponent(jScrollPaneTass64ByteBinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64MacroHexMultiSprite)
                    .addComponent(jScrollPaneTass64MacroHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64MacroBinMultiSprite)
                    .addComponent(jScrollPaneTass64MacroBinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTass64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelTass65TextDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonTass64DotText)
                    .addComponent(jScrollPaneTass64DotText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(326, Short.MAX_VALUE))
        );

        jTabbedPaneAssembler.addTab("64Tass", jPanelTass64);

        javax.swing.GroupLayout jPanelDisassemblerLayout = new javax.swing.GroupLayout(jPanelDisassembler);
        jPanelDisassembler.setLayout(jPanelDisassemblerLayout);
        jPanelDisassemblerLayout.setHorizontalGroup(
            jPanelDisassemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDisassemblerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelAutoComment, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxAssembler, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelDisassemblerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPaneAssembler, javax.swing.GroupLayout.PREFERRED_SIZE, 802, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelDisassemblerLayout.setVerticalGroup(
            jPanelDisassemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDisassemblerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDisassemblerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAutoComment)
                    .addComponent(jComboBoxAssembler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPaneAssembler))
        );

        jTabbedPaneOption.addTab("Disassembler", jPanelDisassembler);

        buttonGroupLook.add(jRadioButtonLookJava);
        jRadioButtonLookJava.setText("Java");
        jRadioButtonLookJava.setEnabled(false);
        jRadioButtonLookJava.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookJavaItemStateChanged(evt);
            }
        });

        buttonGroupLook.add(jRadioButtonLookMac);
        jRadioButtonLookMac.setText("Machintosh");
        jRadioButtonLookMac.setEnabled(false);
        jRadioButtonLookMac.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookMacItemStateChanged(evt);
            }
        });

        buttonGroupLook.add(jRadioButtonLookMetal);
        jRadioButtonLookMetal.setText("Metal");
        jRadioButtonLookMetal.setEnabled(false);
        jRadioButtonLookMetal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookMetalItemStateChanged(evt);
            }
        });

        buttonGroupLook.add(jRadioButtonLookWin);
        jRadioButtonLookWin.setText("Windows style");
        jRadioButtonLookWin.setEnabled(false);
        jRadioButtonLookWin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookWinItemStateChanged(evt);
            }
        });

        buttonGroupLook.add(jRadioButtonLookGtk);
        jRadioButtonLookGtk.setText("GTK style");
        jRadioButtonLookGtk.setEnabled(false);
        jRadioButtonLookGtk.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookGtkItemStateChanged(evt);
            }
        });

        buttonGroupLook.add(jRadioButtonLookNimbus);
        jRadioButtonLookNimbus.setText("Nimbus");
        jRadioButtonLookNimbus.setEnabled(false);
        jRadioButtonLookNimbus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookNimbusItemStateChanged(evt);
            }
        });

        jLabelLook.setText("Look & Feel:");

        jLabelTheme.setText("Theme:");

        buttonGroupTheme.add(jRadioButtonOcean);
        jRadioButtonOcean.setText("Ocean");
        jRadioButtonOcean.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonOceanItemStateChanged(evt);
            }
        });

        buttonGroupTheme.add(jRadioButtonSteel);
        jRadioButtonSteel.setText("Steel");
        jRadioButtonSteel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonSteelItemStateChanged(evt);
            }
        });

        buttonGroupTheme.add(jRadioButtonAqua);
        jRadioButtonAqua.setText("Aqua");
        jRadioButtonAqua.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonAquaItemStateChanged(evt);
            }
        });

        buttonGroupTheme.add(jRadioButtonCharcoal);
        jRadioButtonCharcoal.setText("Charcoal");
        jRadioButtonCharcoal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonCharcoalItemStateChanged(evt);
            }
        });

        buttonGroupTheme.add(jRadioButtonHighContrast);
        jRadioButtonHighContrast.setText("High Contrast");
        jRadioButtonHighContrast.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonHighContrastItemStateChanged(evt);
            }
        });

        buttonGroupTheme.add(jRadioButtonEmerald);
        jRadioButtonEmerald.setText("Emerald");
        jRadioButtonEmerald.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonEmeraldItemStateChanged(evt);
            }
        });

        buttonGroupTheme.add(jRadioButtonRuby);
        jRadioButtonRuby.setText("Ruby");
        jRadioButtonRuby.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonRubyItemStateChanged(evt);
            }
        });

        buttonGroupLook.add(jRadioButtonLookCWin);
        jRadioButtonLookCWin.setText("Windows classic style");
        jRadioButtonLookCWin.setEnabled(false);
        jRadioButtonLookCWin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookCWinItemStateChanged(evt);
            }
        });

        jLabelBracket.setFont(new java.awt.Font("Tahoma", 0, 64)); // NOI18N
        jLabelBracket.setText("{");

        buttonGroupLook.add(jRadioButtonLookSynth);
        jRadioButtonLookSynth.setText("Synth based");
        jRadioButtonLookSynth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonLookSynthItemStateChanged(evt);
            }
        });

        jLabelArrow.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabelArrow.setText("----------------->");

        jListLaf.setModel(listModel);
        jListLaf.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListLaf.setEnabled(false);
        jListLaf.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListLafValueChanged(evt);
            }
        });
        jScrollPaneList.setViewportView(jListLaf);

        jLabelFlatLaf.setText("Flat laf look & feel:");

        javax.swing.GroupLayout jPanelLookLayout = new javax.swing.GroupLayout(jPanelLook);
        jPanelLook.setLayout(jPanelLookLayout);
        jPanelLookLayout.setHorizontalGroup(
            jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLookLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelLookLayout.createSequentialGroup()
                        .addComponent(jRadioButtonLookCWin, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelBracket)
                        .addGap(13, 13, 13)
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelTheme, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonOcean, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonSteel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonCharcoal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonAqua, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonHighContrast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonEmerald, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonRuby, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelLookLayout.createSequentialGroup()
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jRadioButtonLookSynth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelLook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonLookJava, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonLookMac, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonLookMetal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonLookWin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                            .addComponent(jRadioButtonLookNimbus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButtonLookGtk, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelArrow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPaneList, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabelFlatLaf, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE))
                .addContainerGap(259, Short.MAX_VALUE))
        );
        jPanelLookLayout.setVerticalGroup(
            jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLookLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLookLayout.createSequentialGroup()
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelTheme)
                            .addComponent(jLabelFlatLaf))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelLookLayout.createSequentialGroup()
                                .addComponent(jRadioButtonOcean)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonSteel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonAqua)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonCharcoal)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPaneList)))
                    .addGroup(jPanelLookLayout.createSequentialGroup()
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanelLookLayout.createSequentialGroup()
                                .addComponent(jLabelLook)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButtonLookJava)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonLookMac)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonLookMetal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonLookWin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jRadioButtonLookCWin)
                                    .addComponent(jRadioButtonHighContrast)))
                            .addComponent(jLabelBracket, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButtonLookGtk)
                            .addComponent(jRadioButtonEmerald))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButtonLookNimbus)
                            .addComponent(jRadioButtonRuby))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelLookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonLookSynth))
                        .addContainerGap(643, Short.MAX_VALUE))))
        );

        jTabbedPaneOption.addTab("Look & Feel", jPanelLook);

        jPanelOption.add(jTabbedPaneOption, java.awt.BorderLayout.CENTER);

        jButtonLoad.setText("Load");
        jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadActionPerformed(evt);
            }
        });
        jPanelDn.add(jButtonLoad);

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        jPanelDn.add(jButtonSave);

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });
        jPanelDn.add(jButtonClose);

        jPanelOption.add(jPanelDn, java.awt.BorderLayout.SOUTH);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanelOption, javax.swing.GroupLayout.PREFERRED_SIZE, 817, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jPanelOption, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadActionPerformed
      if(!FileManager.instance.readOptionFile(FileManager.OPTION_FILE, option)) {
        JOptionPane.showMessageDialog(this, "Error reading the option file", "Loading error", JOptionPane.ERROR_MESSAGE);
      } else {
          JOptionPane.showMessageDialog(this, "Loading done", "Loading options", JOptionPane.INFORMATION_MESSAGE);
          applyOption();          
        }
    }//GEN-LAST:event_jButtonLoadActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
       if (!FileManager.instance.writeOptionFile(FileManager.OPTION_FILE, option)) {
        JOptionPane.showMessageDialog(this, "Error writing the option file", "Saving error", JOptionPane.ERROR_MESSAGE);
      } else JOptionPane.showMessageDialog(this, "Saving done", "Saving options", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
      setVisible(false);
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void jCheckBoxErasePlusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxErasePlusItemStateChanged
        option.erasePlus=jCheckBoxErasePlus.isSelected();
    }//GEN-LAST:event_jCheckBoxErasePlusItemStateChanged

    private void jCheckBoxOpcodeFormattingSourceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxOpcodeFormattingSourceItemStateChanged
        option.opcodeUpperCaseSource=jCheckBoxOpcodeFormattingSource.isSelected();
    }//GEN-LAST:event_jCheckBoxOpcodeFormattingSourceItemStateChanged

    private void jTextFieldSidFreqHiFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldSidFreqHiFocusLost
        String txt=jTextFieldSidFreqHi.getText();
        txt=txt.replaceAll(" ", "");
        if ("".equals(txt)) option.sidFreqHiLabel="frequencyHi";
        else option.sidFreqHiLabel=txt;
    }//GEN-LAST:event_jTextFieldSidFreqHiFocusLost

    private void jTextFieldSidFreqLoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldSidFreqLoFocusLost
        String txt=jTextFieldSidFreqLo.getText();
        txt=txt.replaceAll(" ", "");
        if ("".equals(txt)) option.sidFreqLoLabel="frequencyLo";
        else option.sidFreqLoLabel=txt;
    }//GEN-LAST:event_jTextFieldSidFreqLoFocusLost

    private void jTextFieldPlaySoundFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldPlaySoundFocusLost
        String txt=jTextFieldPlaySound.getText();
        txt=txt.replaceAll(" ", "");
        if ("".equals(txt)) option.psidPlaySoundsLabel="playSound";
        else option.psidPlaySoundsLabel=txt;
    }//GEN-LAST:event_jTextFieldPlaySoundFocusLost

    private void jTextFieldInitSongsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldInitSongsFocusLost
        String txt=jTextFieldInitSongs.getText();
        txt=txt.replaceAll(" ", "");
        if ("".equals(txt)) option.psidInitSongsLabel="initSongs";
        else option.psidInitSongsLabel=txt;
    }//GEN-LAST:event_jTextFieldInitSongsFocusLost

    private void jSpinnerMaxByteAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxByteAggregateStateChanged
        option.maxByteAggregate=(Integer)jSpinnerMaxByteAggregate.getValue();
    }//GEN-LAST:event_jSpinnerMaxByteAggregateStateChanged

    private void jSpinnerMaxLengthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxLengthStateChanged
        option.maxLabelLength=(Integer)jSpinnerMaxLength.getValue();
    }//GEN-LAST:event_jSpinnerMaxLengthStateChanged

    private void jCheckBoxUndefinedCodeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxUndefinedCodeItemStateChanged
        option.useAsCode=jCheckBoxUndefinedCode.isSelected();
    }//GEN-LAST:event_jCheckBoxUndefinedCodeItemStateChanged

    private void jCheckBoxOpcodeFormattingPreviewItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxOpcodeFormattingPreviewItemStateChanged
        option.opcodeUpperCasePreview=jCheckBoxOpcodeFormattingPreview.isSelected();
    }//GEN-LAST:event_jCheckBoxOpcodeFormattingPreviewItemStateChanged

    private void jCheckBoxEraseDCommItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxEraseDCommItemStateChanged
        option.eraseDComm=jCheckBoxEraseDComm.isSelected();
    }//GEN-LAST:event_jCheckBoxEraseDCommItemStateChanged

    private void jRadioButtonLangItalianItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLangItalianItemStateChanged
        option.commentLanguage=C64Dasm.LANG_ITALIAN;
    }//GEN-LAST:event_jRadioButtonLangItalianItemStateChanged

    private void jRadioButtonLangEnglishItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLangEnglishItemStateChanged
        option.commentLanguage=C64Dasm.LANG_ENGLISH;
    }//GEN-LAST:event_jRadioButtonLangEnglishItemStateChanged

    private void jRadioButtonStyle3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonStyle3ItemStateChanged
        option.illegalOpcodeMode=M6510Dasm.MODE3;
    }//GEN-LAST:event_jRadioButtonStyle3ItemStateChanged

    private void jRadioButtonStyle2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonStyle2ItemStateChanged
        option.illegalOpcodeMode=M6510Dasm.MODE2;
    }//GEN-LAST:event_jRadioButtonStyle2ItemStateChanged

    private void jRadioButtonStyle1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonStyle1ItemStateChanged
        option.illegalOpcodeMode=M6510Dasm.MODE1;
    }//GEN-LAST:event_jRadioButtonStyle1ItemStateChanged

    private void jRadioButtonLookJavaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookJavaItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_MOTIF; 
        option.setLafName(actualLEF);
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);  
      }
    }//GEN-LAST:event_jRadioButtonLookJavaItemStateChanged

    private void jRadioButtonLookMacItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookMacItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_MAC;
        option.setLafName(actualLEF);   
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookMacItemStateChanged

    private void jRadioButtonLookMetalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookMetalItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_METAL;
        option.setLafName(actualLEF);    
        enableTheme();
        selectedTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme); 
      }
    }//GEN-LAST:event_jRadioButtonLookMetalItemStateChanged

    private void jRadioButtonLookWinItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookWinItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_WINDOWS;
        option.setLafName(actualLEF);    
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookWinItemStateChanged

    private void jRadioButtonLookGtkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookGtkItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_GTK;  
        option.setLafName(actualLEF);  
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookGtkItemStateChanged

    private void jRadioButtonLookNimbusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookNimbusItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_NIMBUS;
        option.setLafName(actualLEF);
        option.setTheme(Option.THEME_NULL);
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookNimbusItemStateChanged

    private void jRadioButtonLookCWinItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookCWinItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_CWINDOWS;
        option.setLafName(actualLEF);    
        option.setTheme(Option.THEME_NULL); 
        disableTheme();
        jListLaf.setEnabled(false);
        Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonLookCWinItemStateChanged

    private void jRadioButtonLookSynthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonLookSynthItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
        actualLEF=Option.LAF_SYNTH;  
        option.setLafName(actualLEF);  
        disableTheme();
        jListLaf.setEnabled(true);
        
        actualLaf=(String)listModel.getElementAt(jListLaf.getSelectedIndex());
        option.setFlatLaf(actualLaf);
        Option.useLookAndFeel(actualLaf);
      }
    }//GEN-LAST:event_jRadioButtonLookSynthItemStateChanged

    private void jListLafValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListLafValueChanged
      if (!goFlat) return;
        
      if (evt != null && evt.getValueIsAdjusting()) {
        return;
      }
      if (evt == null) {
        return;
      }
      
      actualLaf=(String)listModel.getElementAt(jListLaf.getSelectedIndex());
      option.setFlatLaf(actualLaf);
      Option.useLookAndFeel(actualLaf);
    }//GEN-LAST:event_jListLafValueChanged

    private void jRadioButtonOceanItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonOceanItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_OCEAN);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonOceanItemStateChanged

    private void jRadioButtonSteelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonSteelItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_STEEL);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }
    }//GEN-LAST:event_jRadioButtonSteelItemStateChanged

    private void jRadioButtonAquaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAquaItemStateChanged
     if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_AQUA);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }      
    }//GEN-LAST:event_jRadioButtonAquaItemStateChanged

    private void jRadioButtonCharcoalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCharcoalItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_CHARCOAL);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }    
    }//GEN-LAST:event_jRadioButtonCharcoalItemStateChanged

    private void jRadioButtonHighContrastItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonHighContrastItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_CONTRAST);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }      
    }//GEN-LAST:event_jRadioButtonHighContrastItemStateChanged

    private void jRadioButtonEmeraldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonEmeraldItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_EMERALD);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      }     
    }//GEN-LAST:event_jRadioButtonEmeraldItemStateChanged

    private void jRadioButtonRubyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonRubyItemStateChanged
      if (evt.getStateChange()==java.awt.event.ItemEvent.SELECTED) {
         option.setTheme(Option.THEME_RUBY);
         actualTheme=option.getMethalTheme();
         Option.useLookAndFeel(actualLEF, actualTheme);
      } 
    }//GEN-LAST:event_jRadioButtonRubyItemStateChanged

    private void jCheckBoxC64ZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64ZeroPageItemStateChanged
      option.commentC64ZeroPage=jCheckBoxC64ZeroPage.isSelected();
    }//GEN-LAST:event_jCheckBoxC64ZeroPageItemStateChanged

    private void jCheckBoxC64StackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64StackAreaItemStateChanged
      option.commentC64StackArea=jCheckBoxC64StackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxC64StackAreaItemStateChanged

    private void jCheckBoxC64_200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64_200AreaItemStateChanged
      option.commentC64_200Area=jCheckBoxC64_200Area.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC64_200AreaItemStateChanged

    private void jCheckBoxC64_300AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64_300AreaItemStateChanged
      option.commentC64_300Area=jCheckBoxC64_300Area.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC64_300AreaItemStateChanged

    private void jCheckBoxC64FreeAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64FreeAreaItemStateChanged
      option.commentC64BasicFreeArea=jCheckBoxC64FreeArea.isSelected();
    }//GEN-LAST:event_jCheckBoxC64FreeAreaItemStateChanged

    private void jCheckBoxC64BasicRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64BasicRomItemStateChanged
      option.commentC64BasicRom=jCheckBoxC64BasicRom.isSelected();
    }//GEN-LAST:event_jCheckBoxC64BasicRomItemStateChanged

    private void jCheckBoxC64FreeRamItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64FreeRamItemStateChanged
      option.commentC64FreeRam=jCheckBoxC64FreeRam.isSelected();
    }//GEN-LAST:event_jCheckBoxC64FreeRamItemStateChanged

    private void jCheckC64BoxVicIIItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckC64BoxVicIIItemStateChanged
      option.commentC64VicII=jCheckC64BoxVicII.isSelected();
    }//GEN-LAST:event_jCheckC64BoxVicIIItemStateChanged

    private void jCheckC64BoxSidItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckC64BoxSidItemStateChanged
      option.commentC64Sid=jCheckC64BoxSid.isSelected();
    }//GEN-LAST:event_jCheckC64BoxSidItemStateChanged

    private void jCheckBoxC64ColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64ColorItemStateChanged
      option.commentC64ColorArea=jCheckBoxC64Color.isSelected();
    }//GEN-LAST:event_jCheckBoxC64ColorItemStateChanged

    private void jCheckBoxC64Cia1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64Cia1ItemStateChanged
      option.commentC64Cia1=jCheckBoxC64Cia1.isSelected();
    }//GEN-LAST:event_jCheckBoxC64Cia1ItemStateChanged

    private void jCheckBoxC64Cia2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64Cia2ItemStateChanged
      option.commentC64Cia2=jCheckBoxC64Cia2.isSelected();
    }//GEN-LAST:event_jCheckBoxC64Cia2ItemStateChanged

    private void jCheckBoxC64KernalRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64KernalRomItemStateChanged
      option.commentC64KernalRom=jCheckBoxC64KernalRom.isSelected();
    }//GEN-LAST:event_jCheckBoxC64KernalRomItemStateChanged

    private void jCheckBoxC64ScreenAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC64ScreenAreaItemStateChanged
      option.commentC64ScreenArea=jCheckBoxC64ScreenArea.isSelected();
    }//GEN-LAST:event_jCheckBoxC64ScreenAreaItemStateChanged

    private void jCheckBoxC1541ZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541ZeroPageItemStateChanged
      option.commentC1541ZeroPage=jCheckBoxC1541ZeroPage.isShowing();
    }//GEN-LAST:event_jCheckBoxC1541ZeroPageItemStateChanged

    private void jCheckBoxC1541StackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541StackAreaItemStateChanged
      option.commentC1541StackArea=jCheckBoxC64StackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541StackAreaItemStateChanged

    private void jCheckBoxC1541_200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541_200AreaItemStateChanged
      option.commentC1541_200Area=jCheckBoxC1541_200Area.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541_200AreaItemStateChanged

    private void jCheckBoxC1541Via1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Via1ItemStateChanged
      option.commentC1541Via1=jCheckBoxC1541Via1.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541Via1ItemStateChanged

    private void jCheckBoxC1541Via2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Via2ItemStateChanged
      option.commentC1541Via2=jCheckBoxC1541Via2.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541Via2ItemStateChanged

    private void jCheckBoxC1541KernalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541KernalItemStateChanged
     option.commentC1541Kernal=jCheckBoxC1541Kernal.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541KernalItemStateChanged

    private void jCheckBoxC1541Buffer0ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer0ItemStateChanged
      option.commentC1541Buffer0=jCheckBoxC1541Buffer0.isSelected();
    }//GEN-LAST:event_jCheckBoxC1541Buffer0ItemStateChanged

    private void jCheckBoxC1541Buffer1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer1ItemStateChanged
      option.commentC1541Buffer1=jCheckBoxC1541Buffer1.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC1541Buffer1ItemStateChanged

    private void jCheckBoxC1541Buffer2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer2ItemStateChanged
      option.commentC1541Buffer2=jCheckBoxC1541Buffer2.isSelected();  
    }//GEN-LAST:event_jCheckBoxC1541Buffer2ItemStateChanged

    private void jCheckBoxC1541Buffer3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer3ItemStateChanged
      option.commentC1541Buffer3=jCheckBoxC1541Buffer3.isSelected();  
    }//GEN-LAST:event_jCheckBoxC1541Buffer3ItemStateChanged

    private void jCheckBoxC1541Buffer4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC1541Buffer4ItemStateChanged
      option.commentC1541Buffer4=jCheckBoxC1541Buffer4.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC1541Buffer4ItemStateChanged

    private void jCheckBoxPlus4ZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4ZeroPageItemStateChanged
      option.commentPlus4ZeroPage=jCheckBoxPlus4ZeroPage.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4ZeroPageItemStateChanged

    private void jCheckBoxPlus4StackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4StackAreaItemStateChanged
      option.commentPlus4StackArea=jCheckBoxPlus4StackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4StackAreaItemStateChanged

    private void jCheckBoxPlus4_200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_200AreaItemStateChanged
      option.commentPlus4_200Area=jCheckBoxPlus4_200Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_200AreaItemStateChanged

    private void jCheckBoxPlus4_300AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_300AreaItemStateChanged
      option.commentPlus4_300Area=jCheckBoxPlus4_300Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_300AreaItemStateChanged

    private void jCheckBoxPlus4_400AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_400AreaItemStateChanged
      option.commentPlus4_400Area=jCheckBoxPlus4_400Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_400AreaItemStateChanged

    private void jCheckBoxPlus4_500AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_500AreaItemStateChanged
      option.commentPlus4_500Area=jCheckBoxPlus4_500Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_500AreaItemStateChanged

    private void jCheckBoxPlus4_600AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_600AreaItemStateChanged
      option.commentPlus4_600Area=jCheckBoxPlus4_600Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_600AreaItemStateChanged

    private void jCheckBoxPlus4_700AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_700AreaItemStateChanged
      option.commentPlus4_700Area=jCheckBoxPlus4_700Area.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_700AreaItemStateChanged

    private void jCheckBoxPlus4ColorAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4ColorAreaItemStateChanged
      option.commentPlus4ColorArea=jCheckBoxPlus4ColorArea.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4ColorAreaItemStateChanged

    private void jCheckBoxPlus4VideoAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4VideoAreaItemStateChanged
      option.commentPlus4VideoArea=jCheckBoxPlus4VideoArea.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4VideoAreaItemStateChanged

    private void jCheckBoxPlus4BasicRamPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4BasicRamPItemStateChanged
      option.commentPlus4BasicRamP=jCheckBoxPlus4BasicRamP.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4BasicRamPItemStateChanged

    private void jCheckBoxPlus4LuminanceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4LuminanceItemStateChanged
      option.commentPlus4Luminance=jCheckBoxPlus4Luminance.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4LuminanceItemStateChanged

    private void jCheckBoxPlus4ColorBitmapItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4ColorBitmapItemStateChanged
      option.commentPlus4ColorBitmap=jCheckBoxPlus4ColorBitmap.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4ColorBitmapItemStateChanged

    private void jCheckBoxPlus4GraphicDataItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4GraphicDataItemStateChanged
      option.commentPlus4GraphicData=jCheckBoxPlus4GraphicData.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4GraphicDataItemStateChanged

    private void jCheckBoxPlus4BasicRamNItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4BasicRamNItemStateChanged
      option.commentPlus4BasicRamN=jCheckBoxPlus4BasicRamN.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4BasicRamNItemStateChanged

    private void jCheckBoxPlus4BasicRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4BasicRomItemStateChanged
      option.commentPlus4BasicRom=jCheckBoxPlus4BasicRom.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4BasicRomItemStateChanged

    private void jCheckBoxPlus4BasicExtItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4BasicExtItemStateChanged
      option.commentPlus4BasicExt=jCheckBoxPlus4BasicExt.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4BasicExtItemStateChanged

    private void jCheckBoxPlus4CaracterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4CaracterItemStateChanged
      option.commentPlus4Caracter=jCheckBoxPlus4Caracter.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4CaracterItemStateChanged

    private void jCheckBoxPlus4AciaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4AciaItemStateChanged
      option.commentPlus4Acia=jCheckBoxPlus4Acia.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4AciaItemStateChanged

    private void jCheckBoxPlus4_6529B_1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_6529B_1ItemStateChanged
      option.commentPlus4_6529B_1=jCheckBoxPlus4_6529B_1.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_6529B_1ItemStateChanged

    private void jCheckBoxPlus4_6529B_2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4_6529B_2ItemStateChanged
      option.commentPlus4_6529B_2=jCheckBoxPlus4_6529B_2.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4_6529B_2ItemStateChanged

    private void jCheckBoxPlus4TedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4TedItemStateChanged
      option.commentPlus4Ted=jCheckBoxPlus4Ted.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4TedItemStateChanged

    private void jCheckBoxPlus4KernalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxPlus4KernalItemStateChanged
      option.commentPlus4Kernal=jCheckBoxPlus4Kernal.isSelected();
    }//GEN-LAST:event_jCheckBoxPlus4KernalItemStateChanged

    private void jCheckBoxVic20StackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20StackAreaItemStateChanged
      option.commentVic20StackArea=jCheckBoxVic20StackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20StackAreaItemStateChanged

    private void jCheckBoxVic20ZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20ZeroPageItemStateChanged
      option.commentVic20ZeroPage=jCheckBoxVic20ZeroPage.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20ZeroPageItemStateChanged

    private void jCheckBoxVic20_200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_200AreaItemStateChanged
      option.commentVic20_200Area=jCheckBoxVic20_200Area.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20_200AreaItemStateChanged

    private void jCheckBoxVic20_300AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_300AreaItemStateChanged
      option.commentVic20_300Area=jCheckBoxVic20_300Area.isSelected();  
    }//GEN-LAST:event_jCheckBoxVic20_300AreaItemStateChanged

    private void jCheckBoxVic20_400AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_400AreaItemStateChanged
      option.commentVic20_400Area=jCheckBoxVic20_400Area.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20_400AreaItemStateChanged

    private void jCheckBoxVic20VicItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20VicItemStateChanged
      option.commentVic20Vic=jCheckBoxVic20Vic.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20VicItemStateChanged

    private void jCheckBoxVic20Via1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Via1ItemStateChanged
      option.commentVic20Via1=jCheckBoxVic20Via1.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20Via1ItemStateChanged

    private void jCheckBoxVic20Via2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Via2ItemStateChanged
      option.commentVic20Via2=jCheckBoxVic20Via2.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20Via2ItemStateChanged

    private void jCheckBoxVic20UserBasicItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20UserBasicItemStateChanged
      option.commentVic20UserBasic=jCheckBoxVic20UserBasic.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20UserBasicItemStateChanged

    private void jCheckBoxVic20ScreenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20ScreenItemStateChanged
      option.commentVic20Screen=jCheckBoxVic20Screen.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20ScreenItemStateChanged

    private void jCheckBoxVic20_8kExp1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_8kExp1ItemStateChanged
      option.commentVic20_8kExp1=jCheckBoxVic20_8kExp1.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20_8kExp1ItemStateChanged

    private void jCheckBoxVic20_8kExp2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_8kExp2ItemStateChanged
      option.commentVic20_8kExp2=jCheckBoxVic20_8kExp2.isSelected();    
    }//GEN-LAST:event_jCheckBoxVic20_8kExp2ItemStateChanged

    private void jCheckBoxVic20_8kExp3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20_8kExp3ItemStateChanged
      option.commentVic20_8kExp3=jCheckBoxVic20_8kExp3.isSelected();
    }//GEN-LAST:event_jCheckBoxVic20_8kExp3ItemStateChanged

    private void jCheckBoxVic20CharacterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20CharacterItemStateChanged
      option.commentVic20Character=jCheckBoxVic20Character.isSelected();  
    }//GEN-LAST:event_jCheckBoxVic20CharacterItemStateChanged

    private void jCheckBoxVic20ColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20ColorItemStateChanged
      option.commentVic20Color=jCheckBoxVic20Color.isSelected();   
    }//GEN-LAST:event_jCheckBoxVic20ColorItemStateChanged

    private void jCheckBoxVic20Block2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Block2ItemStateChanged
      option.commentVic20Block2=jCheckBoxVic20Block2.isSelected();  
    }//GEN-LAST:event_jCheckBoxVic20Block2ItemStateChanged

    private void jCheckBoxVic20Block3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Block3ItemStateChanged
      option.commentVic20Block3=jCheckBoxVic20Block3.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20Block3ItemStateChanged

    private void jCheckBoxVic20Block4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20Block4ItemStateChanged
      option.commentVic20Block4=jCheckBoxVic20Block4.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20Block4ItemStateChanged

    private void jCheckBoxVic20BasicRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20BasicRomItemStateChanged
      option.commentVic20BasicRom=jCheckBoxVic20BasicRom.isSelected(); 
    }//GEN-LAST:event_jCheckBoxVic20BasicRomItemStateChanged

    private void jCheckBoxVic20KernalRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVic20KernalRomItemStateChanged
      option.commentVic20KernalRom=jCheckBoxVic20KernalRom.isSelected();  
    }//GEN-LAST:event_jCheckBoxVic20KernalRomItemStateChanged

    private void jSpinnerInstrSpacesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerInstrSpacesStateChanged
      int num=(Integer)((JSpinner) evt.getSource()).getValue();
      if (num+option.numInstrTabs==0) jSpinnerInstrSpaces.setValue(1);
      else option.numInstrSpaces=num;      
    }//GEN-LAST:event_jSpinnerInstrSpacesStateChanged

    private void jSpinnerInstrTabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerInstrTabsStateChanged
      int num=(Integer)((JSpinner) evt.getSource()).getValue();
      if (num+option.numInstrSpaces==0) jSpinnerInstrTabs.setValue(1);
      else option.numInstrTabs=num;       
    }//GEN-LAST:event_jSpinnerInstrTabsStateChanged

    private void jSpinnerDataSpacesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerDataSpacesStateChanged
      int num=(Integer)((JSpinner) evt.getSource()).getValue();
      if (num+option.numDataTabs==0) jSpinnerDataSpaces.setValue(1);
      else option.numDataSpaces=num;         
    }//GEN-LAST:event_jSpinnerDataSpacesStateChanged

    private void jSpinnerDataTabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerDataTabsStateChanged
      int num=(Integer)((JSpinner) evt.getSource()).getValue();
      if (num+option.numDataSpaces==0) jSpinnerDataTabs.setValue(1);
      else option.numDataTabs=num;       
    }//GEN-LAST:event_jSpinnerDataTabsStateChanged

    private void jCheckBoxLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxLabelActionPerformed
      option.labelOnSepLine=jCheckBoxLabel.isSelected();
    }//GEN-LAST:event_jCheckBoxLabelActionPerformed

    private void jCheckBoxDasmF3CompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxDasmF3CompActionPerformed
      option.dasmF3Comp=jCheckBoxDasmF3Comp.isSelected();
    }//GEN-LAST:event_jCheckBoxDasmF3CompActionPerformed

    private void jComboBoxAssemblerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxAssemblerItemStateChanged
      String str=(String)jComboBoxAssembler.getSelectedItem();
      
      for (Assembler.Name name: Assembler.Name.values()) {
        if (name.getName().equals(str)) {
          option.assembler=name;  
          return;
        }
      }
      
      
    }//GEN-LAST:event_jComboBoxAssemblerItemStateChanged

    private void jRadioButtonDasmLabelNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmLabelNameItemStateChanged
      option.dasmLabel=Assembler.Label.NAME;
    }//GEN-LAST:event_jRadioButtonDasmLabelNameItemStateChanged

    private void jRadioButtonDasmLabelNameColonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmLabelNameColonItemStateChanged
      option.dasmLabel=Assembler.Label.NAME_COLON;
    }//GEN-LAST:event_jRadioButtonDasmLabelNameColonItemStateChanged

    private void jRadioButtonDasmDotByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmDotByteItemStateChanged
      option.dasmByte=Assembler.Byte.DOT_BYTE;
    }//GEN-LAST:event_jRadioButtonDasmDotByteItemStateChanged

    private void jRadioButtonDasmByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmByteItemStateChanged
      option.dasmByte=Assembler.Byte.BYTE;
    }//GEN-LAST:event_jRadioButtonDasmByteItemStateChanged

    private void jRadioButtonDasmDcByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmDcByteItemStateChanged
      option.dasmByte=Assembler.Byte.DC_BYTE;
    }//GEN-LAST:event_jRadioButtonDasmDcByteItemStateChanged

    private void jRadioButtonDasmDcBByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmDcBByteItemStateChanged
      option.dasmByte=Assembler.Byte.DC_B_BYTE;
    }//GEN-LAST:event_jRadioButtonDasmDcBByteItemStateChanged

    private void jRadioButtonDasmDotWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmDotWordItemStateChanged
      option.dasmWord=Assembler.Word.DOT_WORD;
    }//GEN-LAST:event_jRadioButtonDasmDotWordItemStateChanged

    private void jRadioButtonDasmWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmWordItemStateChanged
      option.dasmWord=Assembler.Word.WORD;
    }//GEN-LAST:event_jRadioButtonDasmWordItemStateChanged

    private void jRadioButtonDasmDcWWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmDcWWordItemStateChanged
      option.dasmWord=Assembler.Word.DC_W_WORD;
    }//GEN-LAST:event_jRadioButtonDasmDcWWordItemStateChanged

    private void jSpinnerMaxWordAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxWordAggregateStateChanged
      option.maxWordAggregate=(Integer)jSpinnerMaxWordAggregate.getValue();
    }//GEN-LAST:event_jSpinnerMaxWordAggregateStateChanged

    private void jSpinnerMaxTribyteAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxTribyteAggregateStateChanged
      option.maxTribyteAggregate=(Integer)jSpinnerMaxTribyteAggregate.getValue();
    }//GEN-LAST:event_jSpinnerMaxTribyteAggregateStateChanged

    private void jSpinnerMaxLongAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxLongAggregateStateChanged
      option.maxLongAggregate=(Integer)jSpinnerMaxLongAggregate.getValue();
    }//GEN-LAST:event_jSpinnerMaxLongAggregateStateChanged

    private void jRadioButtonDasmCstyleCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmCstyleCommentItemStateChanged
      option.dasmComment=Assembler.Comment.CSTYLE;
    }//GEN-LAST:event_jRadioButtonDasmCstyleCommentItemStateChanged

    private void jRadioButtonDasmSemicolonCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmSemicolonCommentItemStateChanged
      option.dasmComment=Assembler.Comment.SEMICOLON;
    }//GEN-LAST:event_jRadioButtonDasmSemicolonCommentItemStateChanged

    private void jRadioButtonDasmSemicolonBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmSemicolonBlockCommentItemStateChanged
      option.dasmBlockComment=Assembler.BlockComment.SEMICOLON;
    }//GEN-LAST:event_jRadioButtonDasmSemicolonBlockCommentItemStateChanged

    private void jRadioButtonDasmCstyleBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmCstyleBlockCommentItemStateChanged
      option.dasmBlockComment=Assembler.BlockComment.CSTYLE;
    }//GEN-LAST:event_jRadioButtonDasmCstyleBlockCommentItemStateChanged

    private void jRadioButtonDasmIfBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmIfBlockCommentItemStateChanged
      option.dasmBlockComment=Assembler.BlockComment.IF;
    }//GEN-LAST:event_jRadioButtonDasmIfBlockCommentItemStateChanged

    private void jRadioButtonTmpxSemicolonCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxSemicolonCommentItemStateChanged
      option.tmpxComment=Assembler.Comment.SEMICOLON;
    }//GEN-LAST:event_jRadioButtonTmpxSemicolonCommentItemStateChanged

    private void jRadioButtonTmpxSemicolonBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxSemicolonBlockCommentItemStateChanged
      option.tmpxBlockComment=Assembler.BlockComment.SEMICOLON;
    }//GEN-LAST:event_jRadioButtonTmpxSemicolonBlockCommentItemStateChanged

    private void jRadioButtonDasmDotOriginItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmDotOriginItemStateChanged
      option.dasmOrigin=Assembler.Origin.DOT_ORG;
    }//GEN-LAST:event_jRadioButtonDasmDotOriginItemStateChanged

    private void jRadioButtonDasmOriginItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmOriginItemStateChanged
      option.dasmOrigin=Assembler.Origin.ORG;
    }//GEN-LAST:event_jRadioButtonDasmOriginItemStateChanged

    private void jRadioButtonTmpxAsterixOriginItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxAsterixOriginItemStateChanged
      option.tmpxOrigin=Assembler.Origin.ASTERISK;
    }//GEN-LAST:event_jRadioButtonTmpxAsterixOriginItemStateChanged

    private void jRadioButtonTmpxDotIfBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxDotIfBlockCommentItemStateChanged
      option.tmpxBlockComment=Assembler.BlockComment.DOT_IF;
    }//GEN-LAST:event_jRadioButtonTmpxDotIfBlockCommentItemStateChanged

    private void jRadioButtonCa65SemicolonBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65SemicolonBlockCommentItemStateChanged
      option.ca65BlockComment=Assembler.BlockComment.SEMICOLON;
    }//GEN-LAST:event_jRadioButtonCa65SemicolonBlockCommentItemStateChanged

    private void jRadioButtonCa65SemicolonCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65SemicolonCommentItemStateChanged
      option.ca65Comment=Assembler.Comment.SEMICOLON; 
    }//GEN-LAST:event_jRadioButtonCa65SemicolonCommentItemStateChanged

    private void jRadioButtonCa65DotOriginItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65DotOriginItemStateChanged
      option.ca65Origin=Assembler.Origin.DOT_ORG;  
    }//GEN-LAST:event_jRadioButtonCa65DotOriginItemStateChanged

    private void jRadioButtonDasmProcStartingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmProcStartingItemStateChanged
      option.dasmStarting=Assembler.Starting.PROC;
    }//GEN-LAST:event_jRadioButtonDasmProcStartingItemStateChanged

    private void jRadioButtonTmpxFakeStartingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxFakeStartingItemStateChanged
      option.tmpxStarting=Assembler.Starting.FAKE;
    }//GEN-LAST:event_jRadioButtonTmpxFakeStartingItemStateChanged

    private void jRadioButtonCa65DotP02StartingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65DotP02StartingItemStateChanged
      option.ca65Starting=Assembler.Starting.DOT_P02;
    }//GEN-LAST:event_jRadioButtonCa65DotP02StartingItemStateChanged

    private void jRadioButtonCa65DotSetcpuStartingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65DotSetcpuStartingItemStateChanged
      option.ca65Starting=Assembler.Starting.DOT_SETCPU;
    }//GEN-LAST:event_jRadioButtonCa65DotSetcpuStartingItemStateChanged

    private void jRadioButtonAcmeAsterixOriginItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeAsterixOriginItemStateChanged
      option.acmeOrigin=Assembler.Origin.ASTERISK; 
    }//GEN-LAST:event_jRadioButtonAcmeAsterixOriginItemStateChanged

    private void jRadioButtonAcmeMarkCpuStartingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeMarkCpuStartingItemStateChanged
      option.acmeStarting=Assembler.Starting.MARK_CPU;
    }//GEN-LAST:event_jRadioButtonAcmeMarkCpuStartingItemStateChanged

    private void jRadioButtonAcmeSemicolonCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeSemicolonCommentItemStateChanged
      option.acmeComment=Assembler.Comment.SEMICOLON;
    }//GEN-LAST:event_jRadioButtonAcmeSemicolonCommentItemStateChanged

    private void jRadioButtonAcmeSemicolonBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeSemicolonBlockCommentItemStateChanged
      option.acmeBlockComment=Assembler.BlockComment.SEMICOLON;
    }//GEN-LAST:event_jRadioButtonAcmeSemicolonBlockCommentItemStateChanged

    private void jRadioButtonAcmeMarkIfBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeMarkIfBlockCommentItemStateChanged
      option.acmeBlockComment=Assembler.BlockComment.MARK_IF;
    }//GEN-LAST:event_jRadioButtonAcmeMarkIfBlockCommentItemStateChanged

    private void jCheckBoxC128ZeroPageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128ZeroPageItemStateChanged
      option.commentC128ZeroPage=jCheckBoxC128ZeroPage.isSelected();     
    }//GEN-LAST:event_jCheckBoxC128ZeroPageItemStateChanged

    private void jCheckBoxC128StackAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128StackAreaItemStateChanged
      option.commentC128StackArea=jCheckBoxC128StackArea.isSelected();
    }//GEN-LAST:event_jCheckBoxC128StackAreaItemStateChanged

    private void jCheckBoxC128_300AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128_300AreaItemStateChanged
      option.commentC128_300Area=jCheckBoxC128_300Area.isShowing();
    }//GEN-LAST:event_jCheckBoxC128_300AreaItemStateChanged

    private void jCheckBoxC128_200AreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128_200AreaItemStateChanged
      option.commentC128_200Area=jCheckBoxC128_200Area.isShowing();
    }//GEN-LAST:event_jCheckBoxC128_200AreaItemStateChanged

    private void jCheckBoxC128ScreenAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128ScreenAreaItemStateChanged
      option.commentC128ScreenArea=jCheckBoxC128ScreenArea.isSelected();       
    }//GEN-LAST:event_jCheckBoxC128ScreenAreaItemStateChanged

    private void jCheckBoxC128UserBasicItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128UserBasicItemStateChanged
      option.commentC128UserBasic=jCheckBoxC128UserBasic.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC128UserBasicItemStateChanged

    private void jCheckBoxC128AppProgAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128AppProgAreaItemStateChanged
      option.commentC128AppProgArea=jCheckBoxC128AppProgArea.isSelected(); 
    }//GEN-LAST:event_jCheckBoxC128AppProgAreaItemStateChanged

    private void jCheckBoxC128VideoColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128VideoColorItemStateChanged
      option.commentC128VideoColor=jCheckBoxC128VideoColor.isSelected();
    }//GEN-LAST:event_jCheckBoxC128VideoColorItemStateChanged

    private void jCheckBoxC128ScreenMemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128ScreenMemItemStateChanged
      option.commentC128ScreenMem=jCheckBoxC128ScreenMem.isSelected();
    }//GEN-LAST:event_jCheckBoxC128ScreenMemItemStateChanged

    private void jCheckBoxC128ColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128ColorItemStateChanged
      option.commentC128Color=jCheckBoxC128Color.isSelected();
    }//GEN-LAST:event_jCheckBoxC128ColorItemStateChanged

    private void jCheckBoxC128BasicRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128BasicRomItemStateChanged
      option.commentC128BasicRom=jCheckBoxC128BasicRom.isSelected();
    }//GEN-LAST:event_jCheckBoxC128BasicRomItemStateChanged

    private void jCheckBoxC128VicIIItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128VicIIItemStateChanged
      option.commentC128VicII=jCheckBoxC128VicII.isSelected();
    }//GEN-LAST:event_jCheckBoxC128VicIIItemStateChanged

    private void jCheckBoxC128SidItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128SidItemStateChanged
      option.commentC128Sid=jCheckBoxC128Sid.isSelected();
    }//GEN-LAST:event_jCheckBoxC128SidItemStateChanged

    private void jCheckBoxC128MMUItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128MMUItemStateChanged
      option.commentC128MMU=jCheckBoxC128MMU.isSelected();
    }//GEN-LAST:event_jCheckBoxC128MMUItemStateChanged

    private void jCheckBoxC128VDCItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128VDCItemStateChanged
      option.commentC128VDC=jCheckBoxC128VDC.isSelected();
    }//GEN-LAST:event_jCheckBoxC128VDCItemStateChanged

    private void jCheckBoxC128Cia1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128Cia1ItemStateChanged
      option.commentC128Cia1=jCheckBoxC128Cia1.isSelected();
    }//GEN-LAST:event_jCheckBoxC128Cia1ItemStateChanged

    private void jCheckBoxC128Cia2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128Cia2ItemStateChanged
      option.commentC128Cia2=jCheckBoxC128Cia2.isSelected();
    }//GEN-LAST:event_jCheckBoxC128Cia2ItemStateChanged

    private void jCheckBoxC128DMAItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128DMAItemStateChanged
      option.commentC128DMA=jCheckBoxC128DMA.isSelected();
    }//GEN-LAST:event_jCheckBoxC128DMAItemStateChanged

    private void jCheckBoxC128KernalRomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxC128KernalRomItemStateChanged
      option.commentC128KernalRom=jCheckBoxC128KernalRom.isSelected();
    }//GEN-LAST:event_jCheckBoxC128KernalRomItemStateChanged

    private void jRadioButtonTass64DotCpuAStartingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotCpuAStartingItemStateChanged
      option.tass64Starting=Assembler.Starting.DOT_CPU_A;
    }//GEN-LAST:event_jRadioButtonTass64DotCpuAStartingItemStateChanged

    private void jRadioButtonTass64AsterixOriginItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64AsterixOriginItemStateChanged
      option.tass64Origin=Assembler.Origin.ASTERISK;
    }//GEN-LAST:event_jRadioButtonTass64AsterixOriginItemStateChanged

    private void jRadioButtonTass64SemicolonCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64SemicolonCommentItemStateChanged
      option.tass64Comment=Assembler.Comment.SEMICOLON;
    }//GEN-LAST:event_jRadioButtonTass64SemicolonCommentItemStateChanged

    private void jRadioButtonTass64SemicolonBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64SemicolonBlockCommentItemStateChanged
      option.tass64BlockComment=Assembler.BlockComment.SEMICOLON;
    }//GEN-LAST:event_jRadioButtonTass64SemicolonBlockCommentItemStateChanged

    private void jRadioButtontass64DotIfFiBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtontass64DotIfFiBlockCommentItemStateChanged
      option.tass64BlockComment=Assembler.BlockComment.DOT_IF_FI;
    }//GEN-LAST:event_jRadioButtontass64DotIfFiBlockCommentItemStateChanged

    private void jRadioButtonTass64DotCommentBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotCommentBlockCommentItemStateChanged
      option.tass64BlockComment=Assembler.BlockComment.DOT_COMMENT;
    }//GEN-LAST:event_jRadioButtonTass64DotCommentBlockCommentItemStateChanged

    private void jRadioButtonTass64LabelNameColonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64LabelNameColonItemStateChanged
      option.tass64Label=Assembler.Label.NAME_COLON; 
    }//GEN-LAST:event_jRadioButtonTass64LabelNameColonItemStateChanged

    private void jRadioButtonCa65LabelNameColonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65LabelNameColonItemStateChanged
      option.ca65Label=Assembler.Label.NAME_COLON;
    }//GEN-LAST:event_jRadioButtonCa65LabelNameColonItemStateChanged

    private void jRadioButtonTass64DotByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotByteItemStateChanged
      option.tass64Byte=Assembler.Byte.DOT_BYTE;
    }//GEN-LAST:event_jRadioButtonTass64DotByteItemStateChanged

    private void jRadioButtonTass64DotWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotWordItemStateChanged
      option.tass64Word=Assembler.Word.DOT_WORD;
    }//GEN-LAST:event_jRadioButtonTass64DotWordItemStateChanged

    private void jRadioButtonTass64DotCharByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotCharByteItemStateChanged
      option.tass64Byte=Assembler.Byte.DOT_CHAR;
    }//GEN-LAST:event_jRadioButtonTass64DotCharByteItemStateChanged

    private void jRadioButtonTass64DotSintWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotSintWordItemStateChanged
      option.tass64Word=Assembler.Word.DOT_SINT;
    }//GEN-LAST:event_jRadioButtonTass64DotSintWordItemStateChanged

    private void jRadioButtonDasmByteHexMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmByteHexMonoSpriteItemStateChanged
      option.dasmMonoSprite=Assembler.MonoSprite.BYTE_HEX;
    }//GEN-LAST:event_jRadioButtonDasmByteHexMonoSpriteItemStateChanged

    private void jRadioButtonDasmByteBinMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmByteBinMonoSpriteItemStateChanged
      option.dasmMonoSprite=Assembler.MonoSprite.BYTE_BIN;
    }//GEN-LAST:event_jRadioButtonDasmByteBinMonoSpriteItemStateChanged

    private void jRadioButtonDasmMacroHexMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmMacroHexMonoSpriteItemStateChanged
      option.dasmMonoSprite=Assembler.MonoSprite.MACRO_HEX;
    }//GEN-LAST:event_jRadioButtonDasmMacroHexMonoSpriteItemStateChanged

    private void jRadioButtonDasmMacroBinMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmMacroBinMonoSpriteItemStateChanged
      option.dasmMonoSprite=Assembler.MonoSprite.MACRO_BIN;
    }//GEN-LAST:event_jRadioButtonDasmMacroBinMonoSpriteItemStateChanged

    private void jRadioButtonDasmByteHexMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmByteHexMultiSpriteItemStateChanged
      option.dasmMultiSprite=Assembler.MultiSprite.BYTE_HEX;
    }//GEN-LAST:event_jRadioButtonDasmByteHexMultiSpriteItemStateChanged

    private void jRadioButtonDasmByteBinMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmByteBinMultiSpriteItemStateChanged
      option.dasmMultiSprite=Assembler.MultiSprite.BYTE_BIN;
    }//GEN-LAST:event_jRadioButtonDasmByteBinMultiSpriteItemStateChanged

    private void jRadioButtonDasmMacroHexMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmMacroHexMultiSpriteItemStateChanged
      option.dasmMultiSprite=Assembler.MultiSprite.MACRO_HEX; 
    }//GEN-LAST:event_jRadioButtonDasmMacroHexMultiSpriteItemStateChanged

    private void jRadioButtonDasmMacroBinMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmMacroBinMultiSpriteItemStateChanged
      option.dasmMultiSprite=Assembler.MultiSprite.MACRO_BIN;         
    }//GEN-LAST:event_jRadioButtonDasmMacroBinMultiSpriteItemStateChanged

    private void jRadioButtonAcme24HexMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcme24HexMonoSpriteItemStateChanged
      option.acmeMonoSprite=Assembler.MonoSprite.TWENTYFOUR_HEX;  
    }//GEN-LAST:event_jRadioButtonAcme24HexMonoSpriteItemStateChanged

    private void jRadioButtonAcme24HexMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcme24HexMultiSpriteItemStateChanged
      option.acmeMultiSprite=Assembler.MultiSprite.TWENTYFOUR_HEX; 
    }//GEN-LAST:event_jRadioButtonAcme24HexMultiSpriteItemStateChanged

    private void jRadioButtonAcme24BinMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcme24BinMonoSpriteItemStateChanged
      option.acmeMonoSprite=Assembler.MonoSprite.TWENTYFOUR_BIN;
    }//GEN-LAST:event_jRadioButtonAcme24BinMonoSpriteItemStateChanged

    private void jRadioButtonAcme24BinMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcme24BinMultiSpriteItemStateChanged
      option.acmeMultiSprite=Assembler.MultiSprite.TWENTYFOUR_BIN;
    }//GEN-LAST:event_jRadioButtonAcme24BinMultiSpriteItemStateChanged

    private void jRadioButtonAcmeMacroHexMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeMacroHexMonoSpriteItemStateChanged
      option.acmeMonoSprite=Assembler.MonoSprite.MACRO2_HEX;  
    }//GEN-LAST:event_jRadioButtonAcmeMacroHexMonoSpriteItemStateChanged

    private void jRadioButtonAcmeMacroHexMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeMacroHexMultiSpriteItemStateChanged
      option.acmeMultiSprite=Assembler.MultiSprite.MACRO2_HEX;  
    }//GEN-LAST:event_jRadioButtonAcmeMacroHexMultiSpriteItemStateChanged

    private void jRadioButtonAcmeMacroBinMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeMacroBinMonoSpriteItemStateChanged
      option.acmeMonoSprite=Assembler.MonoSprite.MACRO2_BIN;    
    }//GEN-LAST:event_jRadioButtonAcmeMacroBinMonoSpriteItemStateChanged

    private void jRadioButtonAcmeMacroBinMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeMacroBinMultiSpriteItemStateChanged
      option.acmeMultiSprite=Assembler.MultiSprite.MACRO2_BIN;
    }//GEN-LAST:event_jRadioButtonAcmeMacroBinMultiSpriteItemStateChanged

    private void jRadioButtonCa65ByteHexMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65ByteHexMonoSpriteItemStateChanged
      option.ca65MonoSprite=Assembler.MonoSprite.BYTE_HEX;
    }//GEN-LAST:event_jRadioButtonCa65ByteHexMonoSpriteItemStateChanged

    private void jRadioButtonCa65ByteHexMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65ByteHexMultiSpriteItemStateChanged
      option.ca65MultiSprite=Assembler.MultiSprite.BYTE_HEX;
    }//GEN-LAST:event_jRadioButtonCa65ByteHexMultiSpriteItemStateChanged

    private void jRadioButtonCa65ByteBinMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65ByteBinMonoSpriteItemStateChanged
      option.ca65MonoSprite=Assembler.MonoSprite.BYTE_BIN;
    }//GEN-LAST:event_jRadioButtonCa65ByteBinMonoSpriteItemStateChanged

    private void jRadioButtonCa65ByteBinMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65ByteBinMultiSpriteItemStateChanged
      option.ca65MultiSprite=Assembler.MultiSprite.BYTE_BIN;
    }//GEN-LAST:event_jRadioButtonCa65ByteBinMultiSpriteItemStateChanged

    private void jRadioButtonCa65MacroHexMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65MacroHexMonoSpriteItemStateChanged
      option.ca65MonoSprite=Assembler.MonoSprite.MACRO3_HEX;
    }//GEN-LAST:event_jRadioButtonCa65MacroHexMonoSpriteItemStateChanged

    private void jRadioButtonCa65MacroHexMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65MacroHexMultiSpriteItemStateChanged
      option.ca65MultiSprite=Assembler.MultiSprite.MACRO3_HEX;
    }//GEN-LAST:event_jRadioButtonCa65MacroHexMultiSpriteItemStateChanged

    private void jRadioButtonCa65MacroBinMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65MacroBinMonoSpriteItemStateChanged
      option.ca65MonoSprite=Assembler.MonoSprite.MACRO3_BIN;
    }//GEN-LAST:event_jRadioButtonCa65MacroBinMonoSpriteItemStateChanged

    private void jRadioButtonCa65MacroBinMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65MacroBinMultiSpriteItemStateChanged
      option.ca65MultiSprite=Assembler.MultiSprite.MACRO3_HEX;   
    }//GEN-LAST:event_jRadioButtonCa65MacroBinMultiSpriteItemStateChanged

    private void jRadioButtonAcmeMark08ByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeMark08ByteItemStateChanged
      option.acmeByte=Assembler.Byte.ZEROEIGHT_BYTE;
    }//GEN-LAST:event_jRadioButtonAcmeMark08ByteItemStateChanged

    private void jRadioButtonAcmeMarkByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeMarkByteItemStateChanged
      option.acmeByte=Assembler.Byte.MARK_BYTE;
    }//GEN-LAST:event_jRadioButtonAcmeMarkByteItemStateChanged

    private void jRadioButtonAcmeMark8ByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeMark8ByteItemStateChanged
      option.acmeByte=Assembler.Byte.EIGHT_BYTE;
    }//GEN-LAST:event_jRadioButtonAcmeMark8ByteItemStateChanged

    private void jRadioButtonAcmeMarkByByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeMarkByByteItemStateChanged
      option.acmeByte=Assembler.Byte.MARK_BY_BYTE;
    }//GEN-LAST:event_jRadioButtonAcmeMarkByByteItemStateChanged

    private void jRadioButtonAcmeMarkWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeMarkWordItemStateChanged
      option.acmeWord=Assembler.Word.MARK_WORD;
    }//GEN-LAST:event_jRadioButtonAcmeMarkWordItemStateChanged

    private void jRadioButtonAcmeMark16WordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeMark16WordItemStateChanged
      option.acmeWord=Assembler.Word.SIXTEEN_WORD;
    }//GEN-LAST:event_jRadioButtonAcmeMark16WordItemStateChanged

    private void jRadioButtonAcmeLabelNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeLabelNameItemStateChanged
      option.acmeLabel=Assembler.Label.NAME;
    }//GEN-LAST:event_jRadioButtonAcmeLabelNameItemStateChanged

    private void jRadioButtonAcmeLabelNameColonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeLabelNameColonItemStateChanged
      option.acmeLabel=Assembler.Label.NAME_COLON;
    }//GEN-LAST:event_jRadioButtonAcmeLabelNameColonItemStateChanged

    private void jRadioButtonTmpxByteHexMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxByteHexMonoSpriteItemStateChanged
      option.tmpxMonoSprite=Assembler.MonoSprite.BYTE_HEX;
    }//GEN-LAST:event_jRadioButtonTmpxByteHexMonoSpriteItemStateChanged
      
    private void jRadioButtonTmpxByteHexMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxByteHexMultiSpriteItemStateChanged
      option.tmpxMultiSprite=Assembler.MultiSprite.BYTE_HEX;
    }//GEN-LAST:event_jRadioButtonTmpxByteHexMultiSpriteItemStateChanged

    private void jRadioButtonTmpxByteBinMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxByteBinMonoSpriteItemStateChanged
      option.tmpxMonoSprite=Assembler.MonoSprite.BYTE_BIN; 
    }//GEN-LAST:event_jRadioButtonTmpxByteBinMonoSpriteItemStateChanged

    private void jRadioButtonTmpxByteBinMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxByteBinMultiSpriteItemStateChanged
      option.tmpxMultiSprite=Assembler.MultiSprite.BYTE_BIN;   
    }//GEN-LAST:event_jRadioButtonTmpxByteBinMultiSpriteItemStateChanged

    private void jRadioButtonTmpxMacroHexMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxMacroHexMonoSpriteItemStateChanged
      option.tmpxMonoSprite=Assembler.MonoSprite.MACRO4_HEX; 
    }//GEN-LAST:event_jRadioButtonTmpxMacroHexMonoSpriteItemStateChanged

    private void jRadioButtonTmpxMacroHexMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxMacroHexMultiSpriteItemStateChanged
      option.tmpxMultiSprite=Assembler.MultiSprite.MACRO4_HEX; 
    }//GEN-LAST:event_jRadioButtonTmpxMacroHexMultiSpriteItemStateChanged

    private void jRadioButtonTmpxMacroBinMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxMacroBinMonoSpriteItemStateChanged
      option.tmpxMonoSprite=Assembler.MonoSprite.MACRO4_BIN; 
    }//GEN-LAST:event_jRadioButtonTmpxMacroBinMonoSpriteItemStateChanged

    private void jRadioButtonTmpxMacroBinMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxMacroBinMultiSpriteItemStateChanged
      option.tmpxMultiSprite=Assembler.MultiSprite.MACRO4_BIN; 
    }//GEN-LAST:event_jRadioButtonTmpxMacroBinMultiSpriteItemStateChanged

    private void jRadioButtonTass64ByteHexMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64ByteHexMonoSpriteItemStateChanged
      option.tass64MonoSprite=Assembler.MonoSprite.BYTE_HEX;
    }//GEN-LAST:event_jRadioButtonTass64ByteHexMonoSpriteItemStateChanged

    private void jRadioButtonTass64ByteHexMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64ByteHexMultiSpriteItemStateChanged
      option.tass64MultiSprite=Assembler.MultiSprite.BYTE_HEX;  
    }//GEN-LAST:event_jRadioButtonTass64ByteHexMultiSpriteItemStateChanged

    private void jRadioButtonTass64ByteBinMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64ByteBinMonoSpriteItemStateChanged
      option.tass64MonoSprite=Assembler.MonoSprite.BYTE_BIN;
    }//GEN-LAST:event_jRadioButtonTass64ByteBinMonoSpriteItemStateChanged

    private void jRadioButtonTass64ByteBinMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64ByteBinMultiSpriteItemStateChanged
      option.tass64MultiSprite=Assembler.MultiSprite.BYTE_BIN; 
    }//GEN-LAST:event_jRadioButtonTass64ByteBinMultiSpriteItemStateChanged

    private void jRadioButtonTass64MacroHexMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64MacroHexMonoSpriteItemStateChanged
      option.tass64MonoSprite=Assembler.MonoSprite.MACRO4_HEX; 
    }//GEN-LAST:event_jRadioButtonTass64MacroHexMonoSpriteItemStateChanged

    private void jRadioButtonTass64MacroHexMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64MacroHexMultiSpriteItemStateChanged
      option.tass64MultiSprite=Assembler.MultiSprite.MACRO4_HEX;  
    }//GEN-LAST:event_jRadioButtonTass64MacroHexMultiSpriteItemStateChanged

    private void jRadioButtonTass64MacroBinMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64MacroBinMonoSpriteItemStateChanged
      option.tass64MonoSprite=Assembler.MonoSprite.MACRO4_BIN; 
    }//GEN-LAST:event_jRadioButtonTass64MacroBinMonoSpriteItemStateChanged

    private void jRadioButtonTass64MacroBinMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64MacroBinMultiSpriteItemStateChanged
      option.tass64MultiSprite=Assembler.MultiSprite.MACRO4_BIN; 
    }//GEN-LAST:event_jRadioButtonTass64MacroBinMultiSpriteItemStateChanged

    private void jRadioButtonDasmMacroTribyteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmMacroTribyteItemStateChanged
      option.dasmTribyte=Assembler.Tribyte.MACRO_TRIBYTE;
    }//GEN-LAST:event_jRadioButtonDasmMacroTribyteItemStateChanged

    private void jRadioButtonTmpxMacroTribyteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxMacroTribyteItemStateChanged
      option.tmpxTribyte=Assembler.Tribyte.MACRO4_TRIBYTE;
    }//GEN-LAST:event_jRadioButtonTmpxMacroTribyteItemStateChanged

    private void jRadioButtonCa65MacroTribyteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65MacroTribyteItemStateChanged
      option.ca65Tribyte=Assembler.Tribyte.MACRO_TRIBYTE;
    }//GEN-LAST:event_jRadioButtonCa65MacroTribyteItemStateChanged

    private void jRadioButtonAcmeMarkTwentyfourTribyteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeMarkTwentyfourTribyteItemStateChanged
      option.acmeTribyte=Assembler.Tribyte.MARK_TWENTYFOUR_TRIBYTE;
    }//GEN-LAST:event_jRadioButtonAcmeMarkTwentyfourTribyteItemStateChanged

    private void jRadioButtonDotTass64LongTribyteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDotTass64LongTribyteItemStateChanged
      option.tass64Tribyte=Assembler.Tribyte.DOT_LONG_TRIBYTE; 
    }//GEN-LAST:event_jRadioButtonDotTass64LongTribyteItemStateChanged

    private void jRadioButtonTass64DotLintTribyteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotLintTribyteItemStateChanged
      option.tass64Tribyte=Assembler.Tribyte.DOT_LINT_TRIBYTE; 
    }//GEN-LAST:event_jRadioButtonTass64DotLintTribyteItemStateChanged

    private void jRadioButtonDasmDotLongItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmDotLongItemStateChanged
      option.dasmLong=Assembler.Long.DOT_LONG;
    }//GEN-LAST:event_jRadioButtonDasmDotLongItemStateChanged

    private void jRadioButtonDasmLongItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmLongItemStateChanged
      option.dasmLong=Assembler.Long.LONG;  
    }//GEN-LAST:event_jRadioButtonDasmLongItemStateChanged

    private void jRadioButtonDasmDcLLongItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmDcLLongItemStateChanged
      option.dasmLong=Assembler.Long.DOT_DC_L_LONG;  
    }//GEN-LAST:event_jRadioButtonDasmDcLLongItemStateChanged

    private void jRadioButtonAcmeMarkThirtytwoLongItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeMarkThirtytwoLongItemStateChanged
      option.acmeLong=Assembler.Long.MARK_THIRTYTWO_LONG;
    }//GEN-LAST:event_jRadioButtonAcmeMarkThirtytwoLongItemStateChanged

    private void jRadioButtonTass64DotDwordLongItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotDwordLongItemStateChanged
      option.tass64Long=Assembler.Long.DOT_DWORD_LONG; 
    }//GEN-LAST:event_jRadioButtonTass64DotDwordLongItemStateChanged

    private void jRadioButtonTass64DotDlintLongItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotDlintLongItemStateChanged
      option.tass64Long=Assembler.Long.DOT_DLINT_LONG; 
    }//GEN-LAST:event_jRadioButtonTass64DotDlintLongItemStateChanged

    private void jRadioButtonTmpxMacroLongItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxMacroLongItemStateChanged
      option.tmpxLong=Assembler.Long.MACRO4_LONG; 
    }//GEN-LAST:event_jRadioButtonTmpxMacroLongItemStateChanged

    private void jRadioButtonDasmDcDotSWordSwappedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmDcDotSWordSwappedItemStateChanged
      option.dasmWordSwapped=Assembler.WordSwapped.DC_DOT_S_WORD_SWAPPED;
    }//GEN-LAST:event_jRadioButtonDasmDcDotSWordSwappedItemStateChanged

    private void jRadioButtonTmpxMacroWordSwappedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxMacroWordSwappedItemStateChanged
      option.tmpxWordSwapped=Assembler.WordSwapped.MACRO4_WORD_SWAPPED;
    }//GEN-LAST:event_jRadioButtonTmpxMacroWordSwappedItemStateChanged

    private void jButtonBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseActionPerformed
      if (chooserDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION) {
        option.tmpPath=chooserDir.getSelectedFile().getPath();
        jTextFieldTmpPath.setText(option.tmpPath);
      }
    }//GEN-LAST:event_jButtonBrowseActionPerformed

    private void jRadioButtonCa65DotDbytWordSwappedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65DotDbytWordSwappedItemStateChanged
      option.ca65WordSwapped=Assembler.WordSwapped.DOT_DTYB;  
    }//GEN-LAST:event_jRadioButtonCa65DotDbytWordSwappedItemStateChanged

    private void jRadioButtonAcmeMacroWordSwappedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeMacroWordSwappedItemStateChanged
      option.acmeWordSwapped=Assembler.WordSwapped.MACRO2_WORD_SWAPPED;
    }//GEN-LAST:event_jRadioButtonAcmeMacroWordSwappedItemStateChanged

    private void jRadioButtonTass64MacroWordSwappedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64MacroWordSwappedItemStateChanged
      option.tass64WordSwapped=Assembler.WordSwapped.MACRO4_WORD_SWAPPED;
    }//GEN-LAST:event_jRadioButtonTass64MacroWordSwappedItemStateChanged

    private void jRadioButtonDasmDotByteTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmDotByteTextItemStateChanged
      option.dasmText=Assembler.Text.DOT_BYTE_TEXT;
    }//GEN-LAST:event_jRadioButtonDasmDotByteTextItemStateChanged

    private void jRadioButtonDasmByteTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmByteTextItemStateChanged
      option.dasmText=Assembler.Text.BYTE_TEXT;
    }//GEN-LAST:event_jRadioButtonDasmByteTextItemStateChanged

    private void jRadioButtonDasmDcTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmDcTextItemStateChanged
      option.dasmText=Assembler.Text.DC_BYTE_TEXT;
    }//GEN-LAST:event_jRadioButtonDasmDcTextItemStateChanged

    private void jRadioButtonDasmDcDotBTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmDcDotBTextItemStateChanged
      option.dasmText=Assembler.Text.DC_B_BYTE_TEXT;
    }//GEN-LAST:event_jRadioButtonDasmDcDotBTextItemStateChanged

    private void jSpinnerMaxSwappedAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxSwappedAggregateStateChanged
      option.maxSwappedAggregate=(Integer)jSpinnerMaxSwappedAggregate.getValue();     
    }//GEN-LAST:event_jSpinnerMaxSwappedAggregateStateChanged

    private void jSpinnerMaxTextAggregateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMaxTextAggregateStateChanged
      option.maxTextAggregate=(Integer)jSpinnerMaxTextAggregate.getValue();
    }//GEN-LAST:event_jSpinnerMaxTextAggregateStateChanged

    private void jRadioButtonTmpxDotWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxDotWordItemStateChanged
      option.tmpxWord=Assembler.Word.DOT_WORD;  
    }//GEN-LAST:event_jRadioButtonTmpxDotWordItemStateChanged

    private void jRadioButtonTmpxDotTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTmpxDotTextItemStateChanged
      option.tmpxText=Assembler.Text.DOT_TEXT;
    }//GEN-LAST:event_jRadioButtonTmpxDotTextItemStateChanged

    private void jRadioButtonKickDotDwLongItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotDwLongItemStateChanged
       option.kickLong=Assembler.Long.DOT_DW_LONG; 
    }//GEN-LAST:event_jRadioButtonKickDotDwLongItemStateChanged

    private void jRadioButtonKickDotWoWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotWoWordItemStateChanged
        option.kickWord=Assembler.Word.DOT_WO_WORD;
    }//GEN-LAST:event_jRadioButtonKickDotWoWordItemStateChanged

    private void jRadioButtonKickDotByByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotByByteItemStateChanged
        option.kickByte=Assembler.Byte.DOT_BY_BYTE;
    }//GEN-LAST:event_jRadioButtonKickDotByByteItemStateChanged

    private void jRadioButtonKickDotTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotTextItemStateChanged
        option.kickText=Assembler.Text.DOT_TEXT;
    }//GEN-LAST:event_jRadioButtonKickDotTextItemStateChanged

    private void jRadioButtonKickMacroWordSwappedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroWordSwappedItemStateChanged
        option.kickWordSwapped=Assembler.WordSwapped.MACRO1_WORD_SWAPPED;
    }//GEN-LAST:event_jRadioButtonKickMacroWordSwappedItemStateChanged

    private void jRadioButtonKickDwordLongItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDwordLongItemStateChanged
       option.kickLong=Assembler.Long.DOT_DWORD_LONG;
    }//GEN-LAST:event_jRadioButtonKickDwordLongItemStateChanged

    private void jRadioButtonKickMacroTribyteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroTribyteItemStateChanged
        option.kickTribyte=Assembler.Tribyte.MACRO1_TRIBYTE;
    }//GEN-LAST:event_jRadioButtonKickMacroTribyteItemStateChanged

    private void jRadioButtonKickMacroBinMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroBinMultiSpriteItemStateChanged
        option.kickMultiSprite=Assembler.MultiSprite.MACRO1_BIN;
    }//GEN-LAST:event_jRadioButtonKickMacroBinMultiSpriteItemStateChanged

    private void jRadioButtonKickMacroBinMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroBinMonoSpriteItemStateChanged
        option.kickMonoSprite=Assembler.MonoSprite.MACRO1_BIN;
    }//GEN-LAST:event_jRadioButtonKickMacroBinMonoSpriteItemStateChanged

    private void jRadioButtonKickMacroHexMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroHexMultiSpriteItemStateChanged
        option.kickMultiSprite=Assembler.MultiSprite.MACRO1_HEX;
    }//GEN-LAST:event_jRadioButtonKickMacroHexMultiSpriteItemStateChanged

    private void jRadioButtonKickMacroHexMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroHexMonoSpriteItemStateChanged
        option.kickMonoSprite=Assembler.MonoSprite.MACRO1_HEX;
    }//GEN-LAST:event_jRadioButtonKickMacroHexMonoSpriteItemStateChanged

    private void jRadioButtonKickByteBinMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickByteBinMultiSpriteItemStateChanged
        option.kickMultiSprite=Assembler.MultiSprite.BYTE_BIN;
    }//GEN-LAST:event_jRadioButtonKickByteBinMultiSpriteItemStateChanged

    private void jRadioButtonKickByteBinMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickByteBinMonoSpriteItemStateChanged
        option.kickMonoSprite=Assembler.MonoSprite.BYTE_BIN;
    }//GEN-LAST:event_jRadioButtonKickByteBinMonoSpriteItemStateChanged

    private void jRadioButtonKickByteHexMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickByteHexMultiSpriteItemStateChanged
        option.kickMultiSprite=Assembler.MultiSprite.BYTE_HEX;
    }//GEN-LAST:event_jRadioButtonKickByteHexMultiSpriteItemStateChanged

    private void jRadioButtonKickByteHexMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickByteHexMonoSpriteItemStateChanged
        option.kickMonoSprite=Assembler.MonoSprite.BYTE_HEX;
    }//GEN-LAST:event_jRadioButtonKickByteHexMonoSpriteItemStateChanged

    private void jRadioButtonDasmDotIfPBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmDotIfPBlockCommentItemStateChanged
        option.kickBlockComment=Assembler.BlockComment.DOT_IF_P;
    }//GEN-LAST:event_jRadioButtonDasmDotIfPBlockCommentItemStateChanged

    private void jRadioButtonKickCstyleBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickCstyleBlockCommentItemStateChanged
        option.kickBlockComment=Assembler.BlockComment.CSTYLE;
    }//GEN-LAST:event_jRadioButtonKickCstyleBlockCommentItemStateChanged

    private void jRadioButtonKickDoubleBarBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDoubleBarBlockCommentItemStateChanged
        option.kickBlockComment=Assembler.BlockComment.DOUBLE_BAR;
    }//GEN-LAST:event_jRadioButtonKickDoubleBarBlockCommentItemStateChanged

    private void jRadioButtonKickDotPcOriginItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotPcOriginItemStateChanged
        option.kickOrigin=Assembler.Origin.DOT_PC;
    }//GEN-LAST:event_jRadioButtonKickDotPcOriginItemStateChanged

    private void jRadioButtonKickAsterixOriginItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickAsterixOriginItemStateChanged
        option.kickOrigin=Assembler.Origin.ASTERISK;
    }//GEN-LAST:event_jRadioButtonKickAsterixOriginItemStateChanged

    private void jRadioButtonKickDoubleBarCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDoubleBarCommentItemStateChanged
        option.kickComment=Assembler.Comment.DOUBLE_BAR;
    }//GEN-LAST:event_jRadioButtonKickDoubleBarCommentItemStateChanged

    private void jRadioButtonKickDotCpuUndStartingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotCpuUndStartingItemStateChanged
        option.kickStarting=Assembler.Starting.DOT_CPU_UND;
    }//GEN-LAST:event_jRadioButtonKickDotCpuUndStartingItemStateChanged

    private void jRadioButtonKickDotWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotWordItemStateChanged
        option.kickWord=Assembler.Word.DOT_WORD;
    }//GEN-LAST:event_jRadioButtonKickDotWordItemStateChanged

    private void jRadioButtonKickDotByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotByteItemStateChanged
        option.kickByte=Assembler.Byte.DOT_BYTE;
    }//GEN-LAST:event_jRadioButtonKickDotByteItemStateChanged

    private void jRadioButtonKickLabelNameColonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickLabelNameColonItemStateChanged
        option.kickLabel=Assembler.Label.NAME_COLON;
    }//GEN-LAST:event_jRadioButtonKickLabelNameColonItemStateChanged

    private void jRadioButtonTass64DotTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonTass64DotTextItemStateChanged
        option.tass64Text=Assembler.Text.DOT_TEXT;
    }//GEN-LAST:event_jRadioButtonTass64DotTextItemStateChanged

    private void jCheckBoxKickColonMacroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxKickColonMacroActionPerformed
        option.kickColonMacro=jCheckBoxKickColonMacro.isSelected();       
    }//GEN-LAST:event_jCheckBoxKickColonMacroActionPerformed

    private void jRadioButtonCa65DotBytByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65DotBytByteItemStateChanged
        option.ca65Byte=Assembler.Byte.DOT_BYT_BYTE; 
    }//GEN-LAST:event_jRadioButtonCa65DotBytByteItemStateChanged

    private void jRadioButtonCa65DotByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65DotByteItemStateChanged
       option.ca65Byte=Assembler.Byte.DOT_BYTE;
    }//GEN-LAST:event_jRadioButtonCa65DotByteItemStateChanged

    private void jRadioButtonCa65DotWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65DotWordItemStateChanged
       option.ca65Word=Assembler.Word.DOT_WORD;
    }//GEN-LAST:event_jRadioButtonCa65DotWordItemStateChanged

    private void jRadioButtonCa65DotDByteWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65DotDByteWordItemStateChanged
       option.ca65Word=Assembler.Word.DOT_DBYTE;
    }//GEN-LAST:event_jRadioButtonCa65DotDByteWordItemStateChanged

    private void jRadioButtonCa65DotByteTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65DotByteTextItemStateChanged
      option.ca65Text=Assembler.Text.DOT_BYTE_TEXT;  
    }//GEN-LAST:event_jRadioButtonCa65DotByteTextItemStateChanged

    private void jRadioButtonCa65DotBytTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonCa65DotBytTextItemStateChanged
      option.ca65Text=Assembler.Text.DOT_BYT_TEXT;
    }//GEN-LAST:event_jRadioButtonCa65DotBytTextItemStateChanged

    private void jRadioButtonAcmeMarkTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeMarkTextItemStateChanged
      option.acmeText=Assembler.Text.MARK_TEXT;
    }//GEN-LAST:event_jRadioButtonAcmeMarkTextItemStateChanged

    private void jRadioButtonAcmeMarkTxTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeMarkTxTextItemStateChanged
      option.acmeText=Assembler.Text.MARK_TX_TEXT;
    }//GEN-LAST:event_jRadioButtonAcmeMarkTxTextItemStateChanged

    private void jRadioButtonAcmeMarkRawTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonAcmeMarkRawTextItemStateChanged
      option.acmeText=Assembler.Text.MARK_RAW_TEXT;  
    }//GEN-LAST:event_jRadioButtonAcmeMarkRawTextItemStateChanged

    private void jRadioButtonDasmDotByteNumTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmDotByteNumTextItemStateChanged
      option.dasmNumText=Assembler.NumText.DOT_BYTE_NUMTEXT;        
    }//GEN-LAST:event_jRadioButtonDasmDotByteNumTextItemStateChanged

    private void jRadioButtonDasmByteNumTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmByteNumTextItemStateChanged
      option.dasmNumText=Assembler.NumText.BYTE_NUMTEXT;   
    }//GEN-LAST:event_jRadioButtonDasmByteNumTextItemStateChanged

    private void jRadioButtonDasmDcNumTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmDcNumTextItemStateChanged
      option.dasmNumText=Assembler.NumText.DC_NUMTEXT;   
    }//GEN-LAST:event_jRadioButtonDasmDcNumTextItemStateChanged

    private void jRadioButtonDasmDcDotBNumTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmDcDotBNumTextItemStateChanged
      option.dasmNumText=Assembler.NumText.DC_DOT_B_NUMTEXT; 
    }//GEN-LAST:event_jRadioButtonDasmDcDotBNumTextItemStateChanged

    private void jRadioButtonDasmDotByteZeroTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmDotByteZeroTextItemStateChanged
      option.dasmZeroText=Assembler.ZeroText.DOT_BYTE_ZEROTEXT;
    }//GEN-LAST:event_jRadioButtonDasmDotByteZeroTextItemStateChanged

    private void jRadioButtonDasmByteZeroTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmByteZeroTextItemStateChanged
      option.dasmZeroText=Assembler.ZeroText.BYTE_ZEROTEXT;
    }//GEN-LAST:event_jRadioButtonDasmByteZeroTextItemStateChanged

    private void jRadioButtonDasmDcZeroTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmDcZeroTextItemStateChanged
      option.dasmZeroText=Assembler.ZeroText.DC_BYTE_ZEROTEXT;
    }//GEN-LAST:event_jRadioButtonDasmDcZeroTextItemStateChanged

    private void jRadioButtonDasmDcDotBZeroTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmDcDotBZeroTextItemStateChanged
      option.dasmZeroText=Assembler.ZeroText.DC_B_BYTE_ZEROTEXT;
    }//GEN-LAST:event_jRadioButtonDasmDcDotBZeroTextItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JOptionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JOptionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JOptionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JOptionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JOptionDialog dialog = new JOptionDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane TmpxPaneTass64ByteHexMultiSprite;
    private javax.swing.JTextPane TmpxPaneTmpxByteHexMultiSprite;
    private javax.swing.ButtonGroup buttonGroupAcmeBlockComment;
    private javax.swing.ButtonGroup buttonGroupAcmeByte;
    private javax.swing.ButtonGroup buttonGroupAcmeComment;
    private javax.swing.ButtonGroup buttonGroupAcmeLabel;
    private javax.swing.ButtonGroup buttonGroupAcmeLong;
    private javax.swing.ButtonGroup buttonGroupAcmeMonoSprite;
    private javax.swing.ButtonGroup buttonGroupAcmeMultiSprite;
    private javax.swing.ButtonGroup buttonGroupAcmeOrigin;
    private javax.swing.ButtonGroup buttonGroupAcmeStarting;
    private javax.swing.ButtonGroup buttonGroupAcmeTribyte;
    private javax.swing.ButtonGroup buttonGroupAcmeWord;
    private javax.swing.ButtonGroup buttonGroupAcmeWordSwapped;
    private javax.swing.ButtonGroup buttonGroupC65Word;
    private javax.swing.ButtonGroup buttonGroupCa65BlockComment;
    private javax.swing.ButtonGroup buttonGroupCa65Byte;
    private javax.swing.ButtonGroup buttonGroupCa65Comment;
    private javax.swing.ButtonGroup buttonGroupCa65Label;
    private javax.swing.ButtonGroup buttonGroupCa65Long;
    private javax.swing.ButtonGroup buttonGroupCa65MonoSprite;
    private javax.swing.ButtonGroup buttonGroupCa65MultiSprite;
    private javax.swing.ButtonGroup buttonGroupCa65Origin;
    private javax.swing.ButtonGroup buttonGroupCa65Starting;
    private javax.swing.ButtonGroup buttonGroupCa65Text;
    private javax.swing.ButtonGroup buttonGroupCa65Tribyte;
    private javax.swing.ButtonGroup buttonGroupCa65WordSwapped;
    private javax.swing.ButtonGroup buttonGroupCodeData;
    private javax.swing.ButtonGroup buttonGroupDasmBlockComment;
    private javax.swing.ButtonGroup buttonGroupDasmByte;
    private javax.swing.ButtonGroup buttonGroupDasmComment;
    private javax.swing.ButtonGroup buttonGroupDasmLabel;
    private javax.swing.ButtonGroup buttonGroupDasmLong;
    private javax.swing.ButtonGroup buttonGroupDasmMonoSprite;
    private javax.swing.ButtonGroup buttonGroupDasmMultiSprite;
    private javax.swing.ButtonGroup buttonGroupDasmNumText;
    private javax.swing.ButtonGroup buttonGroupDasmOrigin;
    private javax.swing.ButtonGroup buttonGroupDasmStarting;
    private javax.swing.ButtonGroup buttonGroupDasmText;
    private javax.swing.ButtonGroup buttonGroupDasmTribyte;
    private javax.swing.ButtonGroup buttonGroupDasmWord;
    private javax.swing.ButtonGroup buttonGroupDasmWordSwapped;
    private javax.swing.ButtonGroup buttonGroupDasmZeroText;
    private javax.swing.ButtonGroup buttonGroupIllegalOpcodeStyle;
    private javax.swing.ButtonGroup buttonGroupKickBlockComment;
    private javax.swing.ButtonGroup buttonGroupKickByte;
    private javax.swing.ButtonGroup buttonGroupKickComment;
    private javax.swing.ButtonGroup buttonGroupKickLabel;
    private javax.swing.ButtonGroup buttonGroupKickLong;
    private javax.swing.ButtonGroup buttonGroupKickMonoSprite;
    private javax.swing.ButtonGroup buttonGroupKickMultiSprite;
    private javax.swing.ButtonGroup buttonGroupKickOrigin;
    private javax.swing.ButtonGroup buttonGroupKickStarting;
    private javax.swing.ButtonGroup buttonGroupKickText;
    private javax.swing.ButtonGroup buttonGroupKickTribyte;
    private javax.swing.ButtonGroup buttonGroupKickWord;
    private javax.swing.ButtonGroup buttonGroupKickWordSwapped;
    private javax.swing.ButtonGroup buttonGroupLanguage;
    private javax.swing.ButtonGroup buttonGroupLook;
    private javax.swing.ButtonGroup buttonGroupOpcodeFormatting;
    private javax.swing.ButtonGroup buttonGroupTass64BlockComment;
    private javax.swing.ButtonGroup buttonGroupTass64Byte;
    private javax.swing.ButtonGroup buttonGroupTass64Comment;
    private javax.swing.ButtonGroup buttonGroupTass64Label;
    private javax.swing.ButtonGroup buttonGroupTass64MonoSprite;
    private javax.swing.ButtonGroup buttonGroupTass64MultiSprite;
    private javax.swing.ButtonGroup buttonGroupTass64Origin;
    private javax.swing.ButtonGroup buttonGroupTass64Starting;
    private javax.swing.ButtonGroup buttonGroupTass64Text;
    private javax.swing.ButtonGroup buttonGroupTass64Tribyte;
    private javax.swing.ButtonGroup buttonGroupTass64WaordSwapped;
    private javax.swing.ButtonGroup buttonGroupTass64Word;
    private javax.swing.ButtonGroup buttonGroupTass64WordSwapped;
    private javax.swing.ButtonGroup buttonGroupTheme;
    private javax.swing.ButtonGroup buttonGroupTmpxBlockComment;
    private javax.swing.ButtonGroup buttonGroupTmpxByte;
    private javax.swing.ButtonGroup buttonGroupTmpxComment;
    private javax.swing.ButtonGroup buttonGroupTmpxLabel;
    private javax.swing.ButtonGroup buttonGroupTmpxLong;
    private javax.swing.ButtonGroup buttonGroupTmpxMonoSprite;
    private javax.swing.ButtonGroup buttonGroupTmpxMultiSprite;
    private javax.swing.ButtonGroup buttonGroupTmpxOrigin;
    private javax.swing.ButtonGroup buttonGroupTmpxStarting;
    private javax.swing.ButtonGroup buttonGroupTmpxText;
    private javax.swing.ButtonGroup buttonGroupTmpxTribyte;
    private javax.swing.ButtonGroup buttonGroupTmpxWord;
    private javax.swing.ButtonGroup buttonGroupTmpxWordSwapped;
    private javax.swing.JButton jButtonBrowse;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JCheckBox jCheckBoxC128AppProgArea;
    private javax.swing.JCheckBox jCheckBoxC128BasicRom;
    private javax.swing.JCheckBox jCheckBoxC128Cia1;
    private javax.swing.JCheckBox jCheckBoxC128Cia2;
    private javax.swing.JCheckBox jCheckBoxC128Color;
    private javax.swing.JCheckBox jCheckBoxC128DMA;
    private javax.swing.JCheckBox jCheckBoxC128KernalRom;
    private javax.swing.JCheckBox jCheckBoxC128MMU;
    private javax.swing.JCheckBox jCheckBoxC128ScreenArea;
    private javax.swing.JCheckBox jCheckBoxC128ScreenMem;
    private javax.swing.JCheckBox jCheckBoxC128Sid;
    private javax.swing.JCheckBox jCheckBoxC128StackArea;
    private javax.swing.JCheckBox jCheckBoxC128UserBasic;
    private javax.swing.JCheckBox jCheckBoxC128VDC;
    private javax.swing.JCheckBox jCheckBoxC128VicII;
    private javax.swing.JCheckBox jCheckBoxC128VideoColor;
    private javax.swing.JCheckBox jCheckBoxC128ZeroPage;
    private javax.swing.JCheckBox jCheckBoxC128_200Area;
    private javax.swing.JCheckBox jCheckBoxC128_300Area;
    private javax.swing.JCheckBox jCheckBoxC1541Buffer0;
    private javax.swing.JCheckBox jCheckBoxC1541Buffer1;
    private javax.swing.JCheckBox jCheckBoxC1541Buffer2;
    private javax.swing.JCheckBox jCheckBoxC1541Buffer3;
    private javax.swing.JCheckBox jCheckBoxC1541Buffer4;
    private javax.swing.JCheckBox jCheckBoxC1541Kernal;
    private javax.swing.JCheckBox jCheckBoxC1541StackArea;
    private javax.swing.JCheckBox jCheckBoxC1541Via1;
    private javax.swing.JCheckBox jCheckBoxC1541Via2;
    private javax.swing.JCheckBox jCheckBoxC1541ZeroPage;
    private javax.swing.JCheckBox jCheckBoxC1541_200Area;
    private javax.swing.JCheckBox jCheckBoxC64BasicRom;
    private javax.swing.JCheckBox jCheckBoxC64Cia1;
    private javax.swing.JCheckBox jCheckBoxC64Cia2;
    private javax.swing.JCheckBox jCheckBoxC64Color;
    private javax.swing.JCheckBox jCheckBoxC64FreeArea;
    private javax.swing.JCheckBox jCheckBoxC64FreeRam;
    private javax.swing.JCheckBox jCheckBoxC64KernalRom;
    private javax.swing.JCheckBox jCheckBoxC64ScreenArea;
    private javax.swing.JCheckBox jCheckBoxC64StackArea;
    private javax.swing.JCheckBox jCheckBoxC64ZeroPage;
    private javax.swing.JCheckBox jCheckBoxC64_200Area;
    private javax.swing.JCheckBox jCheckBoxC64_300Area;
    private javax.swing.JCheckBox jCheckBoxDasmF3Comp;
    private javax.swing.JCheckBox jCheckBoxEraseDComm;
    private javax.swing.JCheckBox jCheckBoxErasePlus;
    private javax.swing.JCheckBox jCheckBoxKickColonMacro;
    private javax.swing.JCheckBox jCheckBoxLabel;
    private javax.swing.JCheckBox jCheckBoxOpcodeFormattingPreview;
    private javax.swing.JCheckBox jCheckBoxOpcodeFormattingSource;
    private javax.swing.JCheckBox jCheckBoxPlus4Acia;
    private javax.swing.JCheckBox jCheckBoxPlus4BasicExt;
    private javax.swing.JCheckBox jCheckBoxPlus4BasicRamN;
    private javax.swing.JCheckBox jCheckBoxPlus4BasicRamP;
    private javax.swing.JCheckBox jCheckBoxPlus4BasicRom;
    private javax.swing.JCheckBox jCheckBoxPlus4Caracter;
    private javax.swing.JCheckBox jCheckBoxPlus4ColorArea;
    private javax.swing.JCheckBox jCheckBoxPlus4ColorBitmap;
    private javax.swing.JCheckBox jCheckBoxPlus4GraphicData;
    private javax.swing.JCheckBox jCheckBoxPlus4Kernal;
    private javax.swing.JCheckBox jCheckBoxPlus4Luminance;
    private javax.swing.JCheckBox jCheckBoxPlus4StackArea;
    private javax.swing.JCheckBox jCheckBoxPlus4Ted;
    private javax.swing.JCheckBox jCheckBoxPlus4VideoArea;
    private javax.swing.JCheckBox jCheckBoxPlus4ZeroPage;
    private javax.swing.JCheckBox jCheckBoxPlus4_200Area;
    private javax.swing.JCheckBox jCheckBoxPlus4_300Area;
    private javax.swing.JCheckBox jCheckBoxPlus4_400Area;
    private javax.swing.JCheckBox jCheckBoxPlus4_500Area;
    private javax.swing.JCheckBox jCheckBoxPlus4_600Area;
    private javax.swing.JCheckBox jCheckBoxPlus4_6529B_1;
    private javax.swing.JCheckBox jCheckBoxPlus4_6529B_2;
    private javax.swing.JCheckBox jCheckBoxPlus4_700Area;
    private javax.swing.JCheckBox jCheckBoxUndefinedCode;
    private javax.swing.JCheckBox jCheckBoxVic20BasicRom;
    private javax.swing.JCheckBox jCheckBoxVic20Block2;
    private javax.swing.JCheckBox jCheckBoxVic20Block3;
    private javax.swing.JCheckBox jCheckBoxVic20Block4;
    private javax.swing.JCheckBox jCheckBoxVic20Character;
    private javax.swing.JCheckBox jCheckBoxVic20Color;
    private javax.swing.JCheckBox jCheckBoxVic20KernalRom;
    private javax.swing.JCheckBox jCheckBoxVic20Screen;
    private javax.swing.JCheckBox jCheckBoxVic20StackArea;
    private javax.swing.JCheckBox jCheckBoxVic20UserBasic;
    private javax.swing.JCheckBox jCheckBoxVic20Via1;
    private javax.swing.JCheckBox jCheckBoxVic20Via2;
    private javax.swing.JCheckBox jCheckBoxVic20Vic;
    private javax.swing.JCheckBox jCheckBoxVic20ZeroPage;
    private javax.swing.JCheckBox jCheckBoxVic20_200Area;
    private javax.swing.JCheckBox jCheckBoxVic20_300Area;
    private javax.swing.JCheckBox jCheckBoxVic20_400Area;
    private javax.swing.JCheckBox jCheckBoxVic20_8kExp1;
    private javax.swing.JCheckBox jCheckBoxVic20_8kExp2;
    private javax.swing.JCheckBox jCheckBoxVic20_8kExp3;
    private javax.swing.JCheckBox jCheckC64BoxSid;
    private javax.swing.JCheckBox jCheckC64BoxVicII;
    private javax.swing.JComboBox<String> jComboBoxAssembler;
    private javax.swing.JLabel jLabeCa65StartingDeclaration;
    private javax.swing.JLabel jLabelAcmeBlockCommentDeclaration;
    private javax.swing.JLabel jLabelAcmeByteDeclaration;
    private javax.swing.JLabel jLabelAcmeCommentDeclaration1;
    private javax.swing.JLabel jLabelAcmeLabelDeclaration;
    private javax.swing.JLabel jLabelAcmeLongDeclaration;
    private javax.swing.JLabel jLabelAcmeMonoSpriteDeclaration;
    private javax.swing.JLabel jLabelAcmeMultiSpriteDeclaration;
    private javax.swing.JLabel jLabelAcmeStartingDeclaration;
    private javax.swing.JLabel jLabelAcmeTextDeclaration;
    private javax.swing.JLabel jLabelAcmeTribyteDeclaration;
    private javax.swing.JLabel jLabelAcmeWordDeclaration;
    private javax.swing.JLabel jLabelAcmeWordSwappedDeclaration;
    private javax.swing.JLabel jLabelAggregate;
    private javax.swing.JLabel jLabelArrow;
    private javax.swing.JLabel jLabelAutoComment;
    private javax.swing.JLabel jLabelBracket;
    private javax.swing.JLabel jLabelC65ByteDeclaration;
    private javax.swing.JLabel jLabelC65LongDeclaration;
    private javax.swing.JLabel jLabelC65WordDeclaration;
    private javax.swing.JLabel jLabelCa65BlockCommentDeclaration;
    private javax.swing.JLabel jLabelCa65CommentDeclaration;
    private javax.swing.JLabel jLabelCa65LabelDeclaration;
    private javax.swing.JLabel jLabelCa65MonoSpriteDeclaration;
    private javax.swing.JLabel jLabelCa65MultiSpriteDeclaration;
    private javax.swing.JLabel jLabelCa65OriginDeclaration;
    private javax.swing.JLabel jLabelCa65TextDeclaration;
    private javax.swing.JLabel jLabelCa65TribyteDeclaration;
    private javax.swing.JLabel jLabelCa65WordSwappedDeclaration;
    private javax.swing.JLabel jLabelDasmBlockCommentDeclaration;
    private javax.swing.JLabel jLabelDasmByteDeclaration;
    private javax.swing.JLabel jLabelDasmCommentDeclaration;
    private javax.swing.JLabel jLabelDasmLabelDeclaration;
    private javax.swing.JLabel jLabelDasmLongDeclaration;
    private javax.swing.JLabel jLabelDasmMonoSpriteDeclaration;
    private javax.swing.JLabel jLabelDasmMultiSpriteDeclaration;
    private javax.swing.JLabel jLabelDasmNumTextDeclaration;
    private javax.swing.JLabel jLabelDasmOriginDeclaration;
    private javax.swing.JLabel jLabelDasmStarting;
    private javax.swing.JLabel jLabelDasmTextDeclaration;
    private javax.swing.JLabel jLabelDasmTribyteDeclaration;
    private javax.swing.JLabel jLabelDasmWordDeclaration;
    private javax.swing.JLabel jLabelDasmWordSwappedDeclaration;
    private javax.swing.JLabel jLabelDasmZeroTextDeclaration;
    private javax.swing.JLabel jLabelDataSep;
    private javax.swing.JLabel jLabelDataSpace;
    private javax.swing.JLabel jLabelDataTabs;
    private javax.swing.JLabel jLabelFlatLaf;
    private javax.swing.JLabel jLabelIllegalOpcodeStyle;
    private javax.swing.JLabel jLabelInstrSep;
    private javax.swing.JLabel jLabelInstrSpace;
    private javax.swing.JLabel jLabelInstrTabs;
    private javax.swing.JLabel jLabelKickBlockCommentDeclaration;
    private javax.swing.JLabel jLabelKickByteDeclaration;
    private javax.swing.JLabel jLabelKickCommentDeclaration;
    private javax.swing.JLabel jLabelKickLabelDeclaration;
    private javax.swing.JLabel jLabelKickLongDeclaration;
    private javax.swing.JLabel jLabelKickMonoSpriteDeclaration;
    private javax.swing.JLabel jLabelKickMultiSpriteDeclaration;
    private javax.swing.JLabel jLabelKickOriginDeclaration;
    private javax.swing.JLabel jLabelKickStartingDeclaration;
    private javax.swing.JLabel jLabelKickTextDeclaration;
    private javax.swing.JLabel jLabelKickTribyteDeclaration;
    private javax.swing.JLabel jLabelKickWordDeclaration;
    private javax.swing.JLabel jLabelKickWordSwappedDeclaration;
    private javax.swing.JLabel jLabelLanguage;
    private javax.swing.JLabel jLabelLook;
    private javax.swing.JLabel jLabelMaxByte;
    private javax.swing.JLabel jLabelMaxLength;
    private javax.swing.JLabel jLabelMaxLong;
    private javax.swing.JLabel jLabelMaxSwapped;
    private javax.swing.JLabel jLabelMaxText;
    private javax.swing.JLabel jLabelMaxTribyte;
    private javax.swing.JLabel jLabelMaxWord;
    private javax.swing.JLabel jLabelPSIDinitsong;
    private javax.swing.JLabel jLabelPSIDplaysound;
    private javax.swing.JLabel jLabelSIDfreqHi;
    private javax.swing.JLabel jLabelSIDfreqLo;
    private javax.swing.JLabel jLabelScmeOriginDeclaration;
    private javax.swing.JLabel jLabelTass64BlockCommentDeclaration;
    private javax.swing.JLabel jLabelTass64ByteDeclaration;
    private javax.swing.JLabel jLabelTass64CommentDeclaration;
    private javax.swing.JLabel jLabelTass64LabelDeclaration;
    private javax.swing.JLabel jLabelTass64LongDeclaration;
    private javax.swing.JLabel jLabelTass64MonoSpriteDeclaration;
    private javax.swing.JLabel jLabelTass64MultiSpriteDeclaration;
    private javax.swing.JLabel jLabelTass64OriginDeclaration;
    private javax.swing.JLabel jLabelTass64StartingDeclaration;
    private javax.swing.JLabel jLabelTass64TribyteDeclaration;
    private javax.swing.JLabel jLabelTass64WordDeclaration;
    private javax.swing.JLabel jLabelTass65TextDeclaration;
    private javax.swing.JLabel jLabelTass65WordSwappedDeclaration;
    private javax.swing.JLabel jLabelTheme;
    private javax.swing.JLabel jLabelTmpPath;
    private javax.swing.JLabel jLabelTmpxBlockCommentDeclaration;
    private javax.swing.JLabel jLabelTmpxByteDeclaration;
    private javax.swing.JLabel jLabelTmpxCommentDeclaration;
    private javax.swing.JLabel jLabelTmpxLabelDeclaration;
    private javax.swing.JLabel jLabelTmpxLongDeclaration;
    private javax.swing.JLabel jLabelTmpxMonoSpriteDeclaration;
    private javax.swing.JLabel jLabelTmpxMultiSpriteDeclaration;
    private javax.swing.JLabel jLabelTmpxOriginDeclaration;
    private javax.swing.JLabel jLabelTmpxStartingDeclaration;
    private javax.swing.JLabel jLabelTmpxTextDeclaration;
    private javax.swing.JLabel jLabelTmpxTribyteDeclaration;
    private javax.swing.JLabel jLabelTmpxWordDeclaration;
    private javax.swing.JLabel jLabelTmpxWordSwappedDeclaration;
    private javax.swing.JLabel jLabelautocomment;
    private javax.swing.JList<String> jListLaf;
    private javax.swing.JPanel jPanelAcme;
    private javax.swing.JPanel jPanelC128Comm;
    private javax.swing.JPanel jPanelC1541Comm;
    private javax.swing.JPanel jPanelC64Comm;
    private javax.swing.JPanel jPanelCa65;
    private javax.swing.JPanel jPanelComment;
    private javax.swing.JPanel jPanelDasm;
    private javax.swing.JPanel jPanelDisassembler;
    private javax.swing.JPanel jPanelDn;
    private javax.swing.JPanel jPanelKickAssembler;
    private javax.swing.JPanel jPanelLook;
    private javax.swing.JPanel jPanelOption;
    private javax.swing.JPanel jPanelPlus4Comm;
    private javax.swing.JPanel jPanelPreview;
    private javax.swing.JPanel jPanelTMPx;
    private javax.swing.JPanel jPanelTass64;
    private javax.swing.JPanel jPanelVic20Comm;
    private javax.swing.JRadioButton jRadioButtonAcme24BinMonoSprite;
    private javax.swing.JRadioButton jRadioButtonAcme24BinMultiSprite;
    private javax.swing.JRadioButton jRadioButtonAcme24HexMonoSprite;
    private javax.swing.JRadioButton jRadioButtonAcme24HexMultiSprite;
    private javax.swing.JRadioButton jRadioButtonAcmeAsterixOrigin;
    private javax.swing.JRadioButton jRadioButtonAcmeLabelName;
    private javax.swing.JRadioButton jRadioButtonAcmeLabelNameColon;
    private javax.swing.JRadioButton jRadioButtonAcmeMacroBinMonoSprite;
    private javax.swing.JRadioButton jRadioButtonAcmeMacroBinMultiSprite;
    private javax.swing.JRadioButton jRadioButtonAcmeMacroHexMonoSprite;
    private javax.swing.JRadioButton jRadioButtonAcmeMacroHexMultiSprite;
    private javax.swing.JRadioButton jRadioButtonAcmeMacroWordSwapped;
    private javax.swing.JRadioButton jRadioButtonAcmeMark08Byte;
    private javax.swing.JRadioButton jRadioButtonAcmeMark16Word;
    private javax.swing.JRadioButton jRadioButtonAcmeMark8Byte;
    private javax.swing.JRadioButton jRadioButtonAcmeMarkByByte;
    private javax.swing.JRadioButton jRadioButtonAcmeMarkByte;
    private javax.swing.JRadioButton jRadioButtonAcmeMarkCpuStarting;
    private javax.swing.JRadioButton jRadioButtonAcmeMarkIfBlockComment;
    private javax.swing.JRadioButton jRadioButtonAcmeMarkRawText;
    private javax.swing.JRadioButton jRadioButtonAcmeMarkText;
    private javax.swing.JRadioButton jRadioButtonAcmeMarkThirtytwoLong;
    private javax.swing.JRadioButton jRadioButtonAcmeMarkTwentyfourTribyte;
    private javax.swing.JRadioButton jRadioButtonAcmeMarkTxText;
    private javax.swing.JRadioButton jRadioButtonAcmeMarkWord;
    private javax.swing.JRadioButton jRadioButtonAcmeSemicolonBlockComment;
    private javax.swing.JRadioButton jRadioButtonAcmeSemicolonComment;
    private javax.swing.JRadioButton jRadioButtonAqua;
    private javax.swing.JRadioButton jRadioButtonCa65ByteBinMonoSprite;
    private javax.swing.JRadioButton jRadioButtonCa65ByteBinMultiSprite;
    private javax.swing.JRadioButton jRadioButtonCa65ByteHexMonoSprite;
    private javax.swing.JRadioButton jRadioButtonCa65ByteHexMultiSprite;
    private javax.swing.JRadioButton jRadioButtonCa65DotBytByte;
    private javax.swing.JRadioButton jRadioButtonCa65DotBytText;
    private javax.swing.JRadioButton jRadioButtonCa65DotByte;
    private javax.swing.JRadioButton jRadioButtonCa65DotByteText;
    private javax.swing.JRadioButton jRadioButtonCa65DotDByteWord;
    private javax.swing.JRadioButton jRadioButtonCa65DotDbytWordSwapped;
    private javax.swing.JRadioButton jRadioButtonCa65DotLong;
    private javax.swing.JRadioButton jRadioButtonCa65DotOrigin;
    private javax.swing.JRadioButton jRadioButtonCa65DotP02Starting;
    private javax.swing.JRadioButton jRadioButtonCa65DotSetcpuStarting;
    private javax.swing.JRadioButton jRadioButtonCa65DotWord;
    private javax.swing.JRadioButton jRadioButtonCa65LabelNameColon;
    private javax.swing.JRadioButton jRadioButtonCa65MacroBinMonoSprite;
    private javax.swing.JRadioButton jRadioButtonCa65MacroBinMultiSprite;
    private javax.swing.JRadioButton jRadioButtonCa65MacroHexMonoSprite;
    private javax.swing.JRadioButton jRadioButtonCa65MacroHexMultiSprite;
    private javax.swing.JRadioButton jRadioButtonCa65MacroTribyte;
    private javax.swing.JRadioButton jRadioButtonCa65SemicolonBlockComment;
    private javax.swing.JRadioButton jRadioButtonCa65SemicolonComment;
    private javax.swing.JRadioButton jRadioButtonCharcoal;
    private javax.swing.JRadioButton jRadioButtonDasmByte;
    private javax.swing.JRadioButton jRadioButtonDasmByteBinMonoSprite;
    private javax.swing.JRadioButton jRadioButtonDasmByteBinMultiSprite;
    private javax.swing.JRadioButton jRadioButtonDasmByteHexMonoSprite;
    private javax.swing.JRadioButton jRadioButtonDasmByteHexMultiSprite;
    private javax.swing.JRadioButton jRadioButtonDasmByteNumText;
    private javax.swing.JRadioButton jRadioButtonDasmByteText;
    private javax.swing.JRadioButton jRadioButtonDasmByteZeroText;
    private javax.swing.JRadioButton jRadioButtonDasmCstyleBlockComment;
    private javax.swing.JRadioButton jRadioButtonDasmCstyleComment;
    private javax.swing.JRadioButton jRadioButtonDasmDcBByte;
    private javax.swing.JRadioButton jRadioButtonDasmDcByte;
    private javax.swing.JRadioButton jRadioButtonDasmDcDotBNumText;
    private javax.swing.JRadioButton jRadioButtonDasmDcDotBText;
    private javax.swing.JRadioButton jRadioButtonDasmDcDotBZeroText;
    private javax.swing.JRadioButton jRadioButtonDasmDcDotSWordSwapped;
    private javax.swing.JRadioButton jRadioButtonDasmDcLLong;
    private javax.swing.JRadioButton jRadioButtonDasmDcNumText;
    private javax.swing.JRadioButton jRadioButtonDasmDcText;
    private javax.swing.JRadioButton jRadioButtonDasmDcWWord;
    private javax.swing.JRadioButton jRadioButtonDasmDcZeroText;
    private javax.swing.JRadioButton jRadioButtonDasmDotByte;
    private javax.swing.JRadioButton jRadioButtonDasmDotByteNumText;
    private javax.swing.JRadioButton jRadioButtonDasmDotByteText;
    private javax.swing.JRadioButton jRadioButtonDasmDotByteZeroText;
    private javax.swing.JRadioButton jRadioButtonDasmDotIfPBlockComment;
    private javax.swing.JRadioButton jRadioButtonDasmDotLong;
    private javax.swing.JRadioButton jRadioButtonDasmDotOrigin;
    private javax.swing.JRadioButton jRadioButtonDasmDotWord;
    private javax.swing.JRadioButton jRadioButtonDasmIfBlockComment;
    private javax.swing.JRadioButton jRadioButtonDasmLabelName;
    private javax.swing.JRadioButton jRadioButtonDasmLabelNameColon;
    private javax.swing.JRadioButton jRadioButtonDasmLong;
    private javax.swing.JRadioButton jRadioButtonDasmMacroBinMonoSprite;
    private javax.swing.JRadioButton jRadioButtonDasmMacroBinMultiSprite;
    private javax.swing.JRadioButton jRadioButtonDasmMacroHexMonoSprite;
    private javax.swing.JRadioButton jRadioButtonDasmMacroHexMultiSprite;
    private javax.swing.JRadioButton jRadioButtonDasmMacroTribyte;
    private javax.swing.JRadioButton jRadioButtonDasmOrigin;
    private javax.swing.JRadioButton jRadioButtonDasmProcStarting;
    private javax.swing.JRadioButton jRadioButtonDasmSemicolonBlockComment;
    private javax.swing.JRadioButton jRadioButtonDasmSemicolonComment;
    private javax.swing.JRadioButton jRadioButtonDasmWord;
    private javax.swing.JRadioButton jRadioButtonDotTass64LongTribyte;
    private javax.swing.JRadioButton jRadioButtonEmerald;
    private javax.swing.JRadioButton jRadioButtonHighContrast;
    private javax.swing.JRadioButton jRadioButtonKickAsterixOrigin;
    private javax.swing.JRadioButton jRadioButtonKickByteBinMonoSprite;
    private javax.swing.JRadioButton jRadioButtonKickByteBinMultiSprite;
    private javax.swing.JRadioButton jRadioButtonKickByteHexMonoSprite;
    private javax.swing.JRadioButton jRadioButtonKickByteHexMultiSprite;
    private javax.swing.JRadioButton jRadioButtonKickCstyleBlockComment;
    private javax.swing.JRadioButton jRadioButtonKickDotByByte;
    private javax.swing.JRadioButton jRadioButtonKickDotByte;
    private javax.swing.JRadioButton jRadioButtonKickDotCpuUndStarting;
    private javax.swing.JRadioButton jRadioButtonKickDotDwLong;
    private javax.swing.JRadioButton jRadioButtonKickDotPcOrigin;
    private javax.swing.JRadioButton jRadioButtonKickDotText;
    private javax.swing.JRadioButton jRadioButtonKickDotWoWord;
    private javax.swing.JRadioButton jRadioButtonKickDotWord;
    private javax.swing.JRadioButton jRadioButtonKickDoubleBarBlockComment;
    private javax.swing.JRadioButton jRadioButtonKickDoubleBarComment;
    private javax.swing.JRadioButton jRadioButtonKickDwordLong;
    private javax.swing.JRadioButton jRadioButtonKickLabelNameColon;
    private javax.swing.JRadioButton jRadioButtonKickMacroBinMonoSprite;
    private javax.swing.JRadioButton jRadioButtonKickMacroBinMultiSprite;
    private javax.swing.JRadioButton jRadioButtonKickMacroHexMonoSprite;
    private javax.swing.JRadioButton jRadioButtonKickMacroHexMultiSprite;
    private javax.swing.JRadioButton jRadioButtonKickMacroTribyte;
    private javax.swing.JRadioButton jRadioButtonKickMacroWordSwapped;
    private javax.swing.JRadioButton jRadioButtonLangEnglish;
    private javax.swing.JRadioButton jRadioButtonLangItalian;
    private javax.swing.JRadioButton jRadioButtonLookCWin;
    private javax.swing.JRadioButton jRadioButtonLookGtk;
    private javax.swing.JRadioButton jRadioButtonLookJava;
    private javax.swing.JRadioButton jRadioButtonLookMac;
    private javax.swing.JRadioButton jRadioButtonLookMetal;
    private javax.swing.JRadioButton jRadioButtonLookNimbus;
    private javax.swing.JRadioButton jRadioButtonLookSynth;
    private javax.swing.JRadioButton jRadioButtonLookWin;
    private javax.swing.JRadioButton jRadioButtonOcean;
    private javax.swing.JRadioButton jRadioButtonRuby;
    private javax.swing.JRadioButton jRadioButtonSteel;
    private javax.swing.JRadioButton jRadioButtonStyle1;
    private javax.swing.JRadioButton jRadioButtonStyle2;
    private javax.swing.JRadioButton jRadioButtonStyle3;
    private javax.swing.JRadioButton jRadioButtonTass64AsterixOrigin;
    private javax.swing.JRadioButton jRadioButtonTass64ByteBinMonoSprite;
    private javax.swing.JRadioButton jRadioButtonTass64ByteBinMultiSprite;
    private javax.swing.JRadioButton jRadioButtonTass64ByteHexMonoSprite;
    private javax.swing.JRadioButton jRadioButtonTass64ByteHexMultiSprite;
    private javax.swing.JRadioButton jRadioButtonTass64DotByte;
    private javax.swing.JRadioButton jRadioButtonTass64DotCharByte;
    private javax.swing.JRadioButton jRadioButtonTass64DotCommentBlockComment;
    private javax.swing.JRadioButton jRadioButtonTass64DotCpuAStarting;
    private javax.swing.JRadioButton jRadioButtonTass64DotDlintLong;
    private javax.swing.JRadioButton jRadioButtonTass64DotDwordLong;
    private javax.swing.JRadioButton jRadioButtonTass64DotLintTribyte;
    private javax.swing.JRadioButton jRadioButtonTass64DotSintWord;
    private javax.swing.JRadioButton jRadioButtonTass64DotText;
    private javax.swing.JRadioButton jRadioButtonTass64DotWord;
    private javax.swing.JRadioButton jRadioButtonTass64LabelNameColon;
    private javax.swing.JRadioButton jRadioButtonTass64MacroBinMonoSprite;
    private javax.swing.JRadioButton jRadioButtonTass64MacroBinMultiSprite;
    private javax.swing.JRadioButton jRadioButtonTass64MacroHexMonoSprite;
    private javax.swing.JRadioButton jRadioButtonTass64MacroHexMultiSprite;
    private javax.swing.JRadioButton jRadioButtonTass64MacroWordSwapped;
    private javax.swing.JRadioButton jRadioButtonTass64SemicolonBlockComment;
    private javax.swing.JRadioButton jRadioButtonTass64SemicolonComment;
    private javax.swing.JRadioButton jRadioButtonTmpxAsterixOrigin;
    private javax.swing.JRadioButton jRadioButtonTmpxByteBinMonoSprite;
    private javax.swing.JRadioButton jRadioButtonTmpxByteBinMultiSprite;
    private javax.swing.JRadioButton jRadioButtonTmpxByteHexMonoSprite;
    private javax.swing.JRadioButton jRadioButtonTmpxByteHexMultiSprite;
    private javax.swing.JRadioButton jRadioButtonTmpxDotByte;
    private javax.swing.JRadioButton jRadioButtonTmpxDotIfBlockComment;
    private javax.swing.JRadioButton jRadioButtonTmpxDotText;
    private javax.swing.JRadioButton jRadioButtonTmpxDotWord;
    private javax.swing.JRadioButton jRadioButtonTmpxFakeStarting;
    private javax.swing.JRadioButton jRadioButtonTmpxLabelName;
    private javax.swing.JRadioButton jRadioButtonTmpxMacroBinMonoSprite;
    private javax.swing.JRadioButton jRadioButtonTmpxMacroBinMultiSprite;
    private javax.swing.JRadioButton jRadioButtonTmpxMacroHexMonoSprite;
    private javax.swing.JRadioButton jRadioButtonTmpxMacroHexMultiSprite;
    private javax.swing.JRadioButton jRadioButtonTmpxMacroLong;
    private javax.swing.JRadioButton jRadioButtonTmpxMacroTribyte;
    private javax.swing.JRadioButton jRadioButtonTmpxMacroWordSwapped;
    private javax.swing.JRadioButton jRadioButtonTmpxSemicolonBlockComment;
    private javax.swing.JRadioButton jRadioButtonTmpxSemicolonComment;
    private javax.swing.JRadioButton jRadioButtontass64DotIfFiBlockComment;
    private javax.swing.JScrollPane jScrollPaneAcme24BinMonoSprite;
    private javax.swing.JScrollPane jScrollPaneAcme24BinMultiSprite;
    private javax.swing.JScrollPane jScrollPaneAcme24HexMonoSprite;
    private javax.swing.JScrollPane jScrollPaneAcmeByteHexMultiSprite;
    private javax.swing.JScrollPane jScrollPaneAcmeLabelMarkCpuStarting;
    private javax.swing.JScrollPane jScrollPaneAcmeLabelName;
    private javax.swing.JScrollPane jScrollPaneAcmeLabelNameColon;
    private javax.swing.JScrollPane jScrollPaneAcmeMacroBinMonoSprite;
    private javax.swing.JScrollPane jScrollPaneAcmeMacroBinMultiSprite;
    private javax.swing.JScrollPane jScrollPaneAcmeMacroHexMonoSprite;
    private javax.swing.JScrollPane jScrollPaneAcmeMacroHexMultiSprite;
    private javax.swing.JScrollPane jScrollPaneAcmeMacroWordSwapped;
    private javax.swing.JScrollPane jScrollPaneAcmeMark08Byte;
    private javax.swing.JScrollPane jScrollPaneAcmeMark16Word;
    private javax.swing.JScrollPane jScrollPaneAcmeMark8Byte;
    private javax.swing.JScrollPane jScrollPaneAcmeMarkByByte;
    private javax.swing.JScrollPane jScrollPaneAcmeMarkByte;
    private javax.swing.JScrollPane jScrollPaneAcmeMarkIfBlockComment;
    private javax.swing.JScrollPane jScrollPaneAcmeMarkRawText;
    private javax.swing.JScrollPane jScrollPaneAcmeMarkText;
    private javax.swing.JScrollPane jScrollPaneAcmeMarkThirtytwoLong;
    private javax.swing.JScrollPane jScrollPaneAcmeMarkTxText;
    private javax.swing.JScrollPane jScrollPaneAcmeMarkWord;
    private javax.swing.JScrollPane jScrollPaneAcmeSemicolonBlockComment;
    private javax.swing.JScrollPane jScrollPaneAcmeSemicolonComment;
    private javax.swing.JScrollPane jScrollPaneAcmeTwentyfourTribyte;
    private javax.swing.JScrollPane jScrollPaneC65DotByte;
    private javax.swing.JScrollPane jScrollPaneC65DotDByteWord;
    private javax.swing.JScrollPane jScrollPaneCa65ByteBinMonoSprite;
    private javax.swing.JScrollPane jScrollPaneCa65ByteHexMonoSprite;
    private javax.swing.JScrollPane jScrollPaneCa65ByteHexMultiSprite;
    private javax.swing.JScrollPane jScrollPaneCa65Comment;
    private javax.swing.JScrollPane jScrollPaneCa65DotBytByte;
    private javax.swing.JScrollPane jScrollPaneCa65DotBytText;
    private javax.swing.JScrollPane jScrollPaneCa65DotByteText;
    private javax.swing.JScrollPane jScrollPaneCa65DotDWordLong;
    private javax.swing.JScrollPane jScrollPaneCa65DotDbytWordSwapped;
    private javax.swing.JScrollPane jScrollPaneCa65DotOrigin;
    private javax.swing.JScrollPane jScrollPaneCa65DotWord;
    private javax.swing.JScrollPane jScrollPaneCa65LabelName;
    private javax.swing.JScrollPane jScrollPaneCa65MacroBinMonoSprite;
    private javax.swing.JScrollPane jScrollPaneCa65MacroBinMultiSprite;
    private javax.swing.JScrollPane jScrollPaneCa65MacroHexMonoSprite;
    private javax.swing.JScrollPane jScrollPaneCa65MacroHexMultiSprite;
    private javax.swing.JScrollPane jScrollPaneCa65MacroTribyte;
    private javax.swing.JScrollPane jScrollPaneCa65SemicolonComment;
    private javax.swing.JScrollPane jScrollPaneDasmByte;
    private javax.swing.JScrollPane jScrollPaneDasmByteBinMonoSprite;
    private javax.swing.JScrollPane jScrollPaneDasmByteBinMultiSprite;
    private javax.swing.JScrollPane jScrollPaneDasmByteBinMultiSprite1;
    private javax.swing.JScrollPane jScrollPaneDasmByteHexMonoSprite;
    private javax.swing.JScrollPane jScrollPaneDasmByteHexMultiSprite;
    private javax.swing.JScrollPane jScrollPaneDasmByteNumText;
    private javax.swing.JScrollPane jScrollPaneDasmByteText;
    private javax.swing.JScrollPane jScrollPaneDasmByteZeroText;
    private javax.swing.JScrollPane jScrollPaneDasmCstyleComment;
    private javax.swing.JScrollPane jScrollPaneDasmDCBByte;
    private javax.swing.JScrollPane jScrollPaneDasmDcByte;
    private javax.swing.JScrollPane jScrollPaneDasmDcDotBNumText;
    private javax.swing.JScrollPane jScrollPaneDasmDcDotBText;
    private javax.swing.JScrollPane jScrollPaneDasmDcDotBZeroText;
    private javax.swing.JScrollPane jScrollPaneDasmDcDotSWordSwapped;
    private javax.swing.JScrollPane jScrollPaneDasmDcLLong;
    private javax.swing.JScrollPane jScrollPaneDasmDcNumText;
    private javax.swing.JScrollPane jScrollPaneDasmDcWWord;
    private javax.swing.JScrollPane jScrollPaneDasmDcZeroText;
    private javax.swing.JScrollPane jScrollPaneDasmDotByte;
    private javax.swing.JScrollPane jScrollPaneDasmDotByteNumText;
    private javax.swing.JScrollPane jScrollPaneDasmDotByteText;
    private javax.swing.JScrollPane jScrollPaneDasmDotByteZeroText;
    private javax.swing.JScrollPane jScrollPaneDasmDotIfPBlockComment;
    private javax.swing.JScrollPane jScrollPaneDasmDotLong;
    private javax.swing.JScrollPane jScrollPaneDasmDotWord;
    private javax.swing.JScrollPane jScrollPaneDasmLabelAsterixOrigin;
    private javax.swing.JScrollPane jScrollPaneDasmLabelName;
    private javax.swing.JScrollPane jScrollPaneDasmLabelName1;
    private javax.swing.JScrollPane jScrollPaneDasmLabelName15;
    private javax.swing.JScrollPane jScrollPaneDasmLabelName17;
    private javax.swing.JScrollPane jScrollPaneDasmLabelName18;
    private javax.swing.JScrollPane jScrollPaneDasmLabelName3;
    private javax.swing.JScrollPane jScrollPaneDasmLabelName4;
    private javax.swing.JScrollPane jScrollPaneDasmLabelName5;
    private javax.swing.JScrollPane jScrollPaneDasmLabelName8;
    private javax.swing.JScrollPane jScrollPaneDasmLabelName9;
    private javax.swing.JScrollPane jScrollPaneDasmLabelNameColon;
    private javax.swing.JScrollPane jScrollPaneDasmLong;
    private javax.swing.JScrollPane jScrollPaneDasmMacroBinMonoSprite;
    private javax.swing.JScrollPane jScrollPaneDasmMacroBinMultiSprite;
    private javax.swing.JScrollPane jScrollPaneDasmMacroHexMonoSprite;
    private javax.swing.JScrollPane jScrollPaneDasmMacroHexMonoSprite1;
    private javax.swing.JScrollPane jScrollPaneDasmMacroHexMultiSprite;
    private javax.swing.JScrollPane jScrollPaneDasmMacroTribyte;
    private javax.swing.JScrollPane jScrollPaneDasmTass64DotCpuAStarting;
    private javax.swing.JScrollPane jScrollPaneDasmWord;
    private javax.swing.JScrollPane jScrollPaneKickAsterixOrigin;
    private javax.swing.JScrollPane jScrollPaneKickByteBinMonoSprite;
    private javax.swing.JScrollPane jScrollPaneKickByteBinMultiSprite;
    private javax.swing.JScrollPane jScrollPaneKickByteHexMonoSprite;
    private javax.swing.JScrollPane jScrollPaneKickByteHexMultiSprite;
    private javax.swing.JScrollPane jScrollPaneKickCstyleBlockComment;
    private javax.swing.JScrollPane jScrollPaneKickDotByByte;
    private javax.swing.JScrollPane jScrollPaneKickDotByte;
    private javax.swing.JScrollPane jScrollPaneKickDotCpuUndStarting;
    private javax.swing.JScrollPane jScrollPaneKickDotDwLong;
    private javax.swing.JScrollPane jScrollPaneKickDotPcOrigin;
    private javax.swing.JScrollPane jScrollPaneKickDotText;
    private javax.swing.JScrollPane jScrollPaneKickDotWoWord;
    private javax.swing.JScrollPane jScrollPaneKickDotWord;
    private javax.swing.JScrollPane jScrollPaneKickDoubleBarBlockComment;
    private javax.swing.JScrollPane jScrollPaneKickDoubleBarComment;
    private javax.swing.JScrollPane jScrollPaneKickDwordLong;
    private javax.swing.JScrollPane jScrollPaneKickLabelNameColon;
    private javax.swing.JScrollPane jScrollPaneKickMacroBinMonoSprite;
    private javax.swing.JScrollPane jScrollPaneKickMacroHexMonoSprite;
    private javax.swing.JScrollPane jScrollPaneKickMacroHexMultiSprite;
    private javax.swing.JScrollPane jScrollPaneKickMacroTribyte;
    private javax.swing.JScrollPane jScrollPaneKickMacroWordSwapped;
    private javax.swing.JScrollPane jScrollPaneList;
    private javax.swing.JScrollPane jScrollPaneTass64ASterixOrigin;
    private javax.swing.JScrollPane jScrollPaneTass64ByteBinMonoSprite;
    private javax.swing.JScrollPane jScrollPaneTass64ByteBinMultiSprite;
    private javax.swing.JScrollPane jScrollPaneTass64ByteHexMonoSprite;
    private javax.swing.JScrollPane jScrollPaneTass64ByteHexMultiSprite;
    private javax.swing.JScrollPane jScrollPaneTass64DotByte;
    private javax.swing.JScrollPane jScrollPaneTass64DotCharByte;
    private javax.swing.JScrollPane jScrollPaneTass64DotComment;
    private javax.swing.JScrollPane jScrollPaneTass64DotDlintLong;
    private javax.swing.JScrollPane jScrollPaneTass64DotDwordLong;
    private javax.swing.JScrollPane jScrollPaneTass64DotIfFiBlockComment;
    private javax.swing.JScrollPane jScrollPaneTass64DotLintTribyte;
    private javax.swing.JScrollPane jScrollPaneTass64DotLongTribyte;
    private javax.swing.JScrollPane jScrollPaneTass64DotSintWord;
    private javax.swing.JScrollPane jScrollPaneTass64DotText;
    private javax.swing.JScrollPane jScrollPaneTass64DotWord;
    private javax.swing.JScrollPane jScrollPaneTass64LabelName;
    private javax.swing.JScrollPane jScrollPaneTass64MacroBinMonoSprite;
    private javax.swing.JScrollPane jScrollPaneTass64MacroBinMultiSprite;
    private javax.swing.JScrollPane jScrollPaneTass64MacroHexMonoSprite;
    private javax.swing.JScrollPane jScrollPaneTass64MacroHexMultiSprite;
    private javax.swing.JScrollPane jScrollPaneTass64MacroWordSwapped;
    private javax.swing.JScrollPane jScrollPaneTass64SemicolonBlockComment;
    private javax.swing.JScrollPane jScrollPaneTass64SemicolonComment;
    private javax.swing.JScrollPane jScrollPaneTmpxAsterixOrigin;
    private javax.swing.JScrollPane jScrollPaneTmpxByte;
    private javax.swing.JScrollPane jScrollPaneTmpxByteBinMonoSprite;
    private javax.swing.JScrollPane jScrollPaneTmpxByteBinMultiSprite;
    private javax.swing.JScrollPane jScrollPaneTmpxByteHexMonoSprite;
    private javax.swing.JScrollPane jScrollPaneTmpxByteHexMultiSprite;
    private javax.swing.JScrollPane jScrollPaneTmpxDotIfBlockComment;
    private javax.swing.JScrollPane jScrollPaneTmpxDotText;
    private javax.swing.JScrollPane jScrollPaneTmpxDotWord;
    private javax.swing.JScrollPane jScrollPaneTmpxFakeStarting;
    private javax.swing.JScrollPane jScrollPaneTmpxMacroBinMonoSprite;
    private javax.swing.JScrollPane jScrollPaneTmpxMacroBinMultiSprite;
    private javax.swing.JScrollPane jScrollPaneTmpxMacroHexMonoSprite;
    private javax.swing.JScrollPane jScrollPaneTmpxMacroHexMultiSprite;
    private javax.swing.JScrollPane jScrollPaneTmpxMacroLong;
    private javax.swing.JScrollPane jScrollPaneTmpxMacroTribyte;
    private javax.swing.JScrollPane jScrollPaneTmpxMacroWordSwapped;
    private javax.swing.JScrollPane jScrollPaneTmpxSemicolonBlockComment;
    private javax.swing.JScrollPane jScrollPaneTmpxSemicolonComment;
    private javax.swing.JScrollPane jScrollPaneTmpxWord;
    private javax.swing.JScrollPane jScrollPanekickMacroBinMultiSprite;
    private javax.swing.JSpinner jSpinnerDataSpaces;
    private javax.swing.JSpinner jSpinnerDataTabs;
    private javax.swing.JSpinner jSpinnerInstrSpaces;
    private javax.swing.JSpinner jSpinnerInstrTabs;
    private javax.swing.JSpinner jSpinnerMaxByteAggregate;
    private javax.swing.JSpinner jSpinnerMaxLength;
    private javax.swing.JSpinner jSpinnerMaxLongAggregate;
    private javax.swing.JSpinner jSpinnerMaxSwappedAggregate;
    private javax.swing.JSpinner jSpinnerMaxTextAggregate;
    private javax.swing.JSpinner jSpinnerMaxTribyteAggregate;
    private javax.swing.JSpinner jSpinnerMaxWordAggregate;
    private javax.swing.JTabbedPane jTabbedPaneAssembler;
    private javax.swing.JTabbedPane jTabbedPaneComm;
    private javax.swing.JTabbedPane jTabbedPaneOption;
    private javax.swing.JTextField jTextFieldInitSongs;
    private javax.swing.JTextField jTextFieldPlaySound;
    private javax.swing.JTextField jTextFieldSidFreqHi;
    private javax.swing.JTextField jTextFieldSidFreqLo;
    private javax.swing.JTextField jTextFieldTmpPath;
    private javax.swing.JTextPane jTextPaneAcme24BinMonoSprite;
    private javax.swing.JTextPane jTextPaneAcme24BinMultiSprite;
    private javax.swing.JTextPane jTextPaneAcme24HexMonoSprite;
    private javax.swing.JTextPane jTextPaneAcme24HexMultiSprite;
    private javax.swing.JTextPane jTextPaneAcmeAsterixOrigin;
    private javax.swing.JTextPane jTextPaneAcmeLabelName;
    private javax.swing.JTextPane jTextPaneAcmeLabelNameColon;
    private javax.swing.JTextPane jTextPaneAcmeMacroBinMonoSprite;
    private javax.swing.JTextPane jTextPaneAcmeMacroBinMultiSprite;
    private javax.swing.JTextPane jTextPaneAcmeMacroHexMonoSprite;
    private javax.swing.JTextPane jTextPaneAcmeMacroHexMultiSprite;
    private javax.swing.JTextPane jTextPaneAcmeMacroWordSwapped;
    private javax.swing.JTextPane jTextPaneAcmeMark08Byte;
    private javax.swing.JTextPane jTextPaneAcmeMark16Word;
    private javax.swing.JTextPane jTextPaneAcmeMark8Byte;
    private javax.swing.JTextPane jTextPaneAcmeMarkByByte;
    private javax.swing.JTextPane jTextPaneAcmeMarkByte;
    private javax.swing.JTextPane jTextPaneAcmeMarkCpuStarting;
    private javax.swing.JTextPane jTextPaneAcmeMarkIfBlockComment;
    private javax.swing.JTextPane jTextPaneAcmeMarkText;
    private javax.swing.JTextPane jTextPaneAcmeMarkThirtytwoLong;
    private javax.swing.JTextPane jTextPaneAcmeMarkTwentyfourTribyte;
    private javax.swing.JTextPane jTextPaneAcmeMarkTxText;
    private javax.swing.JTextPane jTextPaneAcmeMarkWord;
    private javax.swing.JTextPane jTextPaneAcmeSemicolonBlockComment;
    private javax.swing.JTextPane jTextPaneAcmeSemicolonComment;
    private javax.swing.JTextPane jTextPaneC65DotOrigin;
    private javax.swing.JTextPane jTextPaneC65DotP02Starting;
    private javax.swing.JTextPane jTextPaneC65DotSetcpuStarting;
    private javax.swing.JTextPane jTextPaneC65SemicolonComment;
    private javax.swing.JTextPane jTextPaneCa65ByteBinMonoSprite;
    private javax.swing.JTextPane jTextPaneCa65ByteHexMonoSprite;
    private javax.swing.JTextPane jTextPaneCa65ByteHexMultiSprite;
    private javax.swing.JTextPane jTextPaneCa65Comment;
    private javax.swing.JTextPane jTextPaneCa65DotBytByte;
    private javax.swing.JTextPane jTextPaneCa65DotBytText;
    private javax.swing.JTextPane jTextPaneCa65DotByte;
    private javax.swing.JTextPane jTextPaneCa65DotByteText;
    private javax.swing.JTextPane jTextPaneCa65DotDByteWord;
    private javax.swing.JTextPane jTextPaneCa65DotDbytWordSwapped;
    private javax.swing.JTextPane jTextPaneCa65DotDwordLong;
    private javax.swing.JTextPane jTextPaneCa65DotWord;
    private javax.swing.JTextPane jTextPaneCa65LabelNameColon;
    private javax.swing.JTextPane jTextPaneCa65MacroBinMonoSprite;
    private javax.swing.JTextPane jTextPaneCa65MacroBinMultiSprite;
    private javax.swing.JTextPane jTextPaneCa65MacroHexMonoSprite;
    private javax.swing.JTextPane jTextPaneCa65MacroHexMultiSprite;
    private javax.swing.JTextPane jTextPaneCa65MacroTribyte;
    private javax.swing.JTextPane jTextPaneDasmByte;
    private javax.swing.JTextPane jTextPaneDasmByteBinMonoSprite;
    private javax.swing.JTextPane jTextPaneDasmByteBinMultiSprite;
    private javax.swing.JTextPane jTextPaneDasmByteBinMultiSprite1;
    private javax.swing.JTextPane jTextPaneDasmByteHexMonoSprite;
    private javax.swing.JTextPane jTextPaneDasmByteHexMultiSprite;
    private javax.swing.JTextPane jTextPaneDasmByteNumText;
    private javax.swing.JTextPane jTextPaneDasmByteText;
    private javax.swing.JTextPane jTextPaneDasmByteText2;
    private javax.swing.JTextPane jTextPaneDasmCstyleBlockComment;
    private javax.swing.JTextPane jTextPaneDasmCstyleComment;
    private javax.swing.JTextPane jTextPaneDasmDcBByte;
    private javax.swing.JTextPane jTextPaneDasmDcByte;
    private javax.swing.JTextPane jTextPaneDasmDcDotB2;
    private javax.swing.JTextPane jTextPaneDasmDcDotBNumText;
    private javax.swing.JTextPane jTextPaneDasmDcDotBText;
    private javax.swing.JTextPane jTextPaneDasmDcDotSWordSwapped;
    private javax.swing.JTextPane jTextPaneDasmDcLLong;
    private javax.swing.JTextPane jTextPaneDasmDcNumText;
    private javax.swing.JTextPane jTextPaneDasmDcText;
    private javax.swing.JTextPane jTextPaneDasmDcText1;
    private javax.swing.JTextPane jTextPaneDasmDcWWord;
    private javax.swing.JTextPane jTextPaneDasmDcZeroText;
    private javax.swing.JTextPane jTextPaneDasmDotByte;
    private javax.swing.JTextPane jTextPaneDasmDotByteNumText;
    private javax.swing.JTextPane jTextPaneDasmDotByteText;
    private javax.swing.JTextPane jTextPaneDasmDotByteZeroText;
    private javax.swing.JTextPane jTextPaneDasmDotIfPBlockComment;
    private javax.swing.JTextPane jTextPaneDasmDotLong;
    private javax.swing.JTextPane jTextPaneDasmDotOrigin;
    private javax.swing.JTextPane jTextPaneDasmDotWord;
    private javax.swing.JTextPane jTextPaneDasmIfBlockComment;
    private javax.swing.JTextPane jTextPaneDasmLabelName;
    private javax.swing.JTextPane jTextPaneDasmLabelNameColon;
    private javax.swing.JTextPane jTextPaneDasmLong;
    private javax.swing.JTextPane jTextPaneDasmMacroBinMonoSprite;
    private javax.swing.JTextPane jTextPaneDasmMacroBinMultiSprite;
    private javax.swing.JTextPane jTextPaneDasmMacroHexMonoSprite;
    private javax.swing.JTextPane jTextPaneDasmMacroHexMultiSprite;
    private javax.swing.JTextPane jTextPaneDasmMacroTribyte;
    private javax.swing.JTextPane jTextPaneDasmOrigin;
    private javax.swing.JTextPane jTextPaneDasmProcStarting;
    private javax.swing.JTextPane jTextPaneDasmSemicolonBlockComment;
    private javax.swing.JTextPane jTextPaneDasmSemicolonComment;
    private javax.swing.JTextPane jTextPaneDasmWord;
    private javax.swing.JTextPane jTextPaneKickAsterixOrigin;
    private javax.swing.JTextPane jTextPaneKickByteBinMonoSprite;
    private javax.swing.JTextPane jTextPaneKickByteBinMultiSprite;
    private javax.swing.JTextPane jTextPaneKickByteHexMonoSprite;
    private javax.swing.JTextPane jTextPaneKickByteHexMultiSprite;
    private javax.swing.JTextPane jTextPaneKickCstyleBlockComment;
    private javax.swing.JTextPane jTextPaneKickDotByByte;
    private javax.swing.JTextPane jTextPaneKickDotByte;
    private javax.swing.JTextPane jTextPaneKickDotCpuUndStarting;
    private javax.swing.JTextPane jTextPaneKickDotDwLong;
    private javax.swing.JTextPane jTextPaneKickDotPcOrigin;
    private javax.swing.JTextPane jTextPaneKickDotText;
    private javax.swing.JTextPane jTextPaneKickDotWoWord;
    private javax.swing.JTextPane jTextPaneKickDotWord;
    private javax.swing.JTextPane jTextPaneKickDoubleBarBlockComment;
    private javax.swing.JTextPane jTextPaneKickDoubleBarComment;
    private javax.swing.JTextPane jTextPaneKickDwordLong;
    private javax.swing.JTextPane jTextPaneKickLabelNameColon;
    private javax.swing.JTextPane jTextPaneKickMacroBinMonoSprite;
    private javax.swing.JTextPane jTextPaneKickMacroBinMultiSprite;
    private javax.swing.JTextPane jTextPaneKickMacroHexMonoSprite;
    private javax.swing.JTextPane jTextPaneKickMacroHexMultiSprite;
    private javax.swing.JTextPane jTextPaneKickMacroTribyte;
    private javax.swing.JTextPane jTextPaneKickMacroWordSwapped;
    private javax.swing.JTextPane jTextPaneTass64AsterixOrigin;
    private javax.swing.JTextPane jTextPaneTass64ByteBinMonoSprite;
    private javax.swing.JTextPane jTextPaneTass64ByteBinMultiSprite;
    private javax.swing.JTextPane jTextPaneTass64ByteHexMonoSprite;
    private javax.swing.JTextPane jTextPaneTass64DotByte;
    private javax.swing.JTextPane jTextPaneTass64DotCharByte;
    private javax.swing.JTextPane jTextPaneTass64DotCommentBlockComment;
    private javax.swing.JTextPane jTextPaneTass64DotCpuAStarting;
    private javax.swing.JTextPane jTextPaneTass64DotDlintLong;
    private javax.swing.JTextPane jTextPaneTass64DotDwordLong;
    private javax.swing.JTextPane jTextPaneTass64DotLintTribyte;
    private javax.swing.JTextPane jTextPaneTass64DotLongTribyte;
    private javax.swing.JTextPane jTextPaneTass64DotSintWord;
    private javax.swing.JTextPane jTextPaneTass64DotText;
    private javax.swing.JTextPane jTextPaneTass64DotWord;
    private javax.swing.JTextPane jTextPaneTass64LabelNameColon;
    private javax.swing.JTextPane jTextPaneTass64MacroBinMonoSprite;
    private javax.swing.JTextPane jTextPaneTass64MacroBinMultiSprite;
    private javax.swing.JTextPane jTextPaneTass64MacroHexMonoSprite;
    private javax.swing.JTextPane jTextPaneTass64MacroHexMultiSprite;
    private javax.swing.JTextPane jTextPaneTass64MacroWordSwapped;
    private javax.swing.JTextPane jTextPaneTass64SemicolonBlockComment;
    private javax.swing.JTextPane jTextPaneTass64SemicolonComment;
    private javax.swing.JTextPane jTextPaneTass664DotIfFiBlockComment1;
    private javax.swing.JTextPane jTextPaneTmpxAsterixOrigin;
    private javax.swing.JTextPane jTextPaneTmpxByteBinMonoSprite;
    private javax.swing.JTextPane jTextPaneTmpxByteBinMultiSprite;
    private javax.swing.JTextPane jTextPaneTmpxByteHexMonoSprite;
    private javax.swing.JTextPane jTextPaneTmpxDotByte;
    private javax.swing.JTextPane jTextPaneTmpxDotIfBlockComment;
    private javax.swing.JTextPane jTextPaneTmpxDotText;
    private javax.swing.JTextPane jTextPaneTmpxDotWord;
    private javax.swing.JTextPane jTextPaneTmpxFakeStarting;
    private javax.swing.JTextPane jTextPaneTmpxLabelName;
    private javax.swing.JTextPane jTextPaneTmpxMacroBinMonoSprite;
    private javax.swing.JTextPane jTextPaneTmpxMacroBinMultiSprite;
    private javax.swing.JTextPane jTextPaneTmpxMacroHexMonoSprite;
    private javax.swing.JTextPane jTextPaneTmpxMacroHexMultiSprite;
    private javax.swing.JTextPane jTextPaneTmpxMacroLong;
    private javax.swing.JTextPane jTextPaneTmpxMacroTribyte;
    private javax.swing.JTextPane jTextPaneTmpxMacroWordSwapped;
    private javax.swing.JTextPane jTextPaneTmpxSemicolonBlockComment;
    private javax.swing.JTextPane jTextPaneTmpxSemicolonComment;
    // End of variables declaration//GEN-END:variables

    /**
     * Use the passed option container 
     * 
     * @param option the option to use
     */
    public void useOption(Option option) {
      this.option=option;
      applyOption();
    }

    /**
     * Apply option to graphical container
     */
    private void applyOption() {
      jRadioButtonLangEnglish.setSelected(option.commentLanguage==C64Dasm.LANG_ENGLISH);
      jRadioButtonLangItalian.setSelected(option.commentLanguage==C64Dasm.LANG_ITALIAN);
      jRadioButtonStyle1.setSelected((option.illegalOpcodeMode==M6510Dasm.MODE1));
      jRadioButtonStyle2.setSelected((option.illegalOpcodeMode==M6510Dasm.MODE2));
      jRadioButtonStyle3.setSelected((option.illegalOpcodeMode==M6510Dasm.MODE3));
      jCheckBoxOpcodeFormattingPreview.setSelected(option.opcodeUpperCasePreview);      
      jCheckBoxOpcodeFormattingSource.setSelected(option.opcodeUpperCaseSource);      
      jCheckBoxUndefinedCode.setSelected(option.useAsCode);
      jCheckBoxEraseDComm.setSelected(option.eraseDComm);
      jCheckBoxErasePlus.setSelected(option.erasePlus);
      jTextFieldInitSongs.setText(option.psidInitSongsLabel);
      jTextFieldPlaySound.setText(option.psidPlaySoundsLabel);
      jTextFieldSidFreqLo.setText(option.sidFreqLoLabel);
      jTextFieldSidFreqHi.setText(option.sidFreqHiLabel);
      jSpinnerMaxLength.setValue(option.maxLabelLength);
      jSpinnerMaxByteAggregate.setValue(option.maxByteAggregate);
      jSpinnerMaxTribyteAggregate.setValue(option.maxTribyteAggregate);
      jSpinnerMaxWordAggregate.setValue(option.maxWordAggregate);
      jSpinnerMaxLongAggregate.setValue(option.maxLongAggregate);
      jSpinnerMaxSwappedAggregate.setValue(option.maxSwappedAggregate);
      jSpinnerMaxTextAggregate.setValue(option.maxTextAggregate);
      jSpinnerInstrSpaces.setValue(option.numInstrSpaces);
      jSpinnerInstrTabs.setValue(option.numInstrTabs);
      jSpinnerDataSpaces.setValue(option.numDataSpaces);
      jSpinnerDataTabs.setValue(option.numDataTabs);
      jCheckBoxLabel.setSelected(option.labelOnSepLine);
      jTextFieldTmpPath.setText(option.tmpPath);
      
      actualLEF=option.getLafName();
      actualTheme=option.getMethalTheme();
      actualLaf=option.getFlatLaf();
      
      // select the right element
      String name;        
      for (int i=0; i<listModel.size(); i++) {        
        name=(String)listModel.elementAt(i);
        if (name.equals(actualLaf)) jListLaf.setSelectedIndex(i);
      }  
      
      goFlat=true;
      
      // show the look and feel radio selected
      String lafName=option.getLafName();
      if (lafName.equals(Option.LAF_GTK)) jRadioButtonLookGtk.setSelected(true);
      if (lafName.equals(Option.LAF_MAC)) jRadioButtonLookMac.setSelected(true);
      if (lafName.equals(Option.LAF_METAL)) jRadioButtonLookMetal.setSelected(true);
      if (lafName.equals(Option.LAF_MOTIF)) jRadioButtonLookJava.setSelected(true);    
      if (lafName.equals(Option.LAF_WINDOWS)) jRadioButtonLookWin.setSelected(true);
      if (lafName.equals(Option.LAF_CWINDOWS)) jRadioButtonLookCWin.setSelected(true);
      if (lafName.equals(Option.LAF_NIMBUS)) jRadioButtonLookNimbus.setSelected(true);
      if (lafName.equals(Option.LAF_SYNTH)) {
        jRadioButtonLookSynth.setSelected(true);
        jListLaf.setEnabled(true);        
      }
      
      selectedTheme();
      
      //assembler
      jComboBoxAssembler.setSelectedItem(null);
      jComboBoxAssembler.setSelectedItem(option.assembler.getName());      

      
      applyOptionDasm();
      applyOptionTmpx();
      applyOptionC65();
      applyOptionAcme();
      applyOptionKickAssembler();
      applyOptionTass64Assembler();
      
      applyCommentsC64();
      applyCommentsC1541();
      applyCommentsPlus4();
      applyCommentsVic20();      
      applyCommentsC128();  
    }
    
  /**
   * Disable the themes buttons
   */
  private void disableTheme() {
    jRadioButtonOcean.setEnabled(false);
    jRadioButtonSteel.setEnabled(false);
    jRadioButtonAqua.setEnabled(false);
    jRadioButtonCharcoal.setEnabled(false);
    jRadioButtonHighContrast.setEnabled(false);
    jRadioButtonEmerald.setEnabled(false);
    jRadioButtonRuby.setEnabled(false);
  }
  
  /**
   * Enable the themes buttons
   */
  private void enableTheme() {
    jRadioButtonOcean.setEnabled(true);
    jRadioButtonSteel.setEnabled(true);
    jRadioButtonAqua.setEnabled(true);
    jRadioButtonCharcoal.setEnabled(true);
    jRadioButtonHighContrast.setEnabled(true);
    jRadioButtonEmerald.setEnabled(true);
    jRadioButtonRuby.setEnabled(true);   
  }  
  
  /**
   * Select the theme in radio button
   */
  public void selectedTheme() {
    switch (option.getTheme()) {
      case Option.THEME_OCEAN:
        jRadioButtonOcean.setSelected(true); 
        break;
      case Option.THEME_STEEL:
        jRadioButtonSteel.setSelected(true);    
        break;
      case Option.THEME_AQUA:
        jRadioButtonAqua.setSelected(true);   
        break;
      case Option.THEME_CHARCOAL:
        jRadioButtonCharcoal.setSelected(true);   
        break;    
      case Option.THEME_CONTRAST:
        jRadioButtonHighContrast.setSelected(true);   
        break;       
      case Option.THEME_EMERALD:
        jRadioButtonEmerald.setSelected(true);   
        break;      
      case Option.THEME_RUBY:
        jRadioButtonRuby.setSelected(true);   
        break;         
    }      
  }

 /**
  * Apply the option for DASM
  */
  private void applyOptionDasm() {
    //DASM
    jCheckBoxDasmF3Comp.setSelected(option.dasmF3Comp);
    
    switch (option.dasmStarting) {
      case PROC:
        jRadioButtonDasmProcStarting.setSelected(true);   
        break;
    }
      
    switch (option.dasmLabel) {
      case NAME:
        jRadioButtonDasmLabelName.setSelected(true);
        break;
      case NAME_COLON:
        jRadioButtonDasmLabelNameColon.setSelected(true);  
        break;  
    }
      
    switch (option.dasmComment) {
      case SEMICOLON:
        jRadioButtonDasmSemicolonComment.setSelected(true);
        break;
      case CSTYLE:
        jRadioButtonDasmCstyleComment.setSelected(true);  
        break;  
    }
      
    switch (option.dasmBlockComment) {
      case SEMICOLON:
        jRadioButtonDasmSemicolonBlockComment.setSelected(true);
        break;
      case CSTYLE:
        jRadioButtonDasmCstyleBlockComment.setSelected(true);  
        break;  
      case IF:
        jRadioButtonDasmIfBlockComment.setSelected(true);  
        break;           
    }     
      
    switch (option.dasmOrigin) {
      case DOT_ORG:
        jRadioButtonDasmDotOrigin.setSelected(true);
        break;
      case ORG:
        jRadioButtonDasmOrigin.setSelected(true);  
        break;
    }
      
    switch (option.dasmByte) {
      case DOT_BYTE:  
        jRadioButtonDasmDotByte.setSelected(true);
        break;
      case BYTE:
        jRadioButtonDasmByte.setSelected(true);  
        break;
      case DC_BYTE:
        jRadioButtonDasmDcByte.setSelected(true);   
        break; 
      case DC_B_BYTE:
        jRadioButtonDasmDcBByte.setSelected(true);  
        break;  
    }
      
    switch (option.dasmWord) {
      case DOT_WORD:  
        jRadioButtonDasmDotWord.setSelected(true);
        break;  
      case WORD:  
        jRadioButtonDasmWord.setSelected(true);
        break;
      case DC_W_WORD:  
        jRadioButtonDasmDcWWord.setSelected(true);
        break;          
    }  
    
    switch (option.dasmWordSwapped) { 
      case DC_DOT_S_WORD_SWAPPED:
        jRadioButtonDasmDcDotSWordSwapped.setSelected(true);  
        break;    
    }
    
    switch (option.dasmTribyte) {
      case MACRO_TRIBYTE:  
        jRadioButtonDasmMacroTribyte.setSelected(true);
        break;  
    }
    
    switch (option.dasmLong) {
      case DOT_LONG:  
        jRadioButtonDasmDotLong.setSelected(true);
        break;  
      case LONG:  
        jRadioButtonDasmLong.setSelected(true);
        break;  
      case DOT_DC_L_LONG:  
        jRadioButtonDasmDcLLong.setSelected(true);
        break;   
    }
     
    switch (option.dasmMonoSprite) {
      case BYTE_HEX:
        jRadioButtonDasmByteHexMonoSprite.setSelected(true);
        break;
      case BYTE_BIN:
        jRadioButtonDasmByteBinMonoSprite.setSelected(true);
        break;
      case MACRO_HEX:
        jRadioButtonDasmMacroHexMonoSprite.setSelected(true);
        break;  
      case MACRO_BIN:
        jRadioButtonDasmMacroBinMonoSprite.setSelected(true);
        break;  
    }
    
    switch (option.dasmMultiSprite) {
      case BYTE_HEX:
        jRadioButtonDasmByteHexMultiSprite.setSelected(true);
        break;
      case BYTE_BIN:
        jRadioButtonDasmByteBinMultiSprite.setSelected(true);
        break;
      case MACRO_HEX:
        jRadioButtonDasmMacroHexMultiSprite.setSelected(true);
        break;  
      case MACRO_BIN:
        jRadioButtonDasmMacroBinMultiSprite.setSelected(true);
        break;  
    }    
    
    switch (option.dasmText) {
      case DOT_BYTE_TEXT:
        jRadioButtonDasmDotByteText.setSelected(true);
        break;
      case BYTE_TEXT:
        jRadioButtonDasmByteText.setSelected(true);
        break;
      case DC_BYTE_TEXT:
        jRadioButtonDasmDcText.setSelected(true);
        break;  
      case DC_B_BYTE_TEXT:
        jRadioButtonDasmDcDotBText.setSelected(true);
        break;  
    }
    
    switch (option.dasmNumText) {
      case DOT_BYTE_NUMTEXT:
        jRadioButtonDasmDotByteNumText.setSelected(true);
        break;
      case BYTE_NUMTEXT:
        jRadioButtonDasmByteNumText.setSelected(true);
        break;
      case DC_NUMTEXT:
        jRadioButtonDasmDcNumText.setSelected(true);
        break;  
      case DC_DOT_B_NUMTEXT:
        jRadioButtonDasmDcDotBNumText.setSelected(true);
        break;  
    }
    
    switch (option.dasmZeroText) {
      case DOT_BYTE_ZEROTEXT:
        jRadioButtonDasmDotByteText.setSelected(true);
        break;
      case BYTE_ZEROTEXT:
        jRadioButtonDasmByteText.setSelected(true);
        break;
      case DC_BYTE_ZEROTEXT:
        jRadioButtonDasmDcText.setSelected(true);
        break;  
      case DC_B_BYTE_ZEROTEXT:
        jRadioButtonDasmDcDotBText.setSelected(true);
        break;  
    }
  }

  /**
   * Apply the option for TMPx
   */
  private void applyOptionTmpx() {
    switch (option.tmpxStarting) {
      case FAKE:
        jRadioButtonTmpxFakeStarting.setSelected(true);   
        break;
    }
      
    switch (option.tmpxOrigin) {                     
      case ASTERISK:
        jRadioButtonDasmDotOrigin.setSelected(true);
        break;                 
    }
      
    switch (option.tmpxComment) {
      case SEMICOLON:
        jRadioButtonTmpxSemicolonComment.setSelected(true);
        break;
    }      
      
    switch (option.tmpxBlockComment) {
      case SEMICOLON:
        jRadioButtonTmpxSemicolonBlockComment.setSelected(true);
        break;
      case DOT_IF:
        jRadioButtonTmpxDotIfBlockComment.setSelected(true);  
        break;           
    }   
      
    switch (option.tmpxLabel) {
      case NAME:
        jRadioButtonTmpxLabelName.setSelected(true);
        break;
    }
            
    switch (option.tmpxByte) {
      case DOT_BYTE:  
        jRadioButtonTmpxDotByte.setSelected(true);
        break; 
    }
    
    switch (option.tmpxWord) {
      case DOT_WORD:  
        jRadioButtonTmpxDotWord.setSelected(true);
        break;           
    }     
    
    switch (option.tmpxWordSwapped) { 
      case MACRO4_WORD_SWAPPED:
        jRadioButtonTmpxMacroWordSwapped.setSelected(true);  
        break;    
    }
    
    switch (option.tmpxTribyte) {
      case MACRO4_TRIBYTE:  
        jRadioButtonTmpxMacroTribyte.setSelected(true);
        break;  
    }
    
    switch (option.tmpxLong) {
      case MACRO4_LONG:  
        jRadioButtonTmpxMacroLong.setSelected(true);
        break;  
    }
    
    switch (option.tmpxMonoSprite) {
      case BYTE_HEX:
        jRadioButtonTmpxByteHexMonoSprite.setSelected(true);
        break;
      case BYTE_BIN:
        jRadioButtonTmpxByteBinMonoSprite.setSelected(true);
        break;
      case MACRO_HEX:
        jRadioButtonTmpxMacroHexMonoSprite.setSelected(true);
        break;  
      case MACRO_BIN:
        jRadioButtonTmpxMacroBinMonoSprite.setSelected(true);
        break;  
    }
    
    switch (option.tmpxMultiSprite) {
      case BYTE_HEX:
        jRadioButtonTmpxByteHexMultiSprite.setSelected(true);
        break;
      case BYTE_BIN:
        jRadioButtonTmpxByteBinMultiSprite.setSelected(true);
        break;
      case MACRO4_HEX:
        jRadioButtonTmpxMacroHexMultiSprite.setSelected(true);
        break;  
      case MACRO4_BIN:
        jRadioButtonTmpxMacroBinMultiSprite.setSelected(true);
        break;  
    }  
    
    switch (option.tmpxText) {
      case DOT_TEXT:  
        jRadioButtonTmpxDotText.setSelected(true);
        break;           
    }  
  }

  /**
   * Apply the option for CA65
   */
  private void applyOptionC65() {
    switch (option.ca65Starting) {
      case DOT_SETCPU:
        jRadioButtonCa65DotSetcpuStarting.setSelected(true);   
        break;
      case DOT_P02:
        jRadioButtonCa65DotP02Starting.setSelected(true);   
        break;  
    }  
      
    switch (option.ca65Origin) {                     
      case DOT_ORG:
        jRadioButtonCa65DotOrigin.setSelected(true);
        break;                 
    }
      
    switch (option.ca65Comment) {
      case SEMICOLON:
        jRadioButtonCa65SemicolonComment.setSelected(true);
        break;
    }      
      
    switch (option.ca65BlockComment) {
      case SEMICOLON:
        jRadioButtonCa65SemicolonBlockComment.setSelected(true);
        break;          
    }   
      
    switch (option.ca65Label) {
      case NAME_COLON:
        jRadioButtonCa65LabelNameColon.setSelected(true);
        break;
    }
            
    switch (option.ca65Byte) {
      case DOT_BYTE:  
        jRadioButtonCa65DotByte.setSelected(true);
        break; 
      case DOT_BYT_BYTE:  
        jRadioButtonCa65DotBytByte.setSelected(true);  
        break;
    }
    
    switch (option.ca65Word) {
      case DOT_WORD:  
        jRadioButtonCa65DotWord.setSelected(true);
        break;       
      case DOT_DBYTE:
        jRadioButtonCa65DotDByteWord.setSelected(true);  
        break;  
    }    
    
    switch (option.ca65WordSwapped) { 
      case DOT_DTYB:
        jRadioButtonCa65DotDbytWordSwapped.setSelected(true);  
        break;    
    }
    
    switch (option.ca65Tribyte) {
      case MACRO3_TRIBYTE:  
        jRadioButtonCa65MacroTribyte.setSelected(true);
        break;  
    }
    
    switch (option.ca65Long) {
      case DOT_LONG:  
        jRadioButtonCa65DotLong.setSelected(true);
        break;  
    }
    
    switch (option.ca65MonoSprite) {
      case BYTE_HEX:
        jRadioButtonCa65ByteHexMonoSprite.setSelected(true);
        break;
      case BYTE_BIN:
        jRadioButtonCa65ByteBinMonoSprite.setSelected(true);
        break;
      case MACRO_HEX:
        jRadioButtonCa65MacroHexMonoSprite.setSelected(true);
        break;  
      case MACRO_BIN:
        jRadioButtonCa65MacroBinMonoSprite.setSelected(true);
        break;  
    }
    
    switch (option.ca65MultiSprite) {
      case BYTE_HEX:
        jRadioButtonCa65ByteHexMultiSprite.setSelected(true);
        break;
      case BYTE_BIN:
        jRadioButtonCa65ByteBinMultiSprite.setSelected(true);
        break;
      case MACRO3_HEX:
        jRadioButtonCa65MacroHexMultiSprite.setSelected(true);
        break;  
      case MACRO3_BIN:
        jRadioButtonCa65MacroBinMultiSprite.setSelected(true);
        break;  
    }
    
     switch (option.ca65Text) {
      case DOT_BYTE_TEXT:
        jRadioButtonCa65DotByteText.setSelected(true);
        break;
      case DOT_BYT_TEXT:
        jRadioButtonCa65DotBytText.setSelected(true);
        break;  
    }
  }
  
  /**
   * Apply the option for ACME
   */  
  private void applyOptionAcme() {
    switch (option.acmeStarting) {
      case MARK_CPU:
        jRadioButtonAcmeMarkCpuStarting.setSelected(true);   
        break;
    }
      
    switch (option.acmeOrigin) {                     
      case ASTERISK:
        jRadioButtonAcmeAsterixOrigin.setSelected(true);
        break;                 
    }
    
    switch (option.acmeComment) {
      case SEMICOLON:
        jRadioButtonAcmeSemicolonComment.setSelected(true);
        break;
    }      
      
    switch (option.acmeBlockComment) {
      case SEMICOLON:
        jRadioButtonAcmeSemicolonBlockComment.setSelected(true);
        break;
      case MARK_IF:
        jRadioButtonAcmeMarkIfBlockComment.setSelected(true);  
        break;           
    }
    
    switch (option.acmeLabel) {
      case NAME:
        jRadioButtonAcmeLabelName.setSelected(true);
        break;
      case NAME_COLON:
        jRadioButtonAcmeLabelNameColon.setSelected(true);  
        break;  
    } 
    
    switch (option.acmeByte) {
      case MARK_BYTE:  
        jRadioButtonAcmeMarkByte.setSelected(true);
        break; 
      case EIGHT_BYTE:  
        jRadioButtonAcmeMark8Byte.setSelected(true);  
        break;
      case MARK_BY_BYTE:  
        jRadioButtonAcmeMarkByByte.setSelected(true);
        break; 
      case ZEROEIGHT_BYTE:  
        jRadioButtonAcmeMark08Byte.setSelected(true);  
        break;   
    }
    
    switch (option.acmeWord) {
      case MARK_WORD:  
        jRadioButtonAcmeMarkWord.setSelected(true);
        break;       
      case SIXTEEN_WORD:
        jRadioButtonAcmeMark16Word.setSelected(true);  
        break;  
    }    
    
    switch (option.acmeWordSwapped) { 
      case MACRO2_WORD_SWAPPED:
        jRadioButtonAcmeMacroWordSwapped.setSelected(true);  
        break;    
    }    
    
    switch (option.acmeTribyte) {
      case MARK_TWENTYFOUR_TRIBYTE:  
        jRadioButtonAcmeMarkTwentyfourTribyte.setSelected(true);
        break;  
    }
    
    switch (option.acmeLong) {
      case MARK_THIRTYTWO_LONG:  
        jRadioButtonAcmeMarkThirtytwoLong.setSelected(true);
        break;  
    }

    switch (option.acmeMonoSprite) {
      case BYTE_HEX:
        jRadioButtonAcme24HexMonoSprite.setSelected(true);
        break;
      case BYTE_BIN:
        jRadioButtonAcme24BinMonoSprite.setSelected(true);
        break;
      case MACRO1_HEX:
        jRadioButtonAcmeMacroHexMonoSprite.setSelected(true);
        break;  
      case MACRO1_BIN:
        jRadioButtonAcmeMacroBinMonoSprite.setSelected(true);
        break;  
    }
    
    switch (option.acmeMultiSprite) {
      case BYTE_HEX:
        jRadioButtonAcme24HexMultiSprite.setSelected(true);
        break;
      case BYTE_BIN:
        jRadioButtonAcme24BinMultiSprite.setSelected(true);
        break;
      case MACRO1_HEX:
        jRadioButtonAcmeMacroHexMultiSprite.setSelected(true);
        break;  
      case MACRO1_BIN:
        jRadioButtonAcmeMacroBinMultiSprite.setSelected(true);
        break;  
    } 
    
    switch (option.acmeText) {
      case MARK_TEXT:
        jRadioButtonAcmeMarkText.setSelected(true);
        break;
      case MARK_TX_TEXT:
        jRadioButtonAcmeMarkTxText.setSelected(true);
        break;  
      case MARK_RAW_TEXT:
        jRadioButtonAcmeMarkRawText.setSelected(true);
        break;       
    }
  }
  
  /**
   * Apply the option for KickAssembler
   */
  private void applyOptionKickAssembler() {
    jCheckBoxKickColonMacro.setSelected(option.kickColonMacro);
      
    switch (option.kickStarting) {
      case DOT_CPU_UND:
        jRadioButtonKickDotCpuUndStarting.setSelected(true);   
        break;
    }
    
    switch (option.kickOrigin) {                     
      case DOT_ORG:
        jRadioButtonKickAsterixOrigin.setSelected(true);
        break;  
      case DOT_PC:
        jRadioButtonKickDotPcOrigin.setSelected(true);  
        break;
    }
    
    switch (option.kickLabel) {
      case NAME_COLON:
        jRadioButtonKickLabelNameColon.setSelected(true);
        break;
    }
    
    switch (option.kickComment) {
      case DOUBLE_BAR:  
        jRadioButtonKickDoubleBarComment.setSelected(true);
        break; 
    }  
    
    switch (option.kickBlockComment) {
      case DOUBLE_BAR:
        jRadioButtonKickDoubleBarBlockComment.setSelected(true);
        break;
      case CSTYLE:
        jRadioButtonKickCstyleBlockComment.setSelected(true);  
        break;  
      case DOT_IF_P:
        jRadioButtonDasmDotIfPBlockComment.setSelected(true);  
        break;           
    }   
           
    switch (option.kickByte) {
      case DOT_BYTE:  
        jRadioButtonKickDotByte.setSelected(true);
        break; 
      case DOT_BY_BYTE:
        jRadioButtonKickDotByByte.setSelected(true);  
        break;  
    }
    
    switch (option.kickWord) {
      case DOT_WORD:  
        jRadioButtonKickDotWord.setSelected(true);
        break;  
       case DOT_WO_WORD:  
        jRadioButtonKickDotWoWord.setSelected(true);
        break;                
    }  
    
    switch (option.kickWordSwapped) { 
      case MACRO1_WORD_SWAPPED:
        jRadioButtonKickMacroWordSwapped.setSelected(true);  
        break;    
    }     
    
    switch (option.kickTribyte) {
      case MACRO1_TRIBYTE:  
        jRadioButtonKickMacroTribyte.setSelected(true);
        break;  
    }
    
    switch (option.kickLong) {
      case DOT_DWORD_LONG:  
        jRadioButtonKickDwordLong.setSelected(true);
        break;  
      case DOT_DW_LONG:  
        jRadioButtonKickDotDwLong.setSelected(true);
        break;    
    }
    
    switch (option.kickMonoSprite) {
      case BYTE_HEX:
        jRadioButtonKickByteHexMonoSprite.setSelected(true);
        break;
      case BYTE_BIN:
        jRadioButtonKickByteBinMonoSprite.setSelected(true);
        break;
      case MACRO1_HEX:
        jRadioButtonKickMacroHexMonoSprite.setSelected(true);
        break;  
      case MACRO1_BIN:
        jRadioButtonKickMacroBinMonoSprite.setSelected(true);
        break;  
    }
    
    switch (option.kickMultiSprite) {
      case BYTE_HEX:
        jRadioButtonKickByteHexMultiSprite.setSelected(true);
        break;
      case BYTE_BIN:
        jRadioButtonKickByteBinMultiSprite.setSelected(true);
        break;
      case MACRO1_HEX:
        jRadioButtonKickMacroHexMultiSprite.setSelected(true);
        break;  
      case MACRO1_BIN:
        jRadioButtonKickMacroBinMultiSprite.setSelected(true);
        break;  
    }     
    
    switch (option.kickText) {
      case DOT_TEXT:  
        jRadioButtonKickDotText.setSelected(true);
        break;           
    }     
  }
  
  /**
   * Apply the option for KickAssembler
   */
  private void applyOptionTass64Assembler() {
    switch (option.tass64Starting) {
      case DOT_CPU_A:
         jRadioButtonTass64DotCpuAStarting.setSelected(true);
            break;
     }
    
    switch (option.tass64Origin) {                     
      case ASTERISK:
        jRadioButtonTass64AsterixOrigin.setSelected(true);
        break;                 
    }
    
    switch (option.tass64Comment) {
      case SEMICOLON:
        jRadioButtonTass64SemicolonComment.setSelected(true);
        break;
    }     
    
    switch (option.tass64BlockComment) {
      case SEMICOLON:
        jRadioButtonTass64SemicolonBlockComment.setSelected(true);
        break;
      case DOT_IF_FI:
        jRadioButtontass64DotIfFiBlockComment.setSelected(true);  
        break;  
      case DOT_IF_P:
        jRadioButtonTass64DotCommentBlockComment.setSelected(true);  
        break;           
    }    
    
    switch (option.tass64Label) {
      case NAME_COLON:
        jRadioButtonTass64LabelNameColon.setSelected(true);
        break;
    }
    
     switch (option.tass64Byte) {
      case DOT_BYTE:  
        jRadioButtonTass64DotByte.setSelected(true);
        break; 
      case DOT_CHAR:  
        jRadioButtonTass64DotCharByte.setSelected(true);  
        break;
    }
    
    switch (option.tass64Word) {
      case DOT_WORD:  
        jRadioButtonTass64DotWord.setSelected(true);
        break;       
      case DOT_SINT:
        jRadioButtonTass64DotSintWord.setSelected(true);  
        break;  
    }        
    
    switch (option.tass64WordSwapped) { 
      case MACRO4_WORD_SWAPPED:
        jRadioButtonTass64MacroWordSwapped.setSelected(true);  
        break;    
    }  
    
    switch (option.tass64Tribyte) {
      case DOT_LONG_TRIBYTE:  
        jRadioButtonDotTass64LongTribyte.setSelected(true);
        break;  
      case DOT_LINT_TRIBYTE:  
        jRadioButtonTass64DotLintTribyte.setSelected(true);
        break;   
    }    
    
    switch (option.tass64Long) {
      case DOT_DWORD_LONG:  
        jRadioButtonTass64DotDwordLong.setSelected(true);
        break;  
      case  DOT_DLINT_LONG:  
        jRadioButtonTass64DotDlintLong.setSelected(true);
        break;   
    }
    
    switch (option.tass64MonoSprite) {
      case BYTE_HEX:
        jRadioButtonTass64ByteHexMonoSprite.setSelected(true);
        break;
      case BYTE_BIN:
        jRadioButtonTass64ByteBinMonoSprite.setSelected(true);
        break;
      case MACRO_HEX:
        jRadioButtonTass64MacroHexMonoSprite.setSelected(true);
        break;  
      case MACRO_BIN:
        jRadioButtonTass64MacroBinMonoSprite.setSelected(true);
        break;  
    }
    
    switch (option.tass64MultiSprite) {
      case BYTE_HEX:
        jRadioButtonTass64ByteHexMultiSprite.setSelected(true);
        break;
      case BYTE_BIN:
        jRadioButtonTass64ByteBinMultiSprite.setSelected(true);
        break;
      case MACRO4_HEX:
        jRadioButtonTass64MacroHexMultiSprite.setSelected(true);
        break;  
      case MACRO4_BIN:
        jRadioButtonTass64MacroBinMultiSprite.setSelected(true);
        break;  
    }  
    
    switch (option.tass64Text) {
      case DOT_TEXT:
        jRadioButtonTass64DotText.setSelected(true);
        break;
    }
  }   

  /**
   * Apply comments for C64
   */
  private void applyCommentsC64() {
    jCheckBoxC64ZeroPage.setSelected(option.commentC64ZeroPage);
    jCheckBoxC64StackArea.setSelected(option.commentC64StackArea);
    jCheckBoxC64_200Area.setSelected(option.commentC64_200Area);
    jCheckBoxC64_300Area.setSelected(option.commentC64_300Area);
    jCheckBoxC64FreeArea.setSelected(option.commentC64BasicFreeArea);
    jCheckBoxC64BasicRom.setSelected(option.commentC64BasicRom);
    jCheckBoxC64FreeRam.setSelected(option.commentC64FreeRam);
    jCheckC64BoxVicII.setSelected(option.commentC64VicII);
    jCheckC64BoxSid.setSelected(option.commentC64Sid);
    jCheckBoxC64Color.setSelected(option.commentC64ColorArea);
    jCheckBoxC64Cia1.setSelected(option.commentC64Cia1);
    jCheckBoxC64Cia2.setSelected(option.commentC64Cia2);
    jCheckBoxC64KernalRom.setSelected(option.commentC64ScreenArea);
    jCheckBoxC64ScreenArea.setSelected(option.commentC64ScreenArea);
  }


  /**
   * Apply comments for C1541
   */  
  private void applyCommentsC1541() {
    jCheckBoxC1541ZeroPage.setSelected(option.commentC1541ZeroPage);
    jCheckBoxC1541StackArea.setSelected(option.commentC1541StackArea);
    jCheckBoxC1541_200Area.setSelected(option.commentC1541_200Area);
    jCheckBoxC1541Via1.setSelected(option.commentC1541Via1);
    jCheckBoxC1541Via2.setSelected(option.commentC1541Via2);
    jCheckBoxC1541Kernal.setSelected(option.commentC1541Kernal);
    jCheckBoxC1541Buffer0.setSelected(option.commentC1541Buffer0);
    jCheckBoxC1541Buffer1.setSelected(option.commentC1541Buffer1);
    jCheckBoxC1541Buffer2.setSelected(option.commentC1541Buffer2);
    jCheckBoxC1541Buffer3.setSelected(option.commentC1541Buffer3);
    jCheckBoxC1541Buffer4.setSelected(option.commentC1541Buffer4);
  }

  /**
   * Apply comments Plus4
   */
  private void applyCommentsPlus4() {
    jCheckBoxPlus4Acia.setSelected(option.commentPlus4Acia);
    jCheckBoxPlus4BasicExt.setSelected(option.commentPlus4BasicExt);
    jCheckBoxPlus4BasicRamN.setSelected(option.commentPlus4BasicRamN);
    jCheckBoxPlus4BasicRamP.setSelected(option.commentPlus4BasicRamP);
    jCheckBoxPlus4BasicRom.setSelected(option.commentPlus4BasicRom);
    jCheckBoxPlus4Caracter.setSelected(option.commentPlus4Caracter);
    jCheckBoxPlus4ColorArea.setSelected(option.commentPlus4ColorArea);
    jCheckBoxPlus4ColorBitmap.setSelected(option.commentPlus4ColorBitmap);
    jCheckBoxPlus4GraphicData.setSelected(option.commentPlus4GraphicData);
    jCheckBoxPlus4Kernal.setSelected(option.commentPlus4Kernal);
    jCheckBoxPlus4Luminance.setSelected(option.commentPlus4Luminance);
    jCheckBoxPlus4StackArea.setSelected(option.commentPlus4StackArea);
    jCheckBoxPlus4Ted.setSelected(option.commentPlus4Ted);
    jCheckBoxPlus4VideoArea.setSelected(option.commentPlus4VideoArea);
    jCheckBoxPlus4ZeroPage.setSelected(option.commentPlus4ZeroPage);
    jCheckBoxPlus4_200Area.setSelected(option.commentPlus4_200Area);
    jCheckBoxPlus4_300Area.setSelected(option.commentPlus4_300Area);
    jCheckBoxPlus4_400Area.setSelected(option.commentPlus4_400Area);
    jCheckBoxPlus4_500Area.setSelected(option.commentPlus4_500Area);
    jCheckBoxPlus4_600Area.setSelected(option.commentPlus4_600Area);
    jCheckBoxPlus4_6529B_1.setSelected(option.commentPlus4_6529B_1);
    jCheckBoxPlus4_6529B_2.setSelected(option.commentPlus4_6529B_2);
    jCheckBoxPlus4_700Area.setSelected(option.commentPlus4_700Area); 
  }

  /**
   * Apply comemnts for Vic20
   */
  private void applyCommentsVic20() {
    jCheckBoxVic20BasicRom.setSelected(option.commentVic20BasicRom);
    jCheckBoxVic20Block2.setSelected(option.commentVic20Block2);
    jCheckBoxVic20Block3.setSelected(option.commentVic20Block3);
    jCheckBoxVic20Block4.setSelected(option.commentVic20Block4);
    jCheckBoxVic20Character.setSelected(option.commentVic20Character);
    jCheckBoxVic20Color.setSelected(option.commentVic20Color);
    jCheckBoxVic20KernalRom.setSelected(option.commentVic20KernalRom);
    jCheckBoxVic20Screen.setSelected(option.commentVic20Screen);
    jCheckBoxVic20StackArea.setSelected(option.commentVic20StackArea);
    jCheckBoxVic20UserBasic.setSelected(option.commentVic20UserBasic);
    jCheckBoxVic20Via1.setSelected(option.commentVic20Via1);
    jCheckBoxVic20Via2.setSelected(option.commentVic20Via2);
    jCheckBoxVic20Vic.setSelected(option.commentVic20Vic);
    jCheckBoxVic20ZeroPage.setSelected(option.commentVic20ZeroPage);
    jCheckBoxVic20_200Area.setSelected(option.commentVic20_200Area);
    jCheckBoxVic20_300Area.setSelected(option.commentVic20_300Area);
    jCheckBoxVic20_400Area.setSelected(option.commentVic20_400Area);
    jCheckBoxVic20_8kExp1.setSelected(option.commentVic20_8kExp1);
    jCheckBoxVic20_8kExp2.setSelected(option.commentVic20_8kExp2);
    jCheckBoxVic20_8kExp3.setSelected(option.commentVic20_8kExp3);
  }

  /**
   * Apply comments for C128
   */
  private void applyCommentsC128() {
    jCheckBoxC128ZeroPage.setSelected(option.commentC128ZeroPage);
    jCheckBoxC128StackArea.setSelected(option.commentC128StackArea);
    jCheckBoxC128_200Area.setSelected(option.commentC128_200Area);
    jCheckBoxC128_300Area.setSelected(option.commentC128_300Area);
    jCheckBoxC128ScreenArea.setSelected(option.commentC128ScreenArea);    
    jCheckBoxC128AppProgArea.setSelected(option.commentC128AppProgArea);   
    jCheckBoxC128BasicRom.setSelected(option.commentC128BasicRom);  
    jCheckBoxC128Cia1.setSelected(option.commentC128Cia1);  
    jCheckBoxC128Cia2.setSelected(option.commentC128Cia2);  
    jCheckBoxC128Color.setSelected(option.commentC128Color);  
    jCheckBoxC128DMA.setSelected(option.commentC128DMA);  
    jCheckBoxC128KernalRom.setSelected(option.commentC128KernalRom);  
    jCheckBoxC128MMU.setSelected(option.commentC128MMU);   
    jCheckBoxC128ScreenMem.setSelected(option.commentC128ScreenMem);  
    jCheckBoxC128UserBasic.setSelected(option.commentC128UserBasic);  
    jCheckBoxC128VDC.setSelected(option.commentC128VDC);   
    jCheckBoxC128VideoColor.setSelected(option.commentC128VideoColor);  
    jCheckBoxC128VicII.setSelected(option.commentC128VicII);
    jCheckBoxC128Sid.setSelected(option.commentC128Sid);
  }    
}
