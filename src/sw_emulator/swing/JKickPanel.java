/**
 * @(#)JKickPanel 2022/05/03
 *
 * ICE Team free software group
 *
 * This file is part of C64 Java Software Emulator.
 * See README for copyright notice.
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 *  02111-1307  USA.
 */
package sw_emulator.swing;

import sw_emulator.software.Assembler;
import sw_emulator.swing.main.Option;

/**
 * A panel for Kick Assembler assembler option 
 * 
 * @author ice
 */
public class JKickPanel extends javax.swing.JPanel {
    /** Option file to use */
    Option option;
    
    /**
     * Creates new form JKickPanel
     */
    public JKickPanel() {
        initComponents();
    }
    
        
    /**
     * Set up the panel with the option 
     * 
     * @param option the option to use
     */
    public void setUp(Option option) {
      this.option=option;
    }  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupKickTribyte = new javax.swing.ButtonGroup();
        buttonGroupKickComment = new javax.swing.ButtonGroup();
        buttonGroupKickOrigin = new javax.swing.ButtonGroup();
        buttonGroupKickLabel = new javax.swing.ButtonGroup();
        buttonGroupKickLong = new javax.swing.ButtonGroup();
        buttonGroupKickStarting = new javax.swing.ButtonGroup();
        buttonGroupKickWordSwapped = new javax.swing.ButtonGroup();
        buttonGroupKickMultiSprite = new javax.swing.ButtonGroup();
        buttonGroupKickByte = new javax.swing.ButtonGroup();
        buttonGroupKickText = new javax.swing.ButtonGroup();
        buttonGroupKickBlockComment = new javax.swing.ButtonGroup();
        buttonGroupKickWord = new javax.swing.ButtonGroup();
        buttonGroupKickMonoSprite = new javax.swing.ButtonGroup();
        buttonGroupKickNumText = new javax.swing.ButtonGroup();
        buttonGroupKickZeroText = new javax.swing.ButtonGroup();
        buttonGroupKickAddress = new javax.swing.ButtonGroup();
        buttonGroupKickStackWord = new javax.swing.ButtonGroup();
        buttonGroupKickShiftText = new javax.swing.ButtonGroup();
        buttonGroupKickScreenText = new javax.swing.ButtonGroup();
        buttonGroupKickPetasciiText = new javax.swing.ButtonGroup();
        buttonGroupKickHighText = new javax.swing.ButtonGroup();
        jLabelKickLabelDeclaration = new javax.swing.JLabel();
        jRadioButtonKickLabelNameColon = new javax.swing.JRadioButton();
        jScrollPaneKickLabelNameColon = new javax.swing.JScrollPane();
        jTextPaneKickLabelNameColon = new javax.swing.JTextPane();
        jLabelKickByteDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotByte = new javax.swing.JRadioButton();
        jScrollPaneKickDotByte = new javax.swing.JScrollPane();
        jTextPaneKickDotByte = new javax.swing.JTextPane();
        jLabelKickWordDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotWord = new javax.swing.JRadioButton();
        jScrollPaneKickDotWord = new javax.swing.JScrollPane();
        jTextPaneKickDotWord = new javax.swing.JTextPane();
        jLabelKickStartingDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotCpuUndStarting = new javax.swing.JRadioButton();
        jScrollPaneKickDotCpuUndStarting = new javax.swing.JScrollPane();
        jTextPaneKickDotCpuUndStarting = new javax.swing.JTextPane();
        jLabelKickCommentDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDoubleBarComment = new javax.swing.JRadioButton();
        jScrollPaneKickDoubleBarComment = new javax.swing.JScrollPane();
        jTextPaneKickDoubleBarComment = new javax.swing.JTextPane();
        jLabelKickOriginDeclaration = new javax.swing.JLabel();
        jRadioButtonKickAsterixOrigin = new javax.swing.JRadioButton();
        jScrollPaneKickAsterixOrigin = new javax.swing.JScrollPane();
        jTextPaneKickAsterixOrigin = new javax.swing.JTextPane();
        jRadioButtonKickDotPcOrigin = new javax.swing.JRadioButton();
        jScrollPaneKickDotPcOrigin = new javax.swing.JScrollPane();
        jTextPaneKickDotPcOrigin = new javax.swing.JTextPane();
        jLabelKickBlockCommentDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDoubleBarBlockComment = new javax.swing.JRadioButton();
        jScrollPaneKickDoubleBarBlockComment = new javax.swing.JScrollPane();
        jTextPaneKickDoubleBarBlockComment = new javax.swing.JTextPane();
        jRadioButtonKickCstyleBlockComment = new javax.swing.JRadioButton();
        jScrollPaneKickCstyleBlockComment = new javax.swing.JScrollPane();
        jTextPaneKickCstyleBlockComment = new javax.swing.JTextPane();
        jRadioButtonDasmSharpIfPBlockComment = new javax.swing.JRadioButton();
        jScrollPaneDasmSharpIfPBlockComment = new javax.swing.JScrollPane();
        jTextPaneDasmSharpIfPBlockComment = new javax.swing.JTextPane();
        jLabelKickMultiSpriteDeclaration = new javax.swing.JLabel();
        jLabelKickMonoSpriteDeclaration = new javax.swing.JLabel();
        jRadioButtonKickByteHexMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonKickByteHexMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneKickByteHexMultiSprite = new javax.swing.JScrollPane();
        jTextPaneKickByteHexMultiSprite = new javax.swing.JTextPane();
        jScrollPaneKickByteHexMonoSprite = new javax.swing.JScrollPane();
        jTextPaneKickByteHexMonoSprite = new javax.swing.JTextPane();
        jRadioButtonKickByteBinMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonKickByteBinMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneKickByteBinMultiSprite = new javax.swing.JScrollPane();
        jTextPaneKickByteBinMultiSprite = new javax.swing.JTextPane();
        jScrollPaneKickByteBinMonoSprite = new javax.swing.JScrollPane();
        jTextPaneKickByteBinMonoSprite = new javax.swing.JTextPane();
        jRadioButtonKickMacroHexMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonKickMacroHexMultiSprite = new javax.swing.JRadioButton();
        jScrollPaneKickMacroHexMultiSprite = new javax.swing.JScrollPane();
        jTextPaneKickMacroHexMultiSprite = new javax.swing.JTextPane();
        jScrollPaneKickMacroHexMonoSprite = new javax.swing.JScrollPane();
        jTextPaneKickMacroHexMonoSprite = new javax.swing.JTextPane();
        jRadioButtonKickMacroBinMonoSprite = new javax.swing.JRadioButton();
        jRadioButtonKickMacroBinMultiSprite = new javax.swing.JRadioButton();
        jScrollPanekickMacroBinMultiSprite = new javax.swing.JScrollPane();
        jTextPaneKickMacroBinMultiSprite = new javax.swing.JTextPane();
        jScrollPaneKickMacroBinMonoSprite = new javax.swing.JScrollPane();
        jTextPaneKickMacroBinMonoSprite = new javax.swing.JTextPane();
        jLabelKickTribyteDeclaration = new javax.swing.JLabel();
        jRadioButtonKickMacroTribyte = new javax.swing.JRadioButton();
        jScrollPaneKickMacroTribyte = new javax.swing.JScrollPane();
        jTextPaneKickMacroTribyte = new javax.swing.JTextPane();
        jLabelKickLongDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDwordLong = new javax.swing.JRadioButton();
        jScrollPaneKickDwordLong = new javax.swing.JScrollPane();
        jTextPaneKickDwordLong = new javax.swing.JTextPane();
        jLabelKickWordSwappedDeclaration = new javax.swing.JLabel();
        jRadioButtonKickMacroWordSwapped = new javax.swing.JRadioButton();
        jScrollPaneKickMacroWordSwapped = new javax.swing.JScrollPane();
        jTextPaneKickMacroWordSwapped = new javax.swing.JTextPane();
        jLabelKickTextDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotText = new javax.swing.JRadioButton();
        jScrollPaneKickDotText = new javax.swing.JScrollPane();
        jTextPaneKickDotText = new javax.swing.JTextPane();
        jRadioButtonKickDotByByte = new javax.swing.JRadioButton();
        jScrollPaneKickDotByByte = new javax.swing.JScrollPane();
        jTextPaneKickDotByByte = new javax.swing.JTextPane();
        jRadioButtonKickDotWoWord = new javax.swing.JRadioButton();
        jScrollPaneKickDotWoWord = new javax.swing.JScrollPane();
        jTextPaneKickDotWoWord = new javax.swing.JTextPane();
        jRadioButtonKickDotDwLong = new javax.swing.JRadioButton();
        jScrollPaneKickDotDwLong = new javax.swing.JScrollPane();
        jTextPaneKickDotDwLong = new javax.swing.JTextPane();
        jCheckBoxKickColonMacro = new javax.swing.JCheckBox();
        jLabelKickNumTextDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotTextNumText = new javax.swing.JRadioButton();
        jScrollPaneKickDotTextNumText = new javax.swing.JScrollPane();
        jTextPaneKickDotTextNumText = new javax.swing.JTextPane();
        jLabelKickZeroTextDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotTextZeroText = new javax.swing.JRadioButton();
        jScrollPaneKickDotTextZeroText = new javax.swing.JScrollPane();
        jTextPaneKickDotTextZeroText = new javax.swing.JTextPane();
        jLabelKickAddressDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotWordAddress = new javax.swing.JRadioButton();
        jScrollPaneKickDotWordAddress = new javax.swing.JScrollPane();
        jTextPaneKickDotWordAddress = new javax.swing.JTextPane();
        jRadioButtonKickDotWoWordAddress = new javax.swing.JRadioButton();
        jScrollPaneKickDotWoWordAddress = new javax.swing.JScrollPane();
        jTextPaneKickDotWoWordAddress = new javax.swing.JTextPane();
        jLabelKickStackWordDeclaration = new javax.swing.JLabel();
        jRadioButtonKickMacroStackWord = new javax.swing.JRadioButton();
        jScrollPaneKickMacroStackWord = new javax.swing.JScrollPane();
        jTextPaneKickMacroStackWord = new javax.swing.JTextPane();
        jLabelKickHighTextDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotTextHighText = new javax.swing.JRadioButton();
        jScrollPaneKickDotTextHighText = new javax.swing.JScrollPane();
        jTextPaneKickDotTextHighText = new javax.swing.JTextPane();
        jLabelKickShiftTextDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotTextShiftText = new javax.swing.JRadioButton();
        jScrollPaneKickDotTextShiftText = new javax.swing.JScrollPane();
        jTextPaneKickDotTextShiftText = new javax.swing.JTextPane();
        jLabelKickScreenTextDeclaration = new javax.swing.JLabel();
        jLabelKickPetasciiTextDeclaration = new javax.swing.JLabel();
        jRadioButtonKickDotTextScreenText = new javax.swing.JRadioButton();
        jRadioButtonKickDotTextPetasciiText = new javax.swing.JRadioButton();
        jScrollPaneKickDotTextScreenText = new javax.swing.JScrollPane();
        ScreenjTextPaneKickDotTextScreenText = new javax.swing.JTextPane();
        jScrollPaneKickDotTextPetasciiText = new javax.swing.JScrollPane();
        jTextPaneKickDotTextPetasciiText = new javax.swing.JTextPane();

        jLabelKickLabelDeclaration.setText("Label:");

        buttonGroupKickLabel.add(jRadioButtonKickLabelNameColon);
        jRadioButtonKickLabelNameColon.setSelected(true);
        jRadioButtonKickLabelNameColon.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickLabelNameColonItemStateChanged(evt);
            }
        });

        jScrollPaneKickLabelNameColon.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickLabelNameColon.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickLabelNameColon.setEditable(false);
        jTextPaneKickLabelNameColon.setContentType("text/html"); // NOI18N
        jTextPaneKickLabelNameColon.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <font color='black'>zzzz</font><b>:</b>\n    </p\n  </body>\n</html>\n");
        jScrollPaneKickLabelNameColon.setViewportView(jTextPaneKickLabelNameColon);

        jLabelKickByteDeclaration.setText("Byte:");

        buttonGroupKickByte.add(jRadioButtonKickDotByte);
        jRadioButtonKickDotByte.setSelected(true);
        jRadioButtonKickDotByte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotByteItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotByte.setEditable(false);
        jTextPaneKickDotByte.setContentType("text/html"); // NOI18N
        jTextPaneKickDotByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .byte</b> <font color='red'>$xx</font><br>\n     <b> .byte</b> <font color='blue'>dd</font><br>\n     <b> .byte</b> <font color='green'>%bb</font><br>\n     <b> .byte</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotByte.setViewportView(jTextPaneKickDotByte);

        jLabelKickWordDeclaration.setText("Word:");

        buttonGroupKickWord.add(jRadioButtonKickDotWord);
        jRadioButtonKickDotWord.setSelected(true);
        jRadioButtonKickDotWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotWordItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotWord.setEditable(false);
        jTextPaneKickDotWord.setContentType("text/html"); // NOI18N
        jTextPaneKickDotWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .word</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotWord.setViewportView(jTextPaneKickDotWord);

        jLabelKickStartingDeclaration.setText("Starting:");

        buttonGroupKickStarting.add(jRadioButtonKickDotCpuUndStarting);
        jRadioButtonKickDotCpuUndStarting.setSelected(true);
        jRadioButtonKickDotCpuUndStarting.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotCpuUndStartingItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotCpuUndStarting.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotCpuUndStarting.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotCpuUndStarting.setEditable(false);
        jTextPaneKickDotCpuUndStarting.setContentType("text/html"); // NOI18N
        jTextPaneKickDotCpuUndStarting.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>.cpu</b> _6502\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotCpuUndStarting.setViewportView(jTextPaneKickDotCpuUndStarting);

        jLabelKickCommentDeclaration.setText("Comment:");

        buttonGroupKickComment.add(jRadioButtonKickDoubleBarComment);
        jRadioButtonKickDoubleBarComment.setSelected(true);
        jRadioButtonKickDoubleBarComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDoubleBarCommentItemStateChanged(evt);
            }
        });

        jScrollPaneKickDoubleBarComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDoubleBarComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDoubleBarComment.setEditable(false);
        jTextPaneKickDoubleBarComment.setContentType("text/html"); // NOI18N
        jTextPaneKickDoubleBarComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>//</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDoubleBarComment.setViewportView(jTextPaneKickDoubleBarComment);

        jLabelKickOriginDeclaration.setText("Origin:");

        buttonGroupKickOrigin.add(jRadioButtonKickAsterixOrigin);
        jRadioButtonKickAsterixOrigin.setSelected(true);
        jRadioButtonKickAsterixOrigin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickAsterixOriginItemStateChanged(evt);
            }
        });

        jScrollPaneKickAsterixOrigin.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickAsterixOrigin.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickAsterixOrigin.setEditable(false);
        jTextPaneKickAsterixOrigin.setContentType("text/html"); // NOI18N
        jTextPaneKickAsterixOrigin.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>*=</b>$xxyy\n    </p>\n  </body>\n</html>");
        jScrollPaneKickAsterixOrigin.setViewportView(jTextPaneKickAsterixOrigin);

        buttonGroupKickOrigin.add(jRadioButtonKickDotPcOrigin);
        jRadioButtonKickDotPcOrigin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotPcOriginItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotPcOrigin.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotPcOrigin.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotPcOrigin.setEditable(false);
        jTextPaneKickDotPcOrigin.setContentType("text/html"); // NOI18N
        jTextPaneKickDotPcOrigin.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>.pc</b> $xxyy\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotPcOrigin.setViewportView(jTextPaneKickDotPcOrigin);

        jLabelKickBlockCommentDeclaration.setText("Block Comment:");

        buttonGroupKickBlockComment.add(jRadioButtonKickDoubleBarBlockComment);
        jRadioButtonKickDoubleBarBlockComment.setSelected(true);
        jRadioButtonKickDoubleBarBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDoubleBarBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneKickDoubleBarBlockComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDoubleBarBlockComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDoubleBarBlockComment.setEditable(false);
        jTextPaneKickDoubleBarBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneKickDoubleBarBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>//</b> xxx\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDoubleBarBlockComment.setViewportView(jTextPaneKickDoubleBarBlockComment);

        buttonGroupKickBlockComment.add(jRadioButtonKickCstyleBlockComment);
        jRadioButtonKickCstyleBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickCstyleBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneKickCstyleBlockComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickCstyleBlockComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickCstyleBlockComment.setEditable(false);
        jTextPaneKickCstyleBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneKickCstyleBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>/*</b> xxx <b'>*/</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickCstyleBlockComment.setViewportView(jTextPaneKickCstyleBlockComment);

        buttonGroupKickBlockComment.add(jRadioButtonDasmSharpIfPBlockComment);
        jRadioButtonDasmSharpIfPBlockComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonDasmSharpIfPBlockCommentItemStateChanged(evt);
            }
        });

        jScrollPaneDasmSharpIfPBlockComment.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneDasmSharpIfPBlockComment.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneDasmSharpIfPBlockComment.setEditable(false);
        jTextPaneDasmSharpIfPBlockComment.setContentType("text/html"); // NOI18N
        jTextPaneDasmSharpIfPBlockComment.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b>#if </b> xxx <b>#endif</b>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneDasmSharpIfPBlockComment.setViewportView(jTextPaneDasmSharpIfPBlockComment);

        jLabelKickMultiSpriteDeclaration.setText("Multicolor sprite:");

        jLabelKickMonoSpriteDeclaration.setText("Monocolor sprite:");

        buttonGroupKickMonoSprite.add(jRadioButtonKickByteHexMonoSprite);
        jRadioButtonKickByteHexMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickByteHexMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupKickMultiSprite.add(jRadioButtonKickByteHexMultiSprite);
        jRadioButtonKickByteHexMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickByteHexMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneKickByteHexMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickByteHexMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickByteHexMultiSprite.setEditable(false);
        jTextPaneKickByteHexMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickByteHexMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> [byte]</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickByteHexMultiSprite.setViewportView(jTextPaneKickByteHexMultiSprite);

        jScrollPaneKickByteHexMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickByteHexMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickByteHexMonoSprite.setEditable(false);
        jTextPaneKickByteHexMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickByteHexMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> [byte]</b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickByteHexMonoSprite.setViewportView(jTextPaneKickByteHexMonoSprite);

        buttonGroupKickMonoSprite.add(jRadioButtonKickByteBinMonoSprite);
        jRadioButtonKickByteBinMonoSprite.setSelected(true);
        jRadioButtonKickByteBinMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickByteBinMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupKickMultiSprite.add(jRadioButtonKickByteBinMultiSprite);
        jRadioButtonKickByteBinMultiSprite.setSelected(true);
        jRadioButtonKickByteBinMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickByteBinMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneKickByteBinMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickByteBinMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickByteBinMultiSprite.setEditable(false);
        jTextPaneKickByteBinMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickByteBinMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[byte]</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickByteBinMultiSprite.setViewportView(jTextPaneKickByteBinMultiSprite);

        jScrollPaneKickByteBinMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickByteBinMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickByteBinMonoSprite.setEditable(false);
        jTextPaneKickByteBinMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickByteBinMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[byte]</b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickByteBinMonoSprite.setViewportView(jTextPaneKickByteBinMonoSprite);

        buttonGroupKickMonoSprite.add(jRadioButtonKickMacroHexMonoSprite);
        jRadioButtonKickMacroHexMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroHexMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupKickMultiSprite.add(jRadioButtonKickMacroHexMultiSprite);
        jRadioButtonKickMacroHexMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroHexMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPaneKickMacroHexMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickMacroHexMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroHexMultiSprite.setEditable(false);
        jTextPaneKickMacroHexMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroHexMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.macro] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickMacroHexMultiSprite.setViewportView(jTextPaneKickMacroHexMultiSprite);

        jScrollPaneKickMacroHexMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickMacroHexMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroHexMonoSprite.setEditable(false);
        jTextPaneKickMacroHexMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroHexMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.macro] </b> <font color='red'>$xx..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickMacroHexMonoSprite.setViewportView(jTextPaneKickMacroHexMonoSprite);

        buttonGroupKickMonoSprite.add(jRadioButtonKickMacroBinMonoSprite);
        jRadioButtonKickMacroBinMonoSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroBinMonoSpriteItemStateChanged(evt);
            }
        });

        buttonGroupKickMultiSprite.add(jRadioButtonKickMacroBinMultiSprite);
        jRadioButtonKickMacroBinMultiSprite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroBinMultiSpriteItemStateChanged(evt);
            }
        });

        jScrollPanekickMacroBinMultiSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPanekickMacroBinMultiSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroBinMultiSprite.setEditable(false);
        jTextPaneKickMacroBinMultiSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroBinMultiSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.macro] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPanekickMacroBinMultiSprite.setViewportView(jTextPaneKickMacroBinMultiSprite);

        jScrollPaneKickMacroBinMonoSprite.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickMacroBinMonoSprite.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroBinMonoSprite.setEditable(false);
        jTextPaneKickMacroBinMonoSprite.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroBinMonoSprite.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.macro] </b> <font color='red'>%b..</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickMacroBinMonoSprite.setViewportView(jTextPaneKickMacroBinMonoSprite);

        jLabelKickTribyteDeclaration.setText("Tribyte:");

        buttonGroupKickTribyte.add(jRadioButtonKickMacroTribyte);
        jRadioButtonKickMacroTribyte.setSelected(true);
        jRadioButtonKickMacroTribyte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroTribyteItemStateChanged(evt);
            }
        });

        jScrollPaneKickMacroTribyte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickMacroTribyte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroTribyte.setEditable(false);
        jTextPaneKickMacroTribyte.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroTribyte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac]</b> <font color='red'>$xxyyzz</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickMacroTribyte.setViewportView(jTextPaneKickMacroTribyte);

        jLabelKickLongDeclaration.setText("Long:");

        buttonGroupKickLong.add(jRadioButtonKickDwordLong);
        jRadioButtonKickDwordLong.setSelected(true);
        jRadioButtonKickDwordLong.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDwordLongItemStateChanged(evt);
            }
        });

        jScrollPaneKickDwordLong.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDwordLong.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDwordLong.setEditable(false);
        jTextPaneKickDwordLong.setContentType("text/html"); // NOI18N
        jTextPaneKickDwordLong.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .dword</b> <font color='red'>$xxyyzzkk</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDwordLong.setViewportView(jTextPaneKickDwordLong);

        jLabelKickWordSwappedDeclaration.setText("Word Swapped:");

        buttonGroupKickWordSwapped.add(jRadioButtonKickMacroWordSwapped);
        jRadioButtonKickMacroWordSwapped.setSelected(true);
        jRadioButtonKickMacroWordSwapped.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroWordSwappedItemStateChanged(evt);
            }
        });

        jScrollPaneKickMacroWordSwapped.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickMacroWordSwapped.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroWordSwapped.setEditable(false);
        jTextPaneKickMacroWordSwapped.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroWordSwapped.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac]</b> <font color='red'>$yyxx</font><br>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickMacroWordSwapped.setViewportView(jTextPaneKickMacroWordSwapped);

        jLabelKickTextDeclaration.setText("Text:");

        buttonGroupKickText.add(jRadioButtonKickDotText);
        jRadioButtonKickDotText.setSelected(true);
        jRadioButtonKickDotText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotTextItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotText.setEditable(false);
        jTextPaneKickDotText.setContentType("text/html"); // NOI18N
        jTextPaneKickDotText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotText.setViewportView(jTextPaneKickDotText);

        buttonGroupKickByte.add(jRadioButtonKickDotByByte);
        jRadioButtonKickDotByByte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotByByteItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotByByte.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotByByte.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotByByte.setEditable(false);
        jTextPaneKickDotByByte.setContentType("text/html"); // NOI18N
        jTextPaneKickDotByByte.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n     <b> .by</b> <font color='red'>$xx</font><br>\n     <b> .by</b> <font color='blue'>dd</font><br>\n     <b> .by</b> <font color='green'>%bb</font><br>\n     <b> .by</b> <font color='purple'>'c'</font>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotByByte.setViewportView(jTextPaneKickDotByByte);

        buttonGroupKickWord.add(jRadioButtonKickDotWoWord);
        jRadioButtonKickDotWoWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotWoWordItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotWoWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotWoWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotWoWord.setEditable(false);
        jTextPaneKickDotWoWord.setContentType("text/html"); // NOI18N
        jTextPaneKickDotWoWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .wo</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotWoWord.setViewportView(jTextPaneKickDotWoWord);

        buttonGroupKickLong.add(jRadioButtonKickDotDwLong);
        jRadioButtonKickDotDwLong.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotDwLongItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotDwLong.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotDwLong.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotDwLong.setEditable(false);
        jTextPaneKickDotDwLong.setContentType("text/html"); // NOI18N
        jTextPaneKickDotDwLong.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .dw</b> <font color='red'>$xxyyzzkk</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotDwLong.setViewportView(jTextPaneKickDotDwLong);

        jCheckBoxKickColonMacro.setText("Call a macro with a colon before");
        jCheckBoxKickColonMacro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxKickColonMacroActionPerformed(evt);
            }
        });

        jLabelKickNumTextDeclaration.setText("Text #num chars:");

        buttonGroupKickNumText.add(jRadioButtonKickDotTextNumText);
        jRadioButtonKickDotTextNumText.setSelected(true);
        jRadioButtonKickDotTextNumText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotTextNumTextItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotTextNumText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotTextNumText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotTextNumText.setEditable(false);
        jTextPaneKickDotTextNumText.setContentType("text/html"); // NOI18N
        jTextPaneKickDotTextNumText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotTextNumText.setViewportView(jTextPaneKickDotTextNumText);

        jLabelKickZeroTextDeclaration.setText("Text 0 terminated:");

        buttonGroupKickZeroText.add(jRadioButtonKickDotTextZeroText);
        jRadioButtonKickDotTextZeroText.setSelected(true);
        jRadioButtonKickDotTextZeroText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotTextZeroTextItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotTextZeroText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotTextZeroText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotTextZeroText.setEditable(false);
        jTextPaneKickDotTextZeroText.setContentType("text/html"); // NOI18N
        jTextPaneKickDotTextZeroText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotTextZeroText.setViewportView(jTextPaneKickDotTextZeroText);

        jLabelKickAddressDeclaration.setText("Address:");

        buttonGroupKickAddress.add(jRadioButtonKickDotWordAddress);
        jRadioButtonKickDotWordAddress.setSelected(true);
        jRadioButtonKickDotWordAddress.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotWordAddressItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotWordAddress.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotWordAddress.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotWordAddress.setEditable(false);
        jTextPaneKickDotWordAddress.setContentType("text/html"); // NOI18N
        jTextPaneKickDotWordAddress.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .word</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotWordAddress.setViewportView(jTextPaneKickDotWordAddress);

        buttonGroupKickAddress.add(jRadioButtonKickDotWoWordAddress);
        jRadioButtonKickDotWoWordAddress.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotWoWordAddressItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotWoWordAddress.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotWoWordAddress.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotWoWordAddress.setEditable(false);
        jTextPaneKickDotWoWordAddress.setContentType("text/html"); // NOI18N
        jTextPaneKickDotWoWordAddress.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .wo</b> <font color='red'>$xxyy</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotWoWordAddress.setViewportView(jTextPaneKickDotWoWordAddress);

        jLabelKickStackWordDeclaration.setText("Stack Word:");

        buttonGroupKickStackWord.add(jRadioButtonKickMacroStackWord);
        jRadioButtonKickMacroStackWord.setSelected(true);
        jRadioButtonKickMacroStackWord.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickMacroStackWordItemStateChanged(evt);
            }
        });

        jScrollPaneKickMacroStackWord.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickMacroStackWord.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickMacroStackWord.setEditable(false);
        jTextPaneKickMacroStackWord.setContentType("text/html"); // NOI18N
        jTextPaneKickMacroStackWord.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b>[.mac]</b> <font color='red'>$yyxx</font><br>\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickMacroStackWord.setViewportView(jTextPaneKickMacroStackWord);

        jLabelKickHighTextDeclaration.setText("Text '1' terminated:");

        buttonGroupKickHighText.add(jRadioButtonKickDotTextHighText);
        jRadioButtonKickDotTextHighText.setSelected(true);
        jRadioButtonKickDotTextHighText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotTextHighTextItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotTextHighText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotTextHighText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotTextHighText.setEditable(false);
        jTextPaneKickDotTextHighText.setContentType("text/html"); // NOI18N
        jTextPaneKickDotTextHighText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotTextHighText.setViewportView(jTextPaneKickDotTextHighText);

        jLabelKickShiftTextDeclaration.setText("Text left shifted:");

        buttonGroupKickShiftText.add(jRadioButtonKickDotTextShiftText);
        jRadioButtonKickDotTextShiftText.setSelected(true);
        jRadioButtonKickDotTextShiftText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotTextShiftTextItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotTextShiftText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotTextShiftText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotTextShiftText.setEditable(false);
        jTextPaneKickDotTextShiftText.setContentType("text/html"); // NOI18N
        jTextPaneKickDotTextShiftText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotTextShiftText.setViewportView(jTextPaneKickDotTextShiftText);

        jLabelKickScreenTextDeclaration.setText("Text to screen code:");

        jLabelKickPetasciiTextDeclaration.setText("Text to petascii code:");

        buttonGroupKickScreenText.add(jRadioButtonKickDotTextScreenText);
        jRadioButtonKickDotTextScreenText.setSelected(true);
        jRadioButtonKickDotTextScreenText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotTextScreenTextItemStateChanged(evt);
            }
        });

        buttonGroupKickPetasciiText.add(jRadioButtonKickDotTextPetasciiText);
        jRadioButtonKickDotTextPetasciiText.setSelected(true);
        jRadioButtonKickDotTextPetasciiText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonKickDotTextPetasciiTextItemStateChanged(evt);
            }
        });

        jScrollPaneKickDotTextScreenText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotTextScreenText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        ScreenjTextPaneKickDotTextScreenText.setEditable(false);
        ScreenjTextPaneKickDotTextScreenText.setContentType("text/html"); // NOI18N
        ScreenjTextPaneKickDotTextScreenText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotTextScreenText.setViewportView(ScreenjTextPaneKickDotTextScreenText);

        jScrollPaneKickDotTextPetasciiText.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneKickDotTextPetasciiText.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextPaneKickDotTextPetasciiText.setEditable(false);
        jTextPaneKickDotTextPetasciiText.setContentType("text/html"); // NOI18N
        jTextPaneKickDotTextPetasciiText.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      <b> .text</b> <font color='red'>\"xxx\"</font><br>\n\n    </p>\n  </body>\n</html>\n");
        jScrollPaneKickDotTextPetasciiText.setViewportView(jTextPaneKickDotTextPetasciiText);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelKickStartingDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickOriginDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickCommentDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickBlockCommentDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickLabelDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickByteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickWordDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickWordSwappedDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickTribyteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickLongDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickStackWordDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickMonoSpriteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickMultiSpriteDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickAddressDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickNumTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickZeroTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickHighTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickShiftTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickScreenTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelKickPetasciiTextDeclaration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonKickDotTextPetasciiText)
                    .addComponent(jRadioButtonKickDotTextScreenText)
                    .addComponent(jRadioButtonKickDotTextShiftText)
                    .addComponent(jRadioButtonKickDotTextHighText)
                    .addComponent(jRadioButtonKickDotTextZeroText)
                    .addComponent(jRadioButtonKickDotTextNumText)
                    .addComponent(jRadioButtonKickDotText)
                    .addComponent(jRadioButtonKickByteHexMultiSprite)
                    .addComponent(jRadioButtonKickByteHexMonoSprite)
                    .addComponent(jRadioButtonKickMacroStackWord)
                    .addComponent(jRadioButtonKickDotWordAddress)
                    .addComponent(jRadioButtonKickDwordLong)
                    .addComponent(jRadioButtonKickMacroTribyte)
                    .addComponent(jRadioButtonKickMacroWordSwapped)
                    .addComponent(jRadioButtonKickDotWord)
                    .addComponent(jRadioButtonKickDotByte)
                    .addComponent(jRadioButtonKickLabelNameColon)
                    .addComponent(jRadioButtonKickDoubleBarBlockComment)
                    .addComponent(jRadioButtonKickDoubleBarComment)
                    .addComponent(jRadioButtonKickAsterixOrigin)
                    .addComponent(jRadioButtonKickDotCpuUndStarting))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPaneKickDotTextScreenText, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotTextShiftText, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotTextHighText, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotTextZeroText, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotTextNumText, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotText, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickByteHexMultiSprite, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickByteHexMonoSprite, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickMacroStackWord, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotWordAddress, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDwordLong, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                    .addComponent(jScrollPaneKickMacroTribyte, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickMacroWordSwapped, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotWord, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotByte, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickLabelNameColon, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDoubleBarBlockComment, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDoubleBarComment, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotCpuUndStarting, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickAsterixOrigin, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneKickDotTextPetasciiText))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonKickDotPcOrigin)
                    .addComponent(jRadioButtonKickCstyleBlockComment)
                    .addComponent(jRadioButtonKickDotByByte)
                    .addComponent(jRadioButtonKickDotWoWord)
                    .addComponent(jRadioButtonKickDotDwLong)
                    .addComponent(jRadioButtonKickDotWoWordAddress)
                    .addComponent(jRadioButtonKickByteBinMonoSprite)
                    .addComponent(jRadioButtonKickByteBinMultiSprite))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPaneKickDotPcOrigin)
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPaneKickCstyleBlockComment)
                            .addComponent(jScrollPaneKickDotByByte, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneKickDotWoWord, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneKickDotWoWordAddress, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneKickByteBinMultiSprite, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneKickByteBinMonoSprite, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneKickDotDwLong, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonKickMacroHexMonoSprite)
                    .addComponent(jRadioButtonKickMacroHexMultiSprite)
                    .addComponent(jRadioButtonDasmSharpIfPBlockComment))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPaneKickMacroHexMultiSprite, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonKickMacroBinMultiSprite))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPaneKickMacroHexMonoSprite)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonKickMacroBinMonoSprite)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPanekickMacroBinMultiSprite)
                            .addComponent(jScrollPaneKickMacroBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPaneDasmSharpIfPBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jCheckBoxKickColonMacro, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(417, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxKickColonMacro)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelKickStartingDeclaration)
                            .addComponent(jRadioButtonKickDotCpuUndStarting)
                            .addComponent(jScrollPaneKickDotCpuUndStarting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelKickOriginDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonKickAsterixOrigin)
                            .addComponent(jScrollPaneKickAsterixOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButtonKickDotPcOrigin))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabelKickCommentDeclaration)
                            .addComponent(jRadioButtonKickDoubleBarComment)
                            .addComponent(jScrollPaneKickDoubleBarComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jScrollPaneKickDotPcOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickBlockCommentDeclaration)
                    .addComponent(jRadioButtonKickDoubleBarBlockComment)
                    .addComponent(jScrollPaneKickDoubleBarBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickCstyleBlockComment)
                    .addComponent(jScrollPaneKickCstyleBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonDasmSharpIfPBlockComment)
                    .addComponent(jScrollPaneDasmSharpIfPBlockComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickLabelDeclaration)
                    .addComponent(jRadioButtonKickLabelNameColon)
                    .addComponent(jScrollPaneKickLabelNameColon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickByteDeclaration)
                    .addComponent(jRadioButtonKickDotByte)
                    .addComponent(jScrollPaneKickDotByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickDotByByte)
                    .addComponent(jScrollPaneKickDotByByte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickWordDeclaration)
                    .addComponent(jRadioButtonKickDotWord)
                    .addComponent(jScrollPaneKickDotWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickDotWoWord)
                    .addComponent(jScrollPaneKickDotWoWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickWordSwappedDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickMacroWordSwapped)
                    .addComponent(jScrollPaneKickMacroWordSwapped, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonKickMacroTribyte)
                            .addComponent(jScrollPaneKickMacroTribyte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabelKickTribyteDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickLongDeclaration)
                    .addComponent(jRadioButtonKickDwordLong)
                    .addComponent(jScrollPaneKickDwordLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickDotDwLong)
                    .addComponent(jScrollPaneKickDotDwLong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickAddressDeclaration)
                    .addComponent(jRadioButtonKickDotWordAddress)
                    .addComponent(jScrollPaneKickDotWordAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickDotWoWordAddress)
                    .addComponent(jScrollPaneKickDotWoWordAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickStackWordDeclaration, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickMacroStackWord)
                    .addComponent(jScrollPaneKickMacroStackWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickMonoSpriteDeclaration)
                    .addComponent(jRadioButtonKickByteHexMonoSprite)
                    .addComponent(jScrollPaneKickByteHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickByteBinMonoSprite)
                    .addComponent(jScrollPaneKickByteBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickMacroHexMonoSprite)
                    .addComponent(jScrollPaneKickMacroHexMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickMacroBinMonoSprite)
                    .addComponent(jScrollPaneKickMacroBinMonoSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickMultiSpriteDeclaration)
                    .addComponent(jRadioButtonKickByteHexMultiSprite)
                    .addComponent(jScrollPaneKickByteHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickByteBinMultiSprite)
                    .addComponent(jScrollPaneKickByteBinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickMacroHexMultiSprite)
                    .addComponent(jScrollPaneKickMacroHexMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonKickMacroBinMultiSprite)
                    .addComponent(jScrollPanekickMacroBinMultiSprite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickTextDeclaration)
                    .addComponent(jRadioButtonKickDotText)
                    .addComponent(jScrollPaneKickDotText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickNumTextDeclaration)
                    .addComponent(jRadioButtonKickDotTextNumText)
                    .addComponent(jScrollPaneKickDotTextNumText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickZeroTextDeclaration)
                    .addComponent(jRadioButtonKickDotTextZeroText)
                    .addComponent(jScrollPaneKickDotTextZeroText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickHighTextDeclaration)
                    .addComponent(jRadioButtonKickDotTextHighText)
                    .addComponent(jScrollPaneKickDotTextHighText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickShiftTextDeclaration)
                    .addComponent(jRadioButtonKickDotTextShiftText)
                    .addComponent(jScrollPaneKickDotTextShiftText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickScreenTextDeclaration)
                    .addComponent(jRadioButtonKickDotTextScreenText)
                    .addComponent(jScrollPaneKickDotTextScreenText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelKickPetasciiTextDeclaration)
                    .addComponent(jRadioButtonKickDotTextPetasciiText)
                    .addComponent(jScrollPaneKickDotTextPetasciiText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButtonKickLabelNameColonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickLabelNameColonItemStateChanged
        option.kickLabel=Assembler.Label.NAME_COLON;
    }//GEN-LAST:event_jRadioButtonKickLabelNameColonItemStateChanged

    private void jRadioButtonKickDotByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotByteItemStateChanged
        option.kickByte=Assembler.Byte.DOT_BYTE;
    }//GEN-LAST:event_jRadioButtonKickDotByteItemStateChanged

    private void jRadioButtonKickDotWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotWordItemStateChanged
        option.kickWord=Assembler.Word.DOT_WORD;
    }//GEN-LAST:event_jRadioButtonKickDotWordItemStateChanged

    private void jRadioButtonKickDotCpuUndStartingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotCpuUndStartingItemStateChanged
        option.kickStarting=Assembler.Starting.DOT_CPU_UND;
    }//GEN-LAST:event_jRadioButtonKickDotCpuUndStartingItemStateChanged

    private void jRadioButtonKickDoubleBarCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDoubleBarCommentItemStateChanged
        option.kickComment=Assembler.Comment.DOUBLE_BAR;
    }//GEN-LAST:event_jRadioButtonKickDoubleBarCommentItemStateChanged

    private void jRadioButtonKickAsterixOriginItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickAsterixOriginItemStateChanged
        option.kickOrigin=Assembler.Origin.ASTERISK;
    }//GEN-LAST:event_jRadioButtonKickAsterixOriginItemStateChanged

    private void jRadioButtonKickDotPcOriginItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotPcOriginItemStateChanged
        option.kickOrigin=Assembler.Origin.DOT_PC;
    }//GEN-LAST:event_jRadioButtonKickDotPcOriginItemStateChanged

    private void jRadioButtonKickDoubleBarBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDoubleBarBlockCommentItemStateChanged
        option.kickBlockComment=Assembler.BlockComment.DOUBLE_BAR;
    }//GEN-LAST:event_jRadioButtonKickDoubleBarBlockCommentItemStateChanged

    private void jRadioButtonKickCstyleBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickCstyleBlockCommentItemStateChanged
        option.kickBlockComment=Assembler.BlockComment.CSTYLE;
    }//GEN-LAST:event_jRadioButtonKickCstyleBlockCommentItemStateChanged

    private void jRadioButtonDasmSharpIfPBlockCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonDasmSharpIfPBlockCommentItemStateChanged
        option.kickBlockComment=Assembler.BlockComment.SHARP_IF;
    }//GEN-LAST:event_jRadioButtonDasmSharpIfPBlockCommentItemStateChanged

    private void jRadioButtonKickByteHexMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickByteHexMonoSpriteItemStateChanged
        option.kickMonoSprite=Assembler.MonoSprite.BYTE_HEX;
    }//GEN-LAST:event_jRadioButtonKickByteHexMonoSpriteItemStateChanged

    private void jRadioButtonKickByteHexMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickByteHexMultiSpriteItemStateChanged
        option.kickMultiSprite=Assembler.MultiSprite.BYTE_HEX;
    }//GEN-LAST:event_jRadioButtonKickByteHexMultiSpriteItemStateChanged

    private void jRadioButtonKickByteBinMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickByteBinMonoSpriteItemStateChanged
        option.kickMonoSprite=Assembler.MonoSprite.BYTE_BIN;
    }//GEN-LAST:event_jRadioButtonKickByteBinMonoSpriteItemStateChanged

    private void jRadioButtonKickByteBinMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickByteBinMultiSpriteItemStateChanged
        option.kickMultiSprite=Assembler.MultiSprite.BYTE_BIN;
    }//GEN-LAST:event_jRadioButtonKickByteBinMultiSpriteItemStateChanged

    private void jRadioButtonKickMacroHexMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroHexMonoSpriteItemStateChanged
        option.kickMonoSprite=Assembler.MonoSprite.MACRO1_HEX;
    }//GEN-LAST:event_jRadioButtonKickMacroHexMonoSpriteItemStateChanged

    private void jRadioButtonKickMacroHexMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroHexMultiSpriteItemStateChanged
        option.kickMultiSprite=Assembler.MultiSprite.MACRO1_HEX;
    }//GEN-LAST:event_jRadioButtonKickMacroHexMultiSpriteItemStateChanged

    private void jRadioButtonKickMacroBinMonoSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroBinMonoSpriteItemStateChanged
        option.kickMonoSprite=Assembler.MonoSprite.MACRO1_BIN;
    }//GEN-LAST:event_jRadioButtonKickMacroBinMonoSpriteItemStateChanged

    private void jRadioButtonKickMacroBinMultiSpriteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroBinMultiSpriteItemStateChanged
        option.kickMultiSprite=Assembler.MultiSprite.MACRO1_BIN;
    }//GEN-LAST:event_jRadioButtonKickMacroBinMultiSpriteItemStateChanged

    private void jRadioButtonKickMacroTribyteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroTribyteItemStateChanged
        option.kickTribyte=Assembler.Tribyte.MACRO1_TRIBYTE;
    }//GEN-LAST:event_jRadioButtonKickMacroTribyteItemStateChanged

    private void jRadioButtonKickDwordLongItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDwordLongItemStateChanged
        option.kickLong=Assembler.Long.DOT_DWORD_LONG;
    }//GEN-LAST:event_jRadioButtonKickDwordLongItemStateChanged

    private void jRadioButtonKickMacroWordSwappedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroWordSwappedItemStateChanged
        option.kickWordSwapped=Assembler.WordSwapped.MACRO1_WORD_SWAPPED;
    }//GEN-LAST:event_jRadioButtonKickMacroWordSwappedItemStateChanged

    private void jRadioButtonKickDotTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotTextItemStateChanged
        option.kickText=Assembler.Text.DOT_TEXT;
    }//GEN-LAST:event_jRadioButtonKickDotTextItemStateChanged

    private void jRadioButtonKickDotByByteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotByByteItemStateChanged
        option.kickByte=Assembler.Byte.DOT_BY_BYTE;
    }//GEN-LAST:event_jRadioButtonKickDotByByteItemStateChanged

    private void jRadioButtonKickDotWoWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotWoWordItemStateChanged
        option.kickWord=Assembler.Word.DOT_WO_WORD;
    }//GEN-LAST:event_jRadioButtonKickDotWoWordItemStateChanged

    private void jRadioButtonKickDotDwLongItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotDwLongItemStateChanged
        option.kickLong=Assembler.Long.DOT_DW_LONG;
    }//GEN-LAST:event_jRadioButtonKickDotDwLongItemStateChanged

    private void jCheckBoxKickColonMacroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxKickColonMacroActionPerformed
        option.kickColonMacro=jCheckBoxKickColonMacro.isSelected();
    }//GEN-LAST:event_jCheckBoxKickColonMacroActionPerformed

    private void jRadioButtonKickDotTextNumTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotTextNumTextItemStateChanged
        option.kickNumText=Assembler.NumText.DOT_TEXT_NUMTEXT;
    }//GEN-LAST:event_jRadioButtonKickDotTextNumTextItemStateChanged

    private void jRadioButtonKickDotTextZeroTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotTextZeroTextItemStateChanged
        option.kickZeroText=Assembler.ZeroText.DOT_TEXT_ZEROTEXT;
    }//GEN-LAST:event_jRadioButtonKickDotTextZeroTextItemStateChanged

    private void jRadioButtonKickDotWordAddressItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotWordAddressItemStateChanged
        option.kickAddress=Assembler.Address.DOT_WORD_ADDR;
    }//GEN-LAST:event_jRadioButtonKickDotWordAddressItemStateChanged

    private void jRadioButtonKickDotWoWordAddressItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotWoWordAddressItemStateChanged
        option.kickAddress=Assembler.Address.DOT_WO_WORD_ADDR;
    }//GEN-LAST:event_jRadioButtonKickDotWoWordAddressItemStateChanged

    private void jRadioButtonKickMacroStackWordItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickMacroStackWordItemStateChanged
        option.kickStackWord=Assembler.StackWord.MACRO1_STACKWORD;
    }//GEN-LAST:event_jRadioButtonKickMacroStackWordItemStateChanged

    private void jRadioButtonKickDotTextHighTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotTextHighTextItemStateChanged
        option.kickHighText=Assembler.HighText.DOT_TEXT_HIGHTEXT;
    }//GEN-LAST:event_jRadioButtonKickDotTextHighTextItemStateChanged

    private void jRadioButtonKickDotTextShiftTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotTextShiftTextItemStateChanged
        option.kickShiftText=Assembler.ShiftText.DOT_TEXT_SHIFTTEXT;
    }//GEN-LAST:event_jRadioButtonKickDotTextShiftTextItemStateChanged

    private void jRadioButtonKickDotTextScreenTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotTextScreenTextItemStateChanged
        option.kickScreenText=Assembler.ScreenText.DOT_TEXT_SCREENTEXT;
    }//GEN-LAST:event_jRadioButtonKickDotTextScreenTextItemStateChanged

    private void jRadioButtonKickDotTextPetasciiTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonKickDotTextPetasciiTextItemStateChanged
        option.kickPetasciiText=Assembler.PetasciiText.DOT_TEXT_PETASCIITEXT;
    }//GEN-LAST:event_jRadioButtonKickDotTextPetasciiTextItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane ScreenjTextPaneKickDotTextScreenText;
    private javax.swing.ButtonGroup buttonGroupKickAddress;
    private javax.swing.ButtonGroup buttonGroupKickBlockComment;
    private javax.swing.ButtonGroup buttonGroupKickByte;
    private javax.swing.ButtonGroup buttonGroupKickComment;
    private javax.swing.ButtonGroup buttonGroupKickHighText;
    private javax.swing.ButtonGroup buttonGroupKickLabel;
    private javax.swing.ButtonGroup buttonGroupKickLong;
    private javax.swing.ButtonGroup buttonGroupKickMonoSprite;
    private javax.swing.ButtonGroup buttonGroupKickMultiSprite;
    private javax.swing.ButtonGroup buttonGroupKickNumText;
    private javax.swing.ButtonGroup buttonGroupKickOrigin;
    private javax.swing.ButtonGroup buttonGroupKickPetasciiText;
    private javax.swing.ButtonGroup buttonGroupKickScreenText;
    private javax.swing.ButtonGroup buttonGroupKickShiftText;
    private javax.swing.ButtonGroup buttonGroupKickStackWord;
    private javax.swing.ButtonGroup buttonGroupKickStarting;
    private javax.swing.ButtonGroup buttonGroupKickText;
    private javax.swing.ButtonGroup buttonGroupKickTribyte;
    private javax.swing.ButtonGroup buttonGroupKickWord;
    private javax.swing.ButtonGroup buttonGroupKickWordSwapped;
    private javax.swing.ButtonGroup buttonGroupKickZeroText;
    private javax.swing.JCheckBox jCheckBoxKickColonMacro;
    private javax.swing.JLabel jLabelKickAddressDeclaration;
    private javax.swing.JLabel jLabelKickBlockCommentDeclaration;
    private javax.swing.JLabel jLabelKickByteDeclaration;
    private javax.swing.JLabel jLabelKickCommentDeclaration;
    private javax.swing.JLabel jLabelKickHighTextDeclaration;
    private javax.swing.JLabel jLabelKickLabelDeclaration;
    private javax.swing.JLabel jLabelKickLongDeclaration;
    private javax.swing.JLabel jLabelKickMonoSpriteDeclaration;
    private javax.swing.JLabel jLabelKickMultiSpriteDeclaration;
    private javax.swing.JLabel jLabelKickNumTextDeclaration;
    private javax.swing.JLabel jLabelKickOriginDeclaration;
    private javax.swing.JLabel jLabelKickPetasciiTextDeclaration;
    private javax.swing.JLabel jLabelKickScreenTextDeclaration;
    private javax.swing.JLabel jLabelKickShiftTextDeclaration;
    private javax.swing.JLabel jLabelKickStackWordDeclaration;
    private javax.swing.JLabel jLabelKickStartingDeclaration;
    private javax.swing.JLabel jLabelKickTextDeclaration;
    private javax.swing.JLabel jLabelKickTribyteDeclaration;
    private javax.swing.JLabel jLabelKickWordDeclaration;
    private javax.swing.JLabel jLabelKickWordSwappedDeclaration;
    private javax.swing.JLabel jLabelKickZeroTextDeclaration;
    private javax.swing.JRadioButton jRadioButtonDasmSharpIfPBlockComment;
    private javax.swing.JRadioButton jRadioButtonKickAsterixOrigin;
    private javax.swing.JRadioButton jRadioButtonKickByteBinMonoSprite;
    private javax.swing.JRadioButton jRadioButtonKickByteBinMultiSprite;
    private javax.swing.JRadioButton jRadioButtonKickByteHexMonoSprite;
    private javax.swing.JRadioButton jRadioButtonKickByteHexMultiSprite;
    private javax.swing.JRadioButton jRadioButtonKickCstyleBlockComment;
    private javax.swing.JRadioButton jRadioButtonKickDotByByte;
    private javax.swing.JRadioButton jRadioButtonKickDotByte;
    private javax.swing.JRadioButton jRadioButtonKickDotCpuUndStarting;
    private javax.swing.JRadioButton jRadioButtonKickDotDwLong;
    private javax.swing.JRadioButton jRadioButtonKickDotPcOrigin;
    private javax.swing.JRadioButton jRadioButtonKickDotText;
    private javax.swing.JRadioButton jRadioButtonKickDotTextHighText;
    private javax.swing.JRadioButton jRadioButtonKickDotTextNumText;
    private javax.swing.JRadioButton jRadioButtonKickDotTextPetasciiText;
    private javax.swing.JRadioButton jRadioButtonKickDotTextScreenText;
    private javax.swing.JRadioButton jRadioButtonKickDotTextShiftText;
    private javax.swing.JRadioButton jRadioButtonKickDotTextZeroText;
    private javax.swing.JRadioButton jRadioButtonKickDotWoWord;
    private javax.swing.JRadioButton jRadioButtonKickDotWoWordAddress;
    private javax.swing.JRadioButton jRadioButtonKickDotWord;
    private javax.swing.JRadioButton jRadioButtonKickDotWordAddress;
    private javax.swing.JRadioButton jRadioButtonKickDoubleBarBlockComment;
    private javax.swing.JRadioButton jRadioButtonKickDoubleBarComment;
    private javax.swing.JRadioButton jRadioButtonKickDwordLong;
    private javax.swing.JRadioButton jRadioButtonKickLabelNameColon;
    private javax.swing.JRadioButton jRadioButtonKickMacroBinMonoSprite;
    private javax.swing.JRadioButton jRadioButtonKickMacroBinMultiSprite;
    private javax.swing.JRadioButton jRadioButtonKickMacroHexMonoSprite;
    private javax.swing.JRadioButton jRadioButtonKickMacroHexMultiSprite;
    private javax.swing.JRadioButton jRadioButtonKickMacroStackWord;
    private javax.swing.JRadioButton jRadioButtonKickMacroTribyte;
    private javax.swing.JRadioButton jRadioButtonKickMacroWordSwapped;
    private javax.swing.JScrollPane jScrollPaneDasmSharpIfPBlockComment;
    private javax.swing.JScrollPane jScrollPaneKickAsterixOrigin;
    private javax.swing.JScrollPane jScrollPaneKickByteBinMonoSprite;
    private javax.swing.JScrollPane jScrollPaneKickByteBinMultiSprite;
    private javax.swing.JScrollPane jScrollPaneKickByteHexMonoSprite;
    private javax.swing.JScrollPane jScrollPaneKickByteHexMultiSprite;
    private javax.swing.JScrollPane jScrollPaneKickCstyleBlockComment;
    private javax.swing.JScrollPane jScrollPaneKickDotByByte;
    private javax.swing.JScrollPane jScrollPaneKickDotByte;
    private javax.swing.JScrollPane jScrollPaneKickDotCpuUndStarting;
    private javax.swing.JScrollPane jScrollPaneKickDotDwLong;
    private javax.swing.JScrollPane jScrollPaneKickDotPcOrigin;
    private javax.swing.JScrollPane jScrollPaneKickDotText;
    private javax.swing.JScrollPane jScrollPaneKickDotTextHighText;
    private javax.swing.JScrollPane jScrollPaneKickDotTextNumText;
    private javax.swing.JScrollPane jScrollPaneKickDotTextPetasciiText;
    private javax.swing.JScrollPane jScrollPaneKickDotTextScreenText;
    private javax.swing.JScrollPane jScrollPaneKickDotTextShiftText;
    private javax.swing.JScrollPane jScrollPaneKickDotTextZeroText;
    private javax.swing.JScrollPane jScrollPaneKickDotWoWord;
    private javax.swing.JScrollPane jScrollPaneKickDotWoWordAddress;
    private javax.swing.JScrollPane jScrollPaneKickDotWord;
    private javax.swing.JScrollPane jScrollPaneKickDotWordAddress;
    private javax.swing.JScrollPane jScrollPaneKickDoubleBarBlockComment;
    private javax.swing.JScrollPane jScrollPaneKickDoubleBarComment;
    private javax.swing.JScrollPane jScrollPaneKickDwordLong;
    private javax.swing.JScrollPane jScrollPaneKickLabelNameColon;
    private javax.swing.JScrollPane jScrollPaneKickMacroBinMonoSprite;
    private javax.swing.JScrollPane jScrollPaneKickMacroHexMonoSprite;
    private javax.swing.JScrollPane jScrollPaneKickMacroHexMultiSprite;
    private javax.swing.JScrollPane jScrollPaneKickMacroStackWord;
    private javax.swing.JScrollPane jScrollPaneKickMacroTribyte;
    private javax.swing.JScrollPane jScrollPaneKickMacroWordSwapped;
    private javax.swing.JScrollPane jScrollPanekickMacroBinMultiSprite;
    private javax.swing.JTextPane jTextPaneDasmSharpIfPBlockComment;
    private javax.swing.JTextPane jTextPaneKickAsterixOrigin;
    private javax.swing.JTextPane jTextPaneKickByteBinMonoSprite;
    private javax.swing.JTextPane jTextPaneKickByteBinMultiSprite;
    private javax.swing.JTextPane jTextPaneKickByteHexMonoSprite;
    private javax.swing.JTextPane jTextPaneKickByteHexMultiSprite;
    private javax.swing.JTextPane jTextPaneKickCstyleBlockComment;
    private javax.swing.JTextPane jTextPaneKickDotByByte;
    private javax.swing.JTextPane jTextPaneKickDotByte;
    private javax.swing.JTextPane jTextPaneKickDotCpuUndStarting;
    private javax.swing.JTextPane jTextPaneKickDotDwLong;
    private javax.swing.JTextPane jTextPaneKickDotPcOrigin;
    private javax.swing.JTextPane jTextPaneKickDotText;
    private javax.swing.JTextPane jTextPaneKickDotTextHighText;
    private javax.swing.JTextPane jTextPaneKickDotTextNumText;
    private javax.swing.JTextPane jTextPaneKickDotTextPetasciiText;
    private javax.swing.JTextPane jTextPaneKickDotTextShiftText;
    private javax.swing.JTextPane jTextPaneKickDotTextZeroText;
    private javax.swing.JTextPane jTextPaneKickDotWoWord;
    private javax.swing.JTextPane jTextPaneKickDotWoWordAddress;
    private javax.swing.JTextPane jTextPaneKickDotWord;
    private javax.swing.JTextPane jTextPaneKickDotWordAddress;
    private javax.swing.JTextPane jTextPaneKickDoubleBarBlockComment;
    private javax.swing.JTextPane jTextPaneKickDoubleBarComment;
    private javax.swing.JTextPane jTextPaneKickDwordLong;
    private javax.swing.JTextPane jTextPaneKickLabelNameColon;
    private javax.swing.JTextPane jTextPaneKickMacroBinMonoSprite;
    private javax.swing.JTextPane jTextPaneKickMacroBinMultiSprite;
    private javax.swing.JTextPane jTextPaneKickMacroHexMonoSprite;
    private javax.swing.JTextPane jTextPaneKickMacroHexMultiSprite;
    private javax.swing.JTextPane jTextPaneKickMacroStackWord;
    private javax.swing.JTextPane jTextPaneKickMacroTribyte;
    private javax.swing.JTextPane jTextPaneKickMacroWordSwapped;
    // End of variables declaration//GEN-END:variables

/**
   * Apply the option for KickAssembler
   */
  public void applyOptionKickAssembler() {
    jCheckBoxKickColonMacro.setSelected(option.kickColonMacro);
      
    switch (option.kickStarting) {
      case DOT_CPU_UND:
        jRadioButtonKickDotCpuUndStarting.setSelected(true);   
        break;
    }
    
    switch (option.kickOrigin) {                     
      case DOT_ORG:
        jRadioButtonKickAsterixOrigin.setSelected(true);
        break;  
      case DOT_PC:
        jRadioButtonKickDotPcOrigin.setSelected(true);  
        break;
    }
    
    switch (option.kickLabel) {
      case NAME_COLON:
        jRadioButtonKickLabelNameColon.setSelected(true);
        break;
    }
    
    switch (option.kickComment) {
      case DOUBLE_BAR:  
        jRadioButtonKickDoubleBarComment.setSelected(true);
        break; 
    }  
    
    switch (option.kickBlockComment) {
      case DOUBLE_BAR:
        jRadioButtonKickDoubleBarBlockComment.setSelected(true);
        break;
      case CSTYLE:
        jRadioButtonKickCstyleBlockComment.setSelected(true);  
        break;  
      case SHARP_IF:
        jRadioButtonDasmSharpIfPBlockComment.setSelected(true);  
        break;           
    }   
           
    switch (option.kickByte) {
      case DOT_BYTE:  
        jRadioButtonKickDotByte.setSelected(true);
        break; 
      case DOT_BY_BYTE:
        jRadioButtonKickDotByByte.setSelected(true);  
        break;  
    }
    
    switch (option.kickWord) {
      case DOT_WORD:  
        jRadioButtonKickDotWord.setSelected(true);
        break;  
       case DOT_WO_WORD:  
        jRadioButtonKickDotWoWord.setSelected(true);
        break;                
    }  
    
    switch (option.kickWordSwapped) { 
      case MACRO1_WORD_SWAPPED:
        jRadioButtonKickMacroWordSwapped.setSelected(true);  
        break;    
    }     
    
    switch (option.kickTribyte) {
      case MACRO1_TRIBYTE:  
        jRadioButtonKickMacroTribyte.setSelected(true);
        break;  
    }
    
    switch (option.kickLong) {
      case DOT_DWORD_LONG:  
        jRadioButtonKickDwordLong.setSelected(true);
        break;  
      case DOT_DW_LONG:  
        jRadioButtonKickDotDwLong.setSelected(true);
        break;    
    }
    
    switch (option.kickAddress) {
      case DOT_WORD_ADDR:  
        jRadioButtonKickDotWordAddress.setSelected(true);
        break;  
       case DOT_WO_WORD_ADDR:  
        jRadioButtonKickDotWoWordAddress.setSelected(true);
        break;                
    }  
    
    switch (option.kickStackWord) {
      case MACRO1_STACKWORD:
        jRadioButtonKickMacroStackWord.setSelected(true);
        break;
    } 
    
    switch (option.kickMonoSprite) {
      case BYTE_HEX:
        jRadioButtonKickByteHexMonoSprite.setSelected(true);
        break;
      case BYTE_BIN:
        jRadioButtonKickByteBinMonoSprite.setSelected(true);
        break;
      case MACRO1_HEX:
        jRadioButtonKickMacroHexMonoSprite.setSelected(true);
        break;  
      case MACRO1_BIN:
        jRadioButtonKickMacroBinMonoSprite.setSelected(true);
        break;  
    }
    
    switch (option.kickMultiSprite) {
      case BYTE_HEX:
        jRadioButtonKickByteHexMultiSprite.setSelected(true);
        break;
      case BYTE_BIN:
        jRadioButtonKickByteBinMultiSprite.setSelected(true);
        break;
      case MACRO1_HEX:
        jRadioButtonKickMacroHexMultiSprite.setSelected(true);
        break;  
      case MACRO1_BIN:
        jRadioButtonKickMacroBinMultiSprite.setSelected(true);
        break;  
    }     
    
    switch (option.kickText) {
      case DOT_TEXT:  
        jRadioButtonKickDotText.setSelected(true);
        break;           
    }   
    
    switch (option.kickNumText) {
      case DOT_TEXT_NUMTEXT:  
        jRadioButtonKickDotTextNumText.setSelected(true);
        break;           
    }  
     
    switch (option.kickZeroText) {
      case DOT_TEXT_ZEROTEXT:  
        jRadioButtonKickDotTextZeroText.setSelected(true);
        break;           
    }   
    
    switch (option.kickHighText) {
      case DOT_TEXT_HIGHTEXT:  
        jRadioButtonKickDotTextHighText.setSelected(true);
        break;           
    }
    
    switch (option.kickShiftText) {
      case DOT_TEXT_SHIFTTEXT:  
        jRadioButtonKickDotTextShiftText.setSelected(true);
        break;           
    }
    
    switch (option.kickScreenText) {
      case DOT_TEXT_SCREENTEXT:  
        jRadioButtonKickDotTextScreenText.setSelected(true);
        break;           
    }
    
    switch (option.kickPetasciiText) {
      case DOT_TEXT_PETASCIITEXT:  
        jRadioButtonKickDotTextPetasciiText.setSelected(true);
        break;           
    }
  }
    
}
