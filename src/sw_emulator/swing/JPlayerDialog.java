/**
 * @(#)JPlayerDialog.java 2023/04/07
 *
 * ICE Team free software group
 *
 * This file is part of JIIT64 Java Ice Team Tracker 64
 * See README for copyright notice.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 */
package sw_emulator.swing;

import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import sw_emulator.software.sidid.CRSID;
import sw_emulator.software.sidid.Memory;
import sw_emulator.software.sidid.PSID;
import sw_emulator.swing.main.FileManager;
import sw_emulator.swing.main.Option;
import sw_emulator.swing.main.Project;

/**
 * Sid player for SIDLD
 * 
 * @author ice
 */
public class JPlayerDialog extends javax.swing.JDialog {
  /** cRSID player */
  CRSID crsid=new CRSID();
  
  /** JC64dis Option */
  Option option;
  
  /** JC64dis project*/
  Project project;
  
  /** Actual sid handler*/
  PSID sid;
  
  int tune=1;

  /**
   * Creates new form JPlayerDialog
   */
  public JPlayerDialog(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    initComponents();
    crsid.init(44100);
  }
  
  /**
   * Setup the dialog
   * 
   * @param option option of JC64dis
   * @param project project of JC64dis
   */
  public void setup(Option option, Project project) {
    this.option=option;
    this.project=project;
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBarPlayer = new javax.swing.JToolBar();
        jButtonPrev = new javax.swing.JButton();
        jButtonNext = new javax.swing.JButton();
        jButtonStart = new javax.swing.JButton();
        jButtonPlay = new javax.swing.JButton();
        jButtonFPlay = new javax.swing.JButton();
        jButtonPause = new javax.swing.JButton();
        jButtonStop = new javax.swing.JButton();
        jButtonCurrent = new javax.swing.JButton();
        jButtonMax = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SIDld player");
        setResizable(false);

        jButtonPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sw_emulator/swing/icons/1leftarrow.png"))); // NOI18N
        jButtonPrev.setToolTipText("Go to previous tune");
        jButtonPrev.setFocusable(false);
        jButtonPrev.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonPrev.setMaximumSize(new java.awt.Dimension(32, 32));
        jButtonPrev.setMinimumSize(new java.awt.Dimension(32, 32));
        jButtonPrev.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrevActionPerformed(evt);
            }
        });
        jToolBarPlayer.add(jButtonPrev);

        jButtonNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sw_emulator/swing/icons/1rightarrow.png"))); // NOI18N
        jButtonNext.setToolTipText("Go to next tune");
        jButtonNext.setFocusable(false);
        jButtonNext.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonNext.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextActionPerformed(evt);
            }
        });
        jToolBarPlayer.add(jButtonNext);

        jButtonStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sw_emulator/swing/icons/player_start.png"))); // NOI18N
        jButtonStart.setToolTipText("Rewind the tune");
        jButtonStart.setFocusable(false);
        jButtonStart.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonStart.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });
        jToolBarPlayer.add(jButtonStart);

        jButtonPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sw_emulator/swing/icons/player_play.png"))); // NOI18N
        jButtonPlay.setToolTipText("Play the tune");
        jButtonPlay.setFocusable(false);
        jButtonPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayActionPerformed(evt);
            }
        });
        jToolBarPlayer.add(jButtonPlay);

        jButtonFPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sw_emulator/swing/icons/player_fwd.png"))); // NOI18N
        jButtonFPlay.setToolTipText("Fast Forward");
        jButtonFPlay.setFocusable(false);
        jButtonFPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonFPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonFPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFPlayActionPerformed(evt);
            }
        });
        jToolBarPlayer.add(jButtonFPlay);

        jButtonPause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sw_emulator/swing/icons/player_pause.png"))); // NOI18N
        jButtonPause.setToolTipText("Pause the tune");
        jButtonPause.setFocusable(false);
        jButtonPause.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonPause.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPauseActionPerformed(evt);
            }
        });
        jToolBarPlayer.add(jButtonPause);

        jButtonStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sw_emulator/swing/icons/player_stop.png"))); // NOI18N
        jButtonStop.setToolTipText("Stop the tune");
        jButtonStop.setFocusable(false);
        jButtonStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopActionPerformed(evt);
            }
        });
        jToolBarPlayer.add(jButtonStop);

        jButtonCurrent.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonCurrent.setText("1");
        jButtonCurrent.setToolTipText("Current tune");
        jButtonCurrent.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonCurrent.setEnabled(false);
        jButtonCurrent.setFocusable(false);
        jButtonCurrent.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonCurrent.setMaximumSize(new java.awt.Dimension(32, 30));
        jButtonCurrent.setMinimumSize(new java.awt.Dimension(32, 30));
        jButtonCurrent.setPreferredSize(new java.awt.Dimension(32, 30));
        jButtonCurrent.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBarPlayer.add(jButtonCurrent);

        jButtonMax.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonMax.setText("1");
        jButtonMax.setToolTipText("Number of tunes");
        jButtonMax.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonMax.setEnabled(false);
        jButtonMax.setFocusable(false);
        jButtonMax.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonMax.setMaximumSize(new java.awt.Dimension(32, 30));
        jButtonMax.setMinimumSize(new java.awt.Dimension(32, 30));
        jButtonMax.setPreferredSize(new java.awt.Dimension(32, 30));
        jButtonMax.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBarPlayer.add(jButtonMax);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBarPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBarPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  private void jButtonPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrevActionPerformed
    prev();
  }//GEN-LAST:event_jButtonPrevActionPerformed

  private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed
    next();
  }//GEN-LAST:event_jButtonNextActionPerformed

  private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
    stop();
    play();            
  }//GEN-LAST:event_jButtonStartActionPerformed

  private void jButtonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayActionPerformed
    play();
  }//GEN-LAST:event_jButtonPlayActionPerformed

  private void jButtonFPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFPlayActionPerformed
    fplay();
  }//GEN-LAST:event_jButtonFPlayActionPerformed

  private void jButtonPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPauseActionPerformed
    pause();
  }//GEN-LAST:event_jButtonPauseActionPerformed

  private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopActionPerformed
    stop();
  }//GEN-LAST:event_jButtonStopActionPerformed

  /** 
   * Play the current tune 
   */
  private void play() {
    Path path = Paths.get(project.file.replaceAll("[/\\\\]+", "/"));
    File file=new File(option.tmpPath+File.separator+path.getFileName());
       
    
    // write the file in temporary path
    FileManager.instance.writeFile(file, project.inB);
    sid=crsid.playSIDfile(file.getAbsolutePath(), tune);
    
    jButtonCurrent.setText(""+tune);
    jButtonMax.setText(""+sid.getMaxTune());
  }
  
  /**
   * Fast play
   */
  private void fplay() {
    crsid.fPlay();
  }
  
  /**
   * Stop playing
   */
  private void stop() {
    crsid.stopPlaying();
    
    Path path = Paths.get(project.file.replaceAll("[/\\\\]+", "/"));
    Memory.instance.close(option.tmpPath+File.separator+path.getFileName(), tune);
  }
  
  /**
   * Pause playing
   */
  private void pause() {
    crsid.pausePlaying();
  }
  
  /**
   * Prev tune
   */
  private void prev() {
    stop();
    tune--;
    if (tune<1) tune=1;
    play();
  }
  
  /**
   * Next tune
   */
  private void next() {
    stop();
    if (sid!=null && !(tune>=sid.getMaxTune())) tune++;    
    play();
  }
  
  
  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(JPlayerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(JPlayerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(JPlayerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(JPlayerDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        JPlayerDialog dialog = new JPlayerDialog(new javax.swing.JFrame(), true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
          @Override
          public void windowClosing(java.awt.event.WindowEvent e) {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCurrent;
    private javax.swing.JButton jButtonFPlay;
    private javax.swing.JButton jButtonMax;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JButton jButtonPause;
    private javax.swing.JButton jButtonPlay;
    private javax.swing.JButton jButtonPrev;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JButton jButtonStop;
    private javax.swing.JToolBar jToolBarPlayer;
    // End of variables declaration//GEN-END:variables
}
